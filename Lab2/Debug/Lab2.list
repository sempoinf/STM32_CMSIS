
Lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000620  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000750  08000758  00010758  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000750  08000750  00010758  2**0
                  CONTENTS
  4 .ARM          00000000  08000750  08000750  00010758  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000750  08000758  00010758  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000750  08000750  00010750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000754  08000754  00010754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010758  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000758  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000758  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010758  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010781  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a81  00000000  00000000  000107c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000238  00000000  00000000  00011245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b0  00000000  00000000  00011480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000007e  00000000  00000000  00011530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ff59  00000000  00000000  000115ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000080a  00000000  00000000  00021507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00054937  00000000  00000000  00021d11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000001f8  00000000  00000000  00076648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00076840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000738 	.word	0x08000738

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000738 	.word	0x08000738

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	; (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	4603      	mov	r3, r0
 80001b0:	6039      	str	r1, [r7, #0]
 80001b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	db0a      	blt.n	80001d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001bc:	683b      	ldr	r3, [r7, #0]
 80001be:	b2da      	uxtb	r2, r3
 80001c0:	490c      	ldr	r1, [pc, #48]	; (80001f4 <__NVIC_SetPriority+0x4c>)
 80001c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c6:	0112      	lsls	r2, r2, #4
 80001c8:	b2d2      	uxtb	r2, r2
 80001ca:	440b      	add	r3, r1
 80001cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001d0:	e00a      	b.n	80001e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001d2:	683b      	ldr	r3, [r7, #0]
 80001d4:	b2da      	uxtb	r2, r3
 80001d6:	4908      	ldr	r1, [pc, #32]	; (80001f8 <__NVIC_SetPriority+0x50>)
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	f003 030f 	and.w	r3, r3, #15
 80001de:	3b04      	subs	r3, #4
 80001e0:	0112      	lsls	r2, r2, #4
 80001e2:	b2d2      	uxtb	r2, r2
 80001e4:	440b      	add	r3, r1
 80001e6:	761a      	strb	r2, [r3, #24]
}
 80001e8:	bf00      	nop
 80001ea:	370c      	adds	r7, #12
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	e000e100 	.word	0xe000e100
 80001f8:	e000ed00 	.word	0xe000ed00

080001fc <init_ports>:
  * @brief  Инициализация портов ввода-вывода
  * @param  None
  * @retval None
  */
void init_ports(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;	//включить тактирование GPIOA
 8000200:	4b2e      	ldr	r3, [pc, #184]	; (80002bc <init_ports+0xc0>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a2d      	ldr	r2, [pc, #180]	; (80002bc <init_ports+0xc0>)
 8000206:	f043 0310 	orr.w	r3, r3, #16
 800020a:	6193      	str	r3, [r2, #24]
	//очистка полей
	GPIOA->CRL &= ~(GPIO_CRL_CNF0 | GPIO_CRL_MODE0);
 800020c:	4b2c      	ldr	r3, [pc, #176]	; (80002c0 <init_ports+0xc4>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a2b      	ldr	r2, [pc, #172]	; (80002c0 <init_ports+0xc4>)
 8000212:	f023 030f 	bic.w	r3, r3, #15
 8000216:	6013      	str	r3, [r2, #0]
	//и конфигурация
	GPIOA->CRL |= GPIO_CRL_MODE0_1;		//PC0, выход 2МГц
 8000218:	4b29      	ldr	r3, [pc, #164]	; (80002c0 <init_ports+0xc4>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a28      	ldr	r2, [pc, #160]	; (80002c0 <init_ports+0xc4>)
 800021e:	f043 0302 	orr.w	r3, r3, #2
 8000222:	6013      	str	r3, [r2, #0]
	//очистка полей
	GPIOA->CRL &= ~(GPIO_CRL_CNF1 | GPIO_CRL_MODE1);
 8000224:	4b26      	ldr	r3, [pc, #152]	; (80002c0 <init_ports+0xc4>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a25      	ldr	r2, [pc, #148]	; (80002c0 <init_ports+0xc4>)
 800022a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800022e:	6013      	str	r3, [r2, #0]
	//и конфигурация
	GPIOA->CRL |= GPIO_CRL_MODE1_1;		//PC1, выход 2МГц
 8000230:	4b23      	ldr	r3, [pc, #140]	; (80002c0 <init_ports+0xc4>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a22      	ldr	r2, [pc, #136]	; (80002c0 <init_ports+0xc4>)
 8000236:	f043 0320 	orr.w	r3, r3, #32
 800023a:	6013      	str	r3, [r2, #0]
	//очистка полей
	GPIOA->CRL &= ~(GPIO_CRL_CNF2 | GPIO_CRL_MODE2);
 800023c:	4b20      	ldr	r3, [pc, #128]	; (80002c0 <init_ports+0xc4>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a1f      	ldr	r2, [pc, #124]	; (80002c0 <init_ports+0xc4>)
 8000242:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000246:	6013      	str	r3, [r2, #0]
	//и конфигурация
	GPIOA->CRL |= GPIO_CRL_MODE2_1;		//PC2, выход 2МГц
 8000248:	4b1d      	ldr	r3, [pc, #116]	; (80002c0 <init_ports+0xc4>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a1c      	ldr	r2, [pc, #112]	; (80002c0 <init_ports+0xc4>)
 800024e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000252:	6013      	str	r3, [r2, #0]
	//очистка полей
	GPIOA->CRL &= ~(GPIO_CRL_CNF3 | GPIO_CRL_MODE3);
 8000254:	4b1a      	ldr	r3, [pc, #104]	; (80002c0 <init_ports+0xc4>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a19      	ldr	r2, [pc, #100]	; (80002c0 <init_ports+0xc4>)
 800025a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800025e:	6013      	str	r3, [r2, #0]
	//и конфигурация
	GPIOA->CRL |= GPIO_CRL_MODE3_1;		//PC3, выход 2МГц
 8000260:	4b17      	ldr	r3, [pc, #92]	; (80002c0 <init_ports+0xc4>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a16      	ldr	r2, [pc, #88]	; (80002c0 <init_ports+0xc4>)
 8000266:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800026a:	6013      	str	r3, [r2, #0]
	//очистка полей
	GPIOA->CRL &= ~(GPIO_CRL_CNF4 | GPIO_CRL_MODE4);
 800026c:	4b14      	ldr	r3, [pc, #80]	; (80002c0 <init_ports+0xc4>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a13      	ldr	r2, [pc, #76]	; (80002c0 <init_ports+0xc4>)
 8000272:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000276:	6013      	str	r3, [r2, #0]
	//и конфигурация
	GPIOA->CRL |= GPIO_CRL_MODE4_1;		//PC4, выход 2МГц
 8000278:	4b11      	ldr	r3, [pc, #68]	; (80002c0 <init_ports+0xc4>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a10      	ldr	r2, [pc, #64]	; (80002c0 <init_ports+0xc4>)
 800027e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000282:	6013      	str	r3, [r2, #0]
	//очистка полей
	GPIOA->CRL &= ~(GPIO_CRL_CNF5 | GPIO_CRL_MODE5);
 8000284:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <init_ports+0xc4>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a0d      	ldr	r2, [pc, #52]	; (80002c0 <init_ports+0xc4>)
 800028a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800028e:	6013      	str	r3, [r2, #0]
	//и конфигурация
	GPIOA->CRL |= GPIO_CRL_MODE5_1;		//PC5, выход 2МГц
 8000290:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <init_ports+0xc4>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <init_ports+0xc4>)
 8000296:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800029a:	6013      	str	r3, [r2, #0]
	//очистка полей
	GPIOA->CRL &= ~(GPIO_CRL_CNF6 | GPIO_CRL_MODE6);
 800029c:	4b08      	ldr	r3, [pc, #32]	; (80002c0 <init_ports+0xc4>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a07      	ldr	r2, [pc, #28]	; (80002c0 <init_ports+0xc4>)
 80002a2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80002a6:	6013      	str	r3, [r2, #0]
	//и конфигурация
	GPIOA->CRL |= GPIO_CRL_MODE6_1;		//PC5, выход 2МГц
 80002a8:	4b05      	ldr	r3, [pc, #20]	; (80002c0 <init_ports+0xc4>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a04      	ldr	r2, [pc, #16]	; (80002c0 <init_ports+0xc4>)
 80002ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002b2:	6013      	str	r3, [r2, #0]
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	40021000 	.word	0x40021000
 80002c0:	40010800 	.word	0x40010800

080002c4 <init_button>:
/**
  * @brief  Инициализация прерывания от кнопки (PC13)
  * @param  None
  * @retval None
  */
void init_button(void) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	//PC13 и PC12
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN | RCC_APB2ENR_AFIOEN;
 80002c8:	4b2b      	ldr	r3, [pc, #172]	; (8000378 <init_button+0xb4>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a2a      	ldr	r2, [pc, #168]	; (8000378 <init_button+0xb4>)
 80002ce:	f043 0311 	orr.w	r3, r3, #17
 80002d2:	6193      	str	r3, [r2, #24]

	GPIOC->CRH &= ~(GPIO_CRH_MODE13 | GPIO_CRH_CNF13);
 80002d4:	4b29      	ldr	r3, [pc, #164]	; (800037c <init_button+0xb8>)
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	4a28      	ldr	r2, [pc, #160]	; (800037c <init_button+0xb8>)
 80002da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80002de:	6053      	str	r3, [r2, #4]
		//...и выставляем так, как нам нужно
	GPIOC->CRH |= GPIO_CRH_CNF13_1;			//Вход с подтяжкой
 80002e0:	4b26      	ldr	r3, [pc, #152]	; (800037c <init_button+0xb8>)
 80002e2:	685b      	ldr	r3, [r3, #4]
 80002e4:	4a25      	ldr	r2, [pc, #148]	; (800037c <init_button+0xb8>)
 80002e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002ea:	6053      	str	r3, [r2, #4]
	GPIOC->BSRR |= GPIO_BSRR_BS13;			//Подтяжка к Vdd
 80002ec:	4b23      	ldr	r3, [pc, #140]	; (800037c <init_button+0xb8>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a22      	ldr	r2, [pc, #136]	; (800037c <init_button+0xb8>)
 80002f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002f6:	6113      	str	r3, [r2, #16]

	GPIOC->CRH &= ~(GPIO_CRH_MODE12 | GPIO_CRH_CNF12);
 80002f8:	4b20      	ldr	r3, [pc, #128]	; (800037c <init_button+0xb8>)
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	4a1f      	ldr	r2, [pc, #124]	; (800037c <init_button+0xb8>)
 80002fe:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000302:	6053      	str	r3, [r2, #4]
			//...и выставляем так, как нам нужно
	GPIOC->CRH |= GPIO_CRH_CNF12_1;			//Вход с подтяжкой
 8000304:	4b1d      	ldr	r3, [pc, #116]	; (800037c <init_button+0xb8>)
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	4a1c      	ldr	r2, [pc, #112]	; (800037c <init_button+0xb8>)
 800030a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800030e:	6053      	str	r3, [r2, #4]
	GPIOC->BSRR |= GPIO_BSRR_BS12;			//Подтяжка к Vdd
 8000310:	4b1a      	ldr	r3, [pc, #104]	; (800037c <init_button+0xb8>)
 8000312:	691b      	ldr	r3, [r3, #16]
 8000314:	4a19      	ldr	r2, [pc, #100]	; (800037c <init_button+0xb8>)
 8000316:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800031a:	6113      	str	r3, [r2, #16]

	// Настройка альтернативных фукнций портов.
	// Настройки портов с 12 по 15 хранятся в регистре AFIO_EXTICR4.
	// Регистры объединены в массив AFIO->EXTICR, нумерация массива начинается с нулевого элемента.
	// Поэтому настройки AFIO_EXTICR4 хранятся в AFIO->EXTICR[3]
	AFIO->EXTICR[3] |= AFIO_EXTICR4_EXTI13_PC;
 800031c:	4b18      	ldr	r3, [pc, #96]	; (8000380 <init_button+0xbc>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	4a17      	ldr	r2, [pc, #92]	; (8000380 <init_button+0xbc>)
 8000322:	f043 0320 	orr.w	r3, r3, #32
 8000326:	6153      	str	r3, [r2, #20]
	AFIO->EXTICR[3] |= AFIO_EXTICR4_EXTI12_PC;
 8000328:	4b15      	ldr	r3, [pc, #84]	; (8000380 <init_button+0xbc>)
 800032a:	695b      	ldr	r3, [r3, #20]
 800032c:	4a14      	ldr	r2, [pc, #80]	; (8000380 <init_button+0xbc>)
 800032e:	f043 0302 	orr.w	r3, r3, #2
 8000332:	6153      	str	r3, [r2, #20]

	EXTI->IMR |= EXTI_IMR_MR13;	//Выставляем маску - EXTI13
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <init_button+0xc0>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a12      	ldr	r2, [pc, #72]	; (8000384 <init_button+0xc0>)
 800033a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800033e:	6013      	str	r3, [r2, #0]
	EXTI->FTSR |= EXTI_FTSR_TR13;	//Прерывание по спаду импульса (при нажатии на кнопку)
 8000340:	4b10      	ldr	r3, [pc, #64]	; (8000384 <init_button+0xc0>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	4a0f      	ldr	r2, [pc, #60]	; (8000384 <init_button+0xc0>)
 8000346:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800034a:	60d3      	str	r3, [r2, #12]

	EXTI->IMR |= EXTI_IMR_MR12;	//Выставляем маску - EXTI13
 800034c:	4b0d      	ldr	r3, [pc, #52]	; (8000384 <init_button+0xc0>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a0c      	ldr	r2, [pc, #48]	; (8000384 <init_button+0xc0>)
 8000352:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000356:	6013      	str	r3, [r2, #0]
	EXTI->FTSR |= EXTI_FTSR_TR12;	//Прерывание по спаду импульса (при нажатии на кнопку)
 8000358:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <init_button+0xc0>)
 800035a:	68db      	ldr	r3, [r3, #12]
 800035c:	4a09      	ldr	r2, [pc, #36]	; (8000384 <init_button+0xc0>)
 800035e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000362:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000364:	2028      	movs	r0, #40	; 0x28
 8000366:	f7ff ff03 	bl	8000170 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI15_10_IRQn,2);
 800036a:	2102      	movs	r1, #2
 800036c:	2028      	movs	r0, #40	; 0x28
 800036e:	f7ff ff1b 	bl	80001a8 <__NVIC_SetPriority>
}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000
 800037c:	40011000 	.word	0x40011000
 8000380:	40010000 	.word	0x40010000
 8000384:	40010400 	.word	0x40010400

08000388 <EXTI15_10_IRQHandler>:
  *			Нас интересует EXTI13, там висит кнопка.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	// Т.к. этот обработчик вызывается, если произошло одно из прерываний EXTI15-EXI10,
	// нужно проверить, кто из них его вызвал.
	if (EXTI->PR & EXTI_PR_PR12) 		// нас интересует EXTI13
 800038c:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <EXTI15_10_IRQHandler+0x68>)
 800038e:	695b      	ldr	r3, [r3, #20]
 8000390:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000394:	2b00      	cmp	r3, #0
 8000396:	d012      	beq.n	80003be <EXTI15_10_IRQHandler+0x36>
	{
		delay(10000);					//Задержка для защиты от дребезга контактов
 8000398:	f242 7010 	movw	r0, #10000	; 0x2710
 800039c:	f000 f969 	bl	8000672 <delay>
		EXTI->PR |= EXTI_PR_PR12;
 80003a0:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <EXTI15_10_IRQHandler+0x68>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <EXTI15_10_IRQHandler+0x68>)
 80003a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003aa:	6153      	str	r3, [r2, #20]
		TIM2->CR1 ^= TIM_CR1_CEN;		//Инвертируем состояние таймера
 80003ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003b6:	f083 0301 	eor.w	r3, r3, #1
 80003ba:	6013      	str	r3, [r2, #0]
		//change_Mode();
		return;
 80003bc:	e016      	b.n	80003ec <EXTI15_10_IRQHandler+0x64>
	}

	// Т.к. этот обработчик вызывается, если произошло одно из прерываний EXTI15-EXI10,
		// нужно проверить, кто из них его вызвал.
	if (EXTI->PR & EXTI_PR_PR13) 		// нас интересует EXTI12
 80003be:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <EXTI15_10_IRQHandler+0x68>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d010      	beq.n	80003ec <EXTI15_10_IRQHandler+0x64>
	{
		delay(10000);					//Задержка для защиты от дребезга контактов
 80003ca:	f242 7010 	movw	r0, #10000	; 0x2710
 80003ce:	f000 f950 	bl	8000672 <delay>
		EXTI->PR |= EXTI_PR_PR13;
 80003d2:	4b07      	ldr	r3, [pc, #28]	; (80003f0 <EXTI15_10_IRQHandler+0x68>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	4a06      	ldr	r2, [pc, #24]	; (80003f0 <EXTI15_10_IRQHandler+0x68>)
 80003d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003dc:	6153      	str	r3, [r2, #20]
		//TIM2->CR1 ^= TIM_CR1_CEN;		//Инвертируем состояние таймера
		increment();					//fun for counts of button
 80003de:	f000 f817 	bl	8000410 <increment>
		reset_all();
 80003e2:	f000 f807 	bl	80003f4 <reset_all>
		indicator();
 80003e6:	f000 f829 	bl	800043c <indicator>
		return;//7segment
 80003ea:	bf00      	nop
	}
}
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40010400 	.word	0x40010400

080003f4 <reset_all>:

void reset_all(){
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
	GPIOC->BSRR |= GPIO_BSRR_BR0 |  GPIO_BSRR_BR1 | GPIO_BSRR_BR2 | GPIO_BSRR_BR3 | GPIO_BSRR_BR4 | GPIO_BSRR_BR5 | GPIO_BSRR_BR6;
 80003f8:	4b04      	ldr	r3, [pc, #16]	; (800040c <reset_all+0x18>)
 80003fa:	691b      	ldr	r3, [r3, #16]
 80003fc:	4a03      	ldr	r2, [pc, #12]	; (800040c <reset_all+0x18>)
 80003fe:	f443 03fe 	orr.w	r3, r3, #8323072	; 0x7f0000
 8000402:	6113      	str	r3, [r2, #16]
	//	GPIO_BSRR_BR0			@ сбрасываем в '0'
	//	GPIO_BSRR_BS0			@ в '1'
	return;
 8000404:	bf00      	nop
}
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	40011000 	.word	0x40011000

08000410 <increment>:

void increment(){
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0

	if (count > 9)
 8000414:	4b08      	ldr	r3, [pc, #32]	; (8000438 <increment+0x28>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b09      	cmp	r3, #9
 800041a:	d905      	bls.n	8000428 <increment+0x18>
		{
		count = 0;
 800041c:	4b06      	ldr	r3, [pc, #24]	; (8000438 <increment+0x28>)
 800041e:	2200      	movs	r2, #0
 8000420:	701a      	strb	r2, [r3, #0]
		indicator();
 8000422:	f000 f80b 	bl	800043c <indicator>
		}
	else count++;
}
 8000426:	e005      	b.n	8000434 <increment+0x24>
	else count++;
 8000428:	4b03      	ldr	r3, [pc, #12]	; (8000438 <increment+0x28>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	3301      	adds	r3, #1
 800042e:	b2da      	uxtb	r2, r3
 8000430:	4b01      	ldr	r3, [pc, #4]	; (8000438 <increment+0x28>)
 8000432:	701a      	strb	r2, [r3, #0]
}
 8000434:	bf00      	nop
 8000436:	bd80      	pop	{r7, pc}
 8000438:	2000001c 	.word	0x2000001c

0800043c <indicator>:

void indicator(){
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
//	case 6:	GPIOC->BSRR =
//	case 7:	GPIOC->BSRR =
//	case 8:	GPIOC->BSRR =
//	case 9:	GPIOC->BSRR =
//	}
	switch(count)
 8000440:	4b32      	ldr	r3, [pc, #200]	; (800050c <indicator+0xd0>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b09      	cmp	r3, #9
 8000446:	d85c      	bhi.n	8000502 <indicator+0xc6>
 8000448:	a201      	add	r2, pc, #4	; (adr r2, 8000450 <indicator+0x14>)
 800044a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800044e:	bf00      	nop
 8000450:	08000479 	.word	0x08000479
 8000454:	08000487 	.word	0x08000487
 8000458:	08000495 	.word	0x08000495
 800045c:	080004a3 	.word	0x080004a3
 8000460:	080004b1 	.word	0x080004b1
 8000464:	080004bf 	.word	0x080004bf
 8000468:	080004cd 	.word	0x080004cd
 800046c:	080004db 	.word	0x080004db
 8000470:	080004e9 	.word	0x080004e9
 8000474:	080004f5 	.word	0x080004f5
	  {
	  case 0:
	    GPIOC->ODR |= GPIO_ODR_ODR0 |  GPIO_ODR_ODR1 | GPIO_ODR_ODR2 | GPIO_ODR_ODR3 | GPIO_ODR_ODR4 | GPIO_ODR_ODR5;
 8000478:	4b25      	ldr	r3, [pc, #148]	; (8000510 <indicator+0xd4>)
 800047a:	68db      	ldr	r3, [r3, #12]
 800047c:	4a24      	ldr	r2, [pc, #144]	; (8000510 <indicator+0xd4>)
 800047e:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000482:	60d3      	str	r3, [r2, #12]
	    break;
 8000484:	e040      	b.n	8000508 <indicator+0xcc>
	  case 1:
	    GPIOC->ODR |= GPIO_ODR_ODR1 | GPIO_ODR_ODR2;
 8000486:	4b22      	ldr	r3, [pc, #136]	; (8000510 <indicator+0xd4>)
 8000488:	68db      	ldr	r3, [r3, #12]
 800048a:	4a21      	ldr	r2, [pc, #132]	; (8000510 <indicator+0xd4>)
 800048c:	f043 0306 	orr.w	r3, r3, #6
 8000490:	60d3      	str	r3, [r2, #12]
	    break;
 8000492:	e039      	b.n	8000508 <indicator+0xcc>
	  case 2:
	    GPIOC->ODR |= GPIO_ODR_ODR0 |  GPIO_ODR_ODR1 | GPIO_ODR_ODR3 | GPIO_ODR_ODR4 | GPIO_ODR_ODR6;
 8000494:	4b1e      	ldr	r3, [pc, #120]	; (8000510 <indicator+0xd4>)
 8000496:	68db      	ldr	r3, [r3, #12]
 8000498:	4a1d      	ldr	r2, [pc, #116]	; (8000510 <indicator+0xd4>)
 800049a:	f043 035b 	orr.w	r3, r3, #91	; 0x5b
 800049e:	60d3      	str	r3, [r2, #12]
	    break;
 80004a0:	e032      	b.n	8000508 <indicator+0xcc>
	  case 3:
	    GPIOC->ODR |= GPIO_ODR_ODR0 |  GPIO_ODR_ODR1 | GPIO_ODR_ODR2 | GPIO_ODR_ODR3 | GPIO_ODR_ODR6;
 80004a2:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <indicator+0xd4>)
 80004a4:	68db      	ldr	r3, [r3, #12]
 80004a6:	4a1a      	ldr	r2, [pc, #104]	; (8000510 <indicator+0xd4>)
 80004a8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 80004ac:	60d3      	str	r3, [r2, #12]
	    break;
 80004ae:	e02b      	b.n	8000508 <indicator+0xcc>
	  case 4:
	    GPIOC->ODR |= GPIO_ODR_ODR1 | GPIO_ODR_ODR2 | GPIO_ODR_ODR5 | GPIO_ODR_ODR6;
 80004b0:	4b17      	ldr	r3, [pc, #92]	; (8000510 <indicator+0xd4>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	4a16      	ldr	r2, [pc, #88]	; (8000510 <indicator+0xd4>)
 80004b6:	f043 0366 	orr.w	r3, r3, #102	; 0x66
 80004ba:	60d3      	str	r3, [r2, #12]
	    break;
 80004bc:	e024      	b.n	8000508 <indicator+0xcc>
	  case 5:
	    GPIOC->ODR |= GPIO_ODR_ODR0 | GPIO_ODR_ODR2 | GPIO_ODR_ODR3 | GPIO_ODR_ODR5 | GPIO_ODR_ODR6;
 80004be:	4b14      	ldr	r3, [pc, #80]	; (8000510 <indicator+0xd4>)
 80004c0:	68db      	ldr	r3, [r3, #12]
 80004c2:	4a13      	ldr	r2, [pc, #76]	; (8000510 <indicator+0xd4>)
 80004c4:	f043 036d 	orr.w	r3, r3, #109	; 0x6d
 80004c8:	60d3      	str	r3, [r2, #12]
	    break;
 80004ca:	e01d      	b.n	8000508 <indicator+0xcc>
	  case 6:
	    GPIOC->ODR |= GPIO_ODR_ODR0 | GPIO_ODR_ODR2 | GPIO_ODR_ODR3 | GPIO_ODR_ODR4 | GPIO_ODR_ODR5 | GPIO_ODR_ODR6;
 80004cc:	4b10      	ldr	r3, [pc, #64]	; (8000510 <indicator+0xd4>)
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	4a0f      	ldr	r2, [pc, #60]	; (8000510 <indicator+0xd4>)
 80004d2:	f043 037d 	orr.w	r3, r3, #125	; 0x7d
 80004d6:	60d3      	str	r3, [r2, #12]
	    break;
 80004d8:	e016      	b.n	8000508 <indicator+0xcc>
	  case 7:
	    GPIOC->ODR |= GPIO_ODR_ODR1| GPIO_ODR_ODR1 | GPIO_ODR_ODR2;
 80004da:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <indicator+0xd4>)
 80004dc:	68db      	ldr	r3, [r3, #12]
 80004de:	4a0c      	ldr	r2, [pc, #48]	; (8000510 <indicator+0xd4>)
 80004e0:	f043 0306 	orr.w	r3, r3, #6
 80004e4:	60d3      	str	r3, [r2, #12]
	    break;
 80004e6:	e00f      	b.n	8000508 <indicator+0xcc>
	  case 8:
	    GPIOC->ODR |= GPIO_ODR_ODR0 |  GPIO_ODR_ODR1 | GPIO_ODR_ODR2 | GPIO_ODR_ODR3 | GPIO_ODR_ODR4 | GPIO_ODR_ODR5 | GPIO_ODR_ODR6;
 80004e8:	4b09      	ldr	r3, [pc, #36]	; (8000510 <indicator+0xd4>)
 80004ea:	68db      	ldr	r3, [r3, #12]
 80004ec:	4a08      	ldr	r2, [pc, #32]	; (8000510 <indicator+0xd4>)
 80004ee:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 80004f2:	60d3      	str	r3, [r2, #12]
	  case 9:
	  	GPIOC->ODR |= GPIO_ODR_ODR0 |  GPIO_ODR_ODR1 | GPIO_ODR_ODR2 | GPIO_ODR_ODR3 | GPIO_ODR_ODR5 | GPIO_ODR_ODR6;
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <indicator+0xd4>)
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	4a05      	ldr	r2, [pc, #20]	; (8000510 <indicator+0xd4>)
 80004fa:	f043 036f 	orr.w	r3, r3, #111	; 0x6f
 80004fe:	60d3      	str	r3, [r2, #12]
	    break;
 8000500:	e002      	b.n	8000508 <indicator+0xcc>
	  default:
		//reset_all();
		increment();
 8000502:	f7ff ff85 	bl	8000410 <increment>

	    break;
 8000506:	bf00      	nop
	  }
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	2000001c 	.word	0x2000001c
 8000510:	40011000 	.word	0x40011000

08000514 <init_tim>:
void init_tim(void) {
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0

	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000518:	4b14      	ldr	r3, [pc, #80]	; (800056c <init_tim+0x58>)
 800051a:	69db      	ldr	r3, [r3, #28]
 800051c:	4a13      	ldr	r2, [pc, #76]	; (800056c <init_tim+0x58>)
 800051e:	f043 0301 	orr.w	r3, r3, #1
 8000522:	61d3      	str	r3, [r2, #28]

	//Частота APB1 для таймеров = APB1Clk * 2 = 32МГц * 2 = 64МГц
	TIM2->PSC = 640-1;						//Предделитель частоты (64МГц/32000 = 10кГц)
 8000524:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000528:	f240 227f 	movw	r2, #639	; 0x27f
 800052c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 1000;						//Модуль счёта таймера (10кГц/1000 = 1с)
 800052e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000532:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000536:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->DIER |= TIM_DIER_UIE;				//Разрешить прерывание по переполнению таймера
 8000538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800053c:	68db      	ldr	r3, [r3, #12]
 800053e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000542:	f043 0301 	orr.w	r3, r3, #1
 8000546:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 |= TIM_CR1_CEN;				//Включить таймер
 8000548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000552:	f043 0301 	orr.w	r3, r3, #1
 8000556:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ(TIM2_IRQn);				//Разрешить прерывание от TIM2
 8000558:	201c      	movs	r0, #28
 800055a:	f7ff fe09 	bl	8000170 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM2_IRQn, 2);			//Выставляем приоритет
 800055e:	2102      	movs	r1, #2
 8000560:	201c      	movs	r0, #28
 8000562:	f7ff fe21 	bl	80001a8 <__NVIC_SetPriority>
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40021000 	.word	0x40021000

08000570 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;
 8000574:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000578:	691b      	ldr	r3, [r3, #16]
 800057a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800057e:	f023 0301 	bic.w	r3, r3, #1
 8000582:	6113      	str	r3, [r2, #16]
	increment();
 8000584:	f7ff ff44 	bl	8000410 <increment>
	indicator();
 8000588:	f7ff ff58 	bl	800043c <indicator>
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}

08000590 <init_clk>:
void change_Mode(){
	mode = (mode) ? 0:1;
}

void init_clk(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
	// Enable HSI
	RCC->CR |= RCC_CR_HSION;
 8000594:	4b2e      	ldr	r3, [pc, #184]	; (8000650 <init_clk+0xc0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a2d      	ldr	r2, [pc, #180]	; (8000650 <init_clk+0xc0>)
 800059a:	f043 0301 	orr.w	r3, r3, #1
 800059e:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSIRDY)){};
 80005a0:	bf00      	nop
 80005a2:	4b2b      	ldr	r3, [pc, #172]	; (8000650 <init_clk+0xc0>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f003 0302 	and.w	r3, r3, #2
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d0f9      	beq.n	80005a2 <init_clk+0x12>

	// Enable Prefetch Buffer
	FLASH->ACR |= FLASH_ACR_PRFTBE;
 80005ae:	4b29      	ldr	r3, [pc, #164]	; (8000654 <init_clk+0xc4>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a28      	ldr	r2, [pc, #160]	; (8000654 <init_clk+0xc4>)
 80005b4:	f043 0310 	orr.w	r3, r3, #16
 80005b8:	6013      	str	r3, [r2, #0]

	// Flash 2 wait state
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 80005ba:	4b26      	ldr	r3, [pc, #152]	; (8000654 <init_clk+0xc4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a25      	ldr	r2, [pc, #148]	; (8000654 <init_clk+0xc4>)
 80005c0:	f023 0307 	bic.w	r3, r3, #7
 80005c4:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_2;
 80005c6:	4b23      	ldr	r3, [pc, #140]	; (8000654 <init_clk+0xc4>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a22      	ldr	r2, [pc, #136]	; (8000654 <init_clk+0xc4>)
 80005cc:	f043 0304 	orr.w	r3, r3, #4
 80005d0:	6013      	str	r3, [r2, #0]

	// HCLK = SYSCLK
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80005d2:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <init_clk+0xc0>)
 80005d4:	4a1e      	ldr	r2, [pc, #120]	; (8000650 <init_clk+0xc0>)
 80005d6:	685b      	ldr	r3, [r3, #4]
 80005d8:	6053      	str	r3, [r2, #4]

	// PCLK2 = HCLK
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 80005da:	4b1d      	ldr	r3, [pc, #116]	; (8000650 <init_clk+0xc0>)
 80005dc:	4a1c      	ldr	r2, [pc, #112]	; (8000650 <init_clk+0xc0>)
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	6053      	str	r3, [r2, #4]

	// PCLK1 = HCLK/2
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 80005e2:	4b1b      	ldr	r3, [pc, #108]	; (8000650 <init_clk+0xc0>)
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	4a1a      	ldr	r2, [pc, #104]	; (8000650 <init_clk+0xc0>)
 80005e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ec:	6053      	str	r3, [r2, #4]

	// PLL configuration: PLLCLK = HSI/2 * 16 = 64 MHz
	RCC->CFGR &= ~RCC_CFGR_PLLSRC;
 80005ee:	4b18      	ldr	r3, [pc, #96]	; (8000650 <init_clk+0xc0>)
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	4a17      	ldr	r2, [pc, #92]	; (8000650 <init_clk+0xc0>)
 80005f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005f8:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLMULL16;
 80005fa:	4b15      	ldr	r3, [pc, #84]	; (8000650 <init_clk+0xc0>)
 80005fc:	685b      	ldr	r3, [r3, #4]
 80005fe:	4a14      	ldr	r2, [pc, #80]	; (8000650 <init_clk+0xc0>)
 8000600:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8000604:	6053      	str	r3, [r2, #4]

	// Enable PLL
	RCC->CR |= RCC_CR_PLLON;
 8000606:	4b12      	ldr	r3, [pc, #72]	; (8000650 <init_clk+0xc0>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a11      	ldr	r2, [pc, #68]	; (8000650 <init_clk+0xc0>)
 800060c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000610:	6013      	str	r3, [r2, #0]

	// Wait till PLL is ready
	while((RCC->CR & RCC_CR_PLLRDY) == 0) {};
 8000612:	bf00      	nop
 8000614:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <init_clk+0xc0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800061c:	2b00      	cmp	r3, #0
 800061e:	d0f9      	beq.n	8000614 <init_clk+0x84>

	// Select PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 8000620:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <init_clk+0xc0>)
 8000622:	685b      	ldr	r3, [r3, #4]
 8000624:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <init_clk+0xc0>)
 8000626:	f023 0303 	bic.w	r3, r3, #3
 800062a:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <init_clk+0xc0>)
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	4a07      	ldr	r2, [pc, #28]	; (8000650 <init_clk+0xc0>)
 8000632:	f043 0302 	orr.w	r3, r3, #2
 8000636:	6053      	str	r3, [r2, #4]

	// Wait till PLL is used as system clock source
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL){};
 8000638:	bf00      	nop
 800063a:	4b05      	ldr	r3, [pc, #20]	; (8000650 <init_clk+0xc0>)
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	f003 030c 	and.w	r3, r3, #12
 8000642:	2b08      	cmp	r3, #8
 8000644:	d1f9      	bne.n	800063a <init_clk+0xaa>
}
 8000646:	bf00      	nop
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	40021000 	.word	0x40021000
 8000654:	40022000 	.word	0x40022000

08000658 <main>:
//
//}


int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	init_clk();
 800065c:	f7ff ff98 	bl	8000590 <init_clk>
	init_button();
 8000660:	f7ff fe30 	bl	80002c4 <init_button>
	init_tim();
 8000664:	f7ff ff56 	bl	8000514 <init_tim>
	init_ports();
 8000668:	f7ff fdc8 	bl	80001fc <init_ports>
	//     if (CommandReceived == true)
	//     	{
	//    		ExecudeCommand();
	//     	}
	// 	}
	indicator();
 800066c:	f7ff fee6 	bl	800043c <indicator>
    /* Loop*/
	while (true)
 8000670:	e7fe      	b.n	8000670 <main+0x18>

08000672 <delay>:
	{
	}
}

void delay(uint32_t value) {
 8000672:	b480      	push	{r7}
 8000674:	b085      	sub	sp, #20
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
	for (uint32_t i=0; i<value; i++);
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	e002      	b.n	8000686 <delay+0x14>
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	3301      	adds	r3, #1
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	429a      	cmp	r2, r3
 800068c:	d3f8      	bcc.n	8000680 <delay+0xe>
}
 800068e:	bf00      	nop
 8000690:	bf00      	nop
 8000692:	3714      	adds	r7, #20
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr
	...

0800069c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800069c:	480d      	ldr	r0, [pc, #52]	; (80006d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800069e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006a6:	490d      	ldr	r1, [pc, #52]	; (80006dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a8:	4a0d      	ldr	r2, [pc, #52]	; (80006e0 <LoopForever+0xe>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ac:	e002      	b.n	80006b4 <LoopCopyDataInit>

080006ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b2:	3304      	adds	r3, #4

080006b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b8:	d3f9      	bcc.n	80006ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ba:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006bc:	4c0a      	ldr	r4, [pc, #40]	; (80006e8 <LoopForever+0x16>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c0:	e001      	b.n	80006c6 <LoopFillZerobss>

080006c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c4:	3204      	adds	r2, #4

080006c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c8:	d3fb      	bcc.n	80006c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ca:	f000 f811 	bl	80006f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ce:	f7ff ffc3 	bl	8000658 <main>

080006d2 <LoopForever>:

LoopForever:
  b LoopForever
 80006d2:	e7fe      	b.n	80006d2 <LoopForever>
  ldr   r0, =_estack
 80006d4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80006d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006dc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80006e0:	08000758 	.word	0x08000758
  ldr r2, =_sbss
 80006e4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006e8:	20000020 	.word	0x20000020

080006ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ec:	e7fe      	b.n	80006ec <ADC1_2_IRQHandler>
	...

080006f0 <__libc_init_array>:
 80006f0:	b570      	push	{r4, r5, r6, lr}
 80006f2:	2600      	movs	r6, #0
 80006f4:	4d0c      	ldr	r5, [pc, #48]	; (8000728 <__libc_init_array+0x38>)
 80006f6:	4c0d      	ldr	r4, [pc, #52]	; (800072c <__libc_init_array+0x3c>)
 80006f8:	1b64      	subs	r4, r4, r5
 80006fa:	10a4      	asrs	r4, r4, #2
 80006fc:	42a6      	cmp	r6, r4
 80006fe:	d109      	bne.n	8000714 <__libc_init_array+0x24>
 8000700:	f000 f81a 	bl	8000738 <_init>
 8000704:	2600      	movs	r6, #0
 8000706:	4d0a      	ldr	r5, [pc, #40]	; (8000730 <__libc_init_array+0x40>)
 8000708:	4c0a      	ldr	r4, [pc, #40]	; (8000734 <__libc_init_array+0x44>)
 800070a:	1b64      	subs	r4, r4, r5
 800070c:	10a4      	asrs	r4, r4, #2
 800070e:	42a6      	cmp	r6, r4
 8000710:	d105      	bne.n	800071e <__libc_init_array+0x2e>
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f855 3b04 	ldr.w	r3, [r5], #4
 8000718:	4798      	blx	r3
 800071a:	3601      	adds	r6, #1
 800071c:	e7ee      	b.n	80006fc <__libc_init_array+0xc>
 800071e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000722:	4798      	blx	r3
 8000724:	3601      	adds	r6, #1
 8000726:	e7f2      	b.n	800070e <__libc_init_array+0x1e>
 8000728:	08000750 	.word	0x08000750
 800072c:	08000750 	.word	0x08000750
 8000730:	08000750 	.word	0x08000750
 8000734:	08000754 	.word	0x08000754

08000738 <_init>:
 8000738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073a:	bf00      	nop
 800073c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800073e:	bc08      	pop	{r3}
 8000740:	469e      	mov	lr, r3
 8000742:	4770      	bx	lr

08000744 <_fini>:
 8000744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000746:	bf00      	nop
 8000748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800074a:	bc08      	pop	{r3}
 800074c:	469e      	mov	lr, r3
 800074e:	4770      	bx	lr

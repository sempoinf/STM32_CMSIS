
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e28  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f58  08000f60  00010f60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f58  08000f58  00010f60  2**0
                  CONTENTS
  4 .ARM          00000000  08000f58  08000f58  00010f60  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f58  08000f60  00010f60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f58  08000f58  00010f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f5c  08000f5c  00010f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000000  08000f60  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000f60  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010f60  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010f89  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000b7f  00000000  00000000  00010fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000293  00000000  00000000  00011b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a0  00000000  00000000  00011de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000071  00000000  00000000  00011e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010d1c  00000000  00000000  00011ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000988  00000000  00000000  00022c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00058b9f  00000000  00000000  00023595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000310  00000000  00000000  0007c134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0007c444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f40 	.word	0x08000f40

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000f40 	.word	0x08000f40

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2f>:
 800090c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000910:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000914:	bf24      	itt	cs
 8000916:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800091a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800091e:	d90d      	bls.n	800093c <__aeabi_d2f+0x30>
 8000920:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000924:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000928:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800092c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000930:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000934:	bf08      	it	eq
 8000936:	f020 0001 	biceq.w	r0, r0, #1
 800093a:	4770      	bx	lr
 800093c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000940:	d121      	bne.n	8000986 <__aeabi_d2f+0x7a>
 8000942:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000946:	bfbc      	itt	lt
 8000948:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800094c:	4770      	bxlt	lr
 800094e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000952:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000956:	f1c2 0218 	rsb	r2, r2, #24
 800095a:	f1c2 0c20 	rsb	ip, r2, #32
 800095e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000962:	fa20 f002 	lsr.w	r0, r0, r2
 8000966:	bf18      	it	ne
 8000968:	f040 0001 	orrne.w	r0, r0, #1
 800096c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000970:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000974:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000978:	ea40 000c 	orr.w	r0, r0, ip
 800097c:	fa23 f302 	lsr.w	r3, r3, r2
 8000980:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000984:	e7cc      	b.n	8000920 <__aeabi_d2f+0x14>
 8000986:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800098a:	d107      	bne.n	800099c <__aeabi_d2f+0x90>
 800098c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000990:	bf1e      	ittt	ne
 8000992:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000996:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800099a:	4770      	bxne	lr
 800099c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <__aeabi_f2iz>:
 80009ac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80009b0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80009b4:	d30f      	bcc.n	80009d6 <__aeabi_f2iz+0x2a>
 80009b6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80009ba:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80009be:	d90d      	bls.n	80009dc <__aeabi_f2iz+0x30>
 80009c0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009cc:	fa23 f002 	lsr.w	r0, r3, r2
 80009d0:	bf18      	it	ne
 80009d2:	4240      	negne	r0, r0
 80009d4:	4770      	bx	lr
 80009d6:	f04f 0000 	mov.w	r0, #0
 80009da:	4770      	bx	lr
 80009dc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80009e0:	d101      	bne.n	80009e6 <__aeabi_f2iz+0x3a>
 80009e2:	0242      	lsls	r2, r0, #9
 80009e4:	d105      	bne.n	80009f2 <__aeabi_f2iz+0x46>
 80009e6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80009ea:	bf08      	it	eq
 80009ec:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009f0:	4770      	bx	lr
 80009f2:	f04f 0000 	mov.w	r0, #0
 80009f6:	4770      	bx	lr

080009f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	db0b      	blt.n	8000a22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	f003 021f 	and.w	r2, r3, #31
 8000a10:	4906      	ldr	r1, [pc, #24]	; (8000a2c <__NVIC_EnableIRQ+0x34>)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	095b      	lsrs	r3, r3, #5
 8000a18:	2001      	movs	r0, #1
 8000a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	e000e100 	.word	0xe000e100

08000a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	db0a      	blt.n	8000a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	490c      	ldr	r1, [pc, #48]	; (8000a7c <__NVIC_SetPriority+0x4c>)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	0112      	lsls	r2, r2, #4
 8000a50:	b2d2      	uxtb	r2, r2
 8000a52:	440b      	add	r3, r1
 8000a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a58:	e00a      	b.n	8000a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	b2da      	uxtb	r2, r3
 8000a5e:	4908      	ldr	r1, [pc, #32]	; (8000a80 <__NVIC_SetPriority+0x50>)
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	f003 030f 	and.w	r3, r3, #15
 8000a66:	3b04      	subs	r3, #4
 8000a68:	0112      	lsls	r2, r2, #4
 8000a6a:	b2d2      	uxtb	r2, r2
 8000a6c:	440b      	add	r3, r1
 8000a6e:	761a      	strb	r2, [r3, #24]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000e100 	.word	0xe000e100
 8000a80:	e000ed00 	.word	0xe000ed00

08000a84 <init_clk>:
 * 		Частота: 64МГц
 * @param  None
 * @retval None
 */
void init_clk(void) // settings of frequency 64MHz
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  // Enable HSI
  RCC->CR |= RCC_CR_HSION;
 8000a88:	4b2e      	ldr	r3, [pc, #184]	; (8000b44 <init_clk+0xc0>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a2d      	ldr	r2, [pc, #180]	; (8000b44 <init_clk+0xc0>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY)){};
 8000a94:	bf00      	nop
 8000a96:	4b2b      	ldr	r3, [pc, #172]	; (8000b44 <init_clk+0xc0>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f003 0302 	and.w	r3, r3, #2
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d0f9      	beq.n	8000a96 <init_clk+0x12>
  // Enable Prefetch Buffer
  FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000aa2:	4b29      	ldr	r3, [pc, #164]	; (8000b48 <init_clk+0xc4>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a28      	ldr	r2, [pc, #160]	; (8000b48 <init_clk+0xc4>)
 8000aa8:	f043 0310 	orr.w	r3, r3, #16
 8000aac:	6013      	str	r3, [r2, #0]
  // Flash 2 wait state
  FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8000aae:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <init_clk+0xc4>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a25      	ldr	r2, [pc, #148]	; (8000b48 <init_clk+0xc4>)
 8000ab4:	f023 0307 	bic.w	r3, r3, #7
 8000ab8:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_ACR_LATENCY_2;
 8000aba:	4b23      	ldr	r3, [pc, #140]	; (8000b48 <init_clk+0xc4>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a22      	ldr	r2, [pc, #136]	; (8000b48 <init_clk+0xc4>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	6013      	str	r3, [r2, #0]
  // HCLK = SYSCLK
  RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000ac6:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <init_clk+0xc0>)
 8000ac8:	4a1e      	ldr	r2, [pc, #120]	; (8000b44 <init_clk+0xc0>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	6053      	str	r3, [r2, #4]
  // PCLK2 = HCLK
  RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000ace:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <init_clk+0xc0>)
 8000ad0:	4a1c      	ldr	r2, [pc, #112]	; (8000b44 <init_clk+0xc0>)
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	6053      	str	r3, [r2, #4]
  // PCLK1 = HCLK/2
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <init_clk+0xc0>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	4a1a      	ldr	r2, [pc, #104]	; (8000b44 <init_clk+0xc0>)
 8000adc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ae0:	6053      	str	r3, [r2, #4]

  // PLL configuration: PLLCLK = HSI/2 * 16 = 64 MHz
  RCC->CFGR &= ~RCC_CFGR_PLLSRC;
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <init_clk+0xc0>)
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <init_clk+0xc0>)
 8000ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000aec:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_PLLMULL16;
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <init_clk+0xc0>)
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <init_clk+0xc0>)
 8000af4:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8000af8:	6053      	str	r3, [r2, #4]

  // Enable PLL
  RCC->CR |= RCC_CR_PLLON;
 8000afa:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <init_clk+0xc0>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a11      	ldr	r2, [pc, #68]	; (8000b44 <init_clk+0xc0>)
 8000b00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b04:	6013      	str	r3, [r2, #0]

  // Wait till PLL is ready
  while ((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000b06:	bf00      	nop
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <init_clk+0xc0>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d0f9      	beq.n	8000b08 <init_clk+0x84>
  {
  };

  // Select PLL as system clock source
  RCC->CFGR &= ~RCC_CFGR_SW;
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <init_clk+0xc0>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <init_clk+0xc0>)
 8000b1a:	f023 0303 	bic.w	r3, r3, #3
 8000b1e:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <init_clk+0xc0>)
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <init_clk+0xc0>)
 8000b26:	f043 0302 	orr.w	r3, r3, #2
 8000b2a:	6053      	str	r3, [r2, #4]

  // Wait till PLL is used as system clock source
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL)
 8000b2c:	bf00      	nop
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <init_clk+0xc0>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f003 030c 	and.w	r3, r3, #12
 8000b36:	2b08      	cmp	r3, #8
 8000b38:	d1f9      	bne.n	8000b2e <init_clk+0xaa>
  {
  };
}
 8000b3a:	bf00      	nop
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40022000 	.word	0x40022000

08000b4c <init_adc1>:

void init_adc1(void) // settings of adc1 as Leo
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;              // Включить тактирование порта GPIOC
 8000b50:	4b2e      	ldr	r3, [pc, #184]	; (8000c0c <init_adc1+0xc0>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a2d      	ldr	r2, [pc, #180]	; (8000c0c <init_adc1+0xc0>)
 8000b56:	f043 0310 	orr.w	r3, r3, #16
 8000b5a:	6193      	str	r3, [r2, #24]
  GPIOC->CRL &= ~(GPIO_CRL_MODE4 | GPIO_CRL_CNF4); // PC4 на вход
 8000b5c:	4b2c      	ldr	r3, [pc, #176]	; (8000c10 <init_adc1+0xc4>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a2b      	ldr	r2, [pc, #172]	; (8000c10 <init_adc1+0xc4>)
 8000b62:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000b66:	6013      	str	r3, [r2, #0]

//  GPIOC->CRL &= ~(GPIO_CRL_CNF4_Msk | GPIO_CRL_MODE4_Msk);
//  GPIOC->CRL |= (0x00 << GPIO_CRL_CNF4_Pos) | (0x00 << GPIO_CRL_MODE4_Pos);

  RCC->CFGR &= ~RCC_CFGR_ADCPRE;
 8000b68:	4b28      	ldr	r3, [pc, #160]	; (8000c0c <init_adc1+0xc0>)
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	4a27      	ldr	r2, [pc, #156]	; (8000c0c <init_adc1+0xc0>)
 8000b6e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b72:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_ADCPRE_DIV8; // prescaler = 8
 8000b74:	4b25      	ldr	r3, [pc, #148]	; (8000c0c <init_adc1+0xc0>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	4a24      	ldr	r2, [pc, #144]	; (8000c0c <init_adc1+0xc0>)
 8000b7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b7e:	6053      	str	r3, [r2, #4]

  RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;    //  такты на ADC1
 8000b80:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <init_adc1+0xc0>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	4a21      	ldr	r2, [pc, #132]	; (8000c0c <init_adc1+0xc0>)
 8000b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b8a:	6193      	str	r3, [r2, #24]

  // Включение режима одиночного преобразования
  ADC1->CR2 &= ~ADC_CR2_CONT;
 8000b8c:	4b21      	ldr	r3, [pc, #132]	; (8000c14 <init_adc1+0xc8>)
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	4a20      	ldr	r2, [pc, #128]	; (8000c14 <init_adc1+0xc8>)
 8000b92:	f023 0302 	bic.w	r3, r3, #2
 8000b96:	6093      	str	r3, [r2, #8]

  // Очистка битов SQR1 (на всякий случай)
  ADC1->SQR1 = 0;
 8000b98:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <init_adc1+0xc8>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	62da      	str	r2, [r3, #44]	; 0x2c

  // Установка канала 14 в первую позицию в последовательности
  ADC1->SQR3 &= ~ADC_SQR3_SQ1;
 8000b9e:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <init_adc1+0xc8>)
 8000ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ba2:	4a1c      	ldr	r2, [pc, #112]	; (8000c14 <init_adc1+0xc8>)
 8000ba4:	f023 031f 	bic.w	r3, r3, #31
 8000ba8:	6353      	str	r3, [r2, #52]	; 0x34
  ADC1->SQR3 |= (14 << ADC_SQR3_SQ1_Pos);
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <init_adc1+0xc8>)
 8000bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bae:	4a19      	ldr	r2, [pc, #100]	; (8000c14 <init_adc1+0xc8>)
 8000bb0:	f043 030e 	orr.w	r3, r3, #14
 8000bb4:	6353      	str	r3, [r2, #52]	; 0x34

  ADC1->SMPR1 |= ADC_SMPR1_SMP14; // Канал 14 - 239.5 тактов
 8000bb6:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <init_adc1+0xc8>)
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	4a16      	ldr	r2, [pc, #88]	; (8000c14 <init_adc1+0xc8>)
 8000bbc:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000bc0:	60d3      	str	r3, [r2, #12]
  ADC1->CR2 |= ADC_CR2_EXTSEL;    /*!< ADC group regular external trigger source */
 8000bc2:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <init_adc1+0xc8>)
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	4a13      	ldr	r2, [pc, #76]	; (8000c14 <init_adc1+0xc8>)
 8000bc8:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8000bcc:	6093      	str	r3, [r2, #8]
                                  // from program SWSTART
  ADC1->CR2 |= ADC_CR2_EXTTRIG;   /*!< ADC group regular external trigger enable */
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <init_adc1+0xc8>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	4a10      	ldr	r2, [pc, #64]	; (8000c14 <init_adc1+0xc8>)
 8000bd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000bd8:	6093      	str	r3, [r2, #8]
  ADC1->CR2 |= ADC_CR2_ADON;      /*!< ADC enable */
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <init_adc1+0xc8>)
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	4a0d      	ldr	r2, [pc, #52]	; (8000c14 <init_adc1+0xc8>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6093      	str	r3, [r2, #8]

  Delay(5);                 // Задержка перед калибровкой
 8000be6:	2005      	movs	r0, #5
 8000be8:	f000 f89c 	bl	8000d24 <Delay>
  ADC1->CR2 |= ADC_CR2_CAL; /*!< ADC calibration start */
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <init_adc1+0xc8>)
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	4a08      	ldr	r2, [pc, #32]	; (8000c14 <init_adc1+0xc8>)
 8000bf2:	f043 0304 	orr.w	r3, r3, #4
 8000bf6:	6093      	str	r3, [r2, #8]
  while (!(ADC1->CR2 & ADC_CR2_CAL)); // wait end of cal
 8000bf8:	bf00      	nop
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <init_adc1+0xc8>)
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	f003 0304 	and.w	r3, r3, #4
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d0f9      	beq.n	8000bfa <init_adc1+0xae>
}
 8000c06:	bf00      	nop
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	40011000 	.word	0x40011000
 8000c14:	40012400 	.word	0x40012400

08000c18 <SPI1_Init>:

void SPI1_Init(void) // stm32f103c8 && stm32f103rb
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  // Включаем тактирование SPI1 и GPIOA
  RCC->APB2ENR |= RCC_APB2ENR_SPI1EN | RCC_APB2ENR_IOPAEN;
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <SPI1_Init+0x5c>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <SPI1_Init+0x5c>)
 8000c22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c26:	f043 0304 	orr.w	r3, r3, #4
 8000c2a:	6193      	str	r3, [r2, #24]
  // PA7 - MOSI
  // PA6 - MISO
  // PA5 - SCK
  // PA4 - NSS - not used
  // Для начала сбрасываем все конфигурационные биты в нули
  GPIOA->CRL &= ~(GPIO_CRL_CNF5_Msk | GPIO_CRL_MODE5_Msk | GPIO_CRL_CNF6_Msk | GPIO_CRL_MODE6_Msk | GPIO_CRL_CNF7_Msk | GPIO_CRL_MODE7_Msk);
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <SPI1_Init+0x60>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a11      	ldr	r2, [pc, #68]	; (8000c78 <SPI1_Init+0x60>)
 8000c32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000c36:	6013      	str	r3, [r2, #0]

  // Настраиваем
  // SCK: MODE5 = 0x03 (11b); CNF5 = 0x02 (10b)   // Alternate function output Push-pull 50MHz
  GPIOA->CRL |= (0x02 << GPIO_CRL_CNF5_Pos) | (0x03 << GPIO_CRL_MODE5_Pos);
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <SPI1_Init+0x60>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <SPI1_Init+0x60>)
 8000c3e:	f443 0330 	orr.w	r3, r3, #11534336	; 0xb00000
 8000c42:	6013      	str	r3, [r2, #0]

  // MISO: MODE6 = 0x00 (00b); CNF6 = 0x01 (01b) //Floating input
  //GPIOA->CRL |= (0x01 << GPIO_CRL_CNF6_Pos) | (0x00 << GPIO_CRL_MODE6_Pos);

  // MOSI: MODE7 = 0x03 (11b); CNF7 = 0x02 (10b)  // Alternate function output Push-pull 50MHz
  GPIOA->CRL |= (0x02 << GPIO_CRL_CNF7_Pos) | (0x03 << GPIO_CRL_MODE7_Pos);
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <SPI1_Init+0x60>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <SPI1_Init+0x60>)
 8000c4a:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 8000c4e:	6013      	str	r3, [r2, #0]

  /**********************/
  /*** Настройка SPI1 ***/
  /**********************/

  SPI1->CR1 |= 0 << SPI_CR1_DFF_Pos                             // Размер фрейма 8 бит
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <SPI1_Init+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a09      	ldr	r2, [pc, #36]	; (8000c7c <SPI1_Init+0x64>)
 8000c56:	f443 7349 	orr.w	r3, r3, #804	; 0x324
 8000c5a:	6013      	str	r3, [r2, #0]
  //               | SPI_CR1_DFF;

  //| 1 << SPI_CR1_DFF_Pos    // Размер фрейма 16 бит
  //| 0 << SPI_CR1_LSBFIRST_Pos; // MSB first

  NVIC_EnableIRQ(SPI1_IRQn); // Разрешаем прерывания от SPI1
 8000c5c:	2023      	movs	r0, #35	; 0x23
 8000c5e:	f7ff fecb 	bl	80009f8 <__NVIC_EnableIRQ>

  //SPI1->CR1 |= 1 << SPI_CR1_SPE_Pos; // Включаем SPI

  // mine
  SPI1->CR1 |= SPI_CR1_SPE; // разрешить SPI1
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <SPI1_Init+0x64>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <SPI1_Init+0x64>)
 8000c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c6c:	6013      	str	r3, [r2, #0]
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010800 	.word	0x40010800
 8000c7c:	40013000 	.word	0x40013000

08000c80 <SPI1_IRQHandler>:

void SPI1_IRQHandler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  SPI1->DR = data[tx_index]; // Записываем новое значение в DR
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <SPI1_IRQHandler+0x3c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0d      	ldr	r2, [pc, #52]	; (8000cc0 <SPI1_IRQHandler+0x40>)
 8000c8a:	5cd2      	ldrb	r2, [r2, r3]
 8000c8c:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <SPI1_IRQHandler+0x44>)
 8000c8e:	60da      	str	r2, [r3, #12]
  tx_index++;                   // увеличиваем счетчик переданных байт на единицу
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <SPI1_IRQHandler+0x3c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	3301      	adds	r3, #1
 8000c96:	4a09      	ldr	r2, [pc, #36]	; (8000cbc <SPI1_IRQHandler+0x3c>)
 8000c98:	6013      	str	r3, [r2, #0]

  // если все передали, то отключаем прерывание,
  // тем самым завершаем передачу данных
  if (tx_index >= tx_len)
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <SPI1_IRQHandler+0x3c>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <SPI1_IRQHandler+0x48>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	db05      	blt.n	8000cb2 <SPI1_IRQHandler+0x32>
	  SPI1->CR2 &= ~(1 << SPI_CR2_TXEIE_Pos);
 8000ca6:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <SPI1_IRQHandler+0x44>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	4a06      	ldr	r2, [pc, #24]	; (8000cc4 <SPI1_IRQHandler+0x44>)
 8000cac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000cb0:	6053      	str	r3, [r2, #4]
  // mine
  //SPI1->CR2 &= ~(SPI_CR2_TXEIE);
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	2000001c 	.word	0x2000001c
 8000cc0:	20000028 	.word	0x20000028
 8000cc4:	40013000 	.word	0x40013000
 8000cc8:	20000020 	.word	0x20000020

08000ccc <SPI1_Tx>:

void SPI1_Tx(uint8_t *data, int32_t len)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
  if (len <= 0)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	dd16      	ble.n	8000d0a <SPI1_Tx+0x3e>
    return;

  // Ждем, пока SPI освободится от предыдущей передачи
  while (SPI1->SR & SPI_SR_BSY)
 8000cdc:	bf00      	nop
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <SPI1_Tx+0x48>)
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d1f9      	bne.n	8000cde <SPI1_Tx+0x12>
    ;

  // Настройка переменных, которые будут
  // использоваться в обработчике прерывания SPI
  tx_index = 0;
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <SPI1_Tx+0x4c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
  tx_len = len;
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <SPI1_Tx+0x50>)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	6013      	str	r3, [r2, #0]
  tx_data = data;
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <SPI1_Tx+0x54>)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	6013      	str	r3, [r2, #0]

  // Разрешаем прерывание TXEIE И запускаем обмен
  //SPI1->CR2 |= (1 << SPI_CR2_TXEIE_Pos);
  // mine
  SPI1->CR2 |= SPI_CR2_TXEIE;
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <SPI1_Tx+0x48>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <SPI1_Tx+0x48>)
 8000d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d06:	6053      	str	r3, [r2, #4]
 8000d08:	e000      	b.n	8000d0c <SPI1_Tx+0x40>
    return;
 8000d0a:	bf00      	nop
}
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	40013000 	.word	0x40013000
 8000d18:	2000001c 	.word	0x2000001c
 8000d1c:	20000020 	.word	0x20000020
 8000d20:	20000024 	.word	0x20000024

08000d24 <Delay>:
 * @brief  Подпрограмма задержки
 * @param  counter - Кол-во тактов
 * @retval None
 */
void Delay(uint32_t counter)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  for (uint32_t i = 0; i < counter; i++)
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	e002      	b.n	8000d38 <Delay+0x14>
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	3301      	adds	r3, #1
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fa      	ldr	r2, [r7, #12]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d3f8      	bcc.n	8000d32 <Delay+0xe>
  {
  };
}
 8000d40:	bf00      	nop
 8000d42:	bf00      	nop
 8000d44:	3714      	adds	r7, #20
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <main>:

void main()
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  // memset(RxBuffer, 0, sizeof(RxBuffer)); // Очистка буфера приему
  init_clk();  // инициализация системы тактирования
 8000d50:	f7ff fe98 	bl	8000a84 <init_clk>
  init_adc1(); // инициализация АЦП
 8000d54:	f7ff fefa 	bl	8000b4c <init_adc1>
  SPI1_Init(); // инициализация SPI1
 8000d58:	f7ff ff5e 	bl	8000c18 <SPI1_Init>
  initTIM2();
 8000d5c:	f000 f802 	bl	8000d64 <initTIM2>
  /*Основной цикл*/
  while (true)
 8000d60:	e7fe      	b.n	8000d60 <main+0x14>
	...

08000d64 <initTIM2>:
  {
  };
}
void initTIM2(void){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

  RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;    //Включить тактирование TIM2
 8000d68:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <initTIM2+0x58>)
 8000d6a:	69db      	ldr	r3, [r3, #28]
 8000d6c:	4a13      	ldr	r2, [pc, #76]	; (8000dbc <initTIM2+0x58>)
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	61d3      	str	r3, [r2, #28]
  //Частота APB1 для таймеров = APB1Clk * 2 = 32МГц * 2 = 64МГц
  TIM2->PSC = 64000-1;          //Предделитель частоты (64МГц/64000 = 1кГц)
 8000d74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d78:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000d7c:	629a      	str	r2, [r3, #40]	; 0x28
  TIM2->ARR = 1000-1;            //Модуль счёта таймера (1кГц/1000 = 1с)
 8000d7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d82:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d86:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM2->DIER |= TIM_DIER_UIE;        //Разрешить прерывание по переполнению таймера
 8000d88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	60d3      	str	r3, [r2, #12]
  TIM2->CR1 |= TIM_CR1_CEN;        //Включить таймер
 8000d98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	6013      	str	r3, [r2, #0]

  NVIC_EnableIRQ(TIM2_IRQn);        //Рарзрешить прерывание от TIM2
 8000da8:	201c      	movs	r0, #28
 8000daa:	f7ff fe25 	bl	80009f8 <__NVIC_EnableIRQ>
  NVIC_SetPriority(TIM2_IRQn, 2);      //Выставляем приоритет
 8000dae:	2102      	movs	r1, #2
 8000db0:	201c      	movs	r0, #28
 8000db2:	f7ff fe3d 	bl	8000a30 <__NVIC_SetPriority>
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40021000 	.word	0x40021000

08000dc0 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0

  TIM2->SR &= ~TIM_SR_UIF;      //Сброс флага переполнения
 8000dc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dc8:	691b      	ldr	r3, [r3, #16]
 8000dca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dce:	f023 0301 	bic.w	r3, r3, #1
 8000dd2:	6113      	str	r3, [r2, #16]
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <TIM2_IRQHandler+0x2c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
  memset(data, 0, sizeof(data)); // Очистка буфера передачи
  Adc_Measure();//отработка модуля АЦП
 8000dda:	f000 f809 	bl	8000df0 <Adc_Measure>
  SPI1_Tx(data, sizeof(data)); // передача через SPI
 8000dde:	2101      	movs	r1, #1
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <TIM2_IRQHandler+0x2c>)
 8000de2:	f7ff ff73 	bl	8000ccc <SPI1_Tx>
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000028 	.word	0x20000028

08000df0 <Adc_Measure>:
void Adc_Measure(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0

  int16_t adc_volts;
  ADC1->CR2 |= ADC_CR2_SWSTART; // запуск преобразование в регулярном канале
 8000df6:	4b28      	ldr	r3, [pc, #160]	; (8000e98 <Adc_Measure+0xa8>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	4a27      	ldr	r2, [pc, #156]	; (8000e98 <Adc_Measure+0xa8>)
 8000dfc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e00:	6093      	str	r3, [r2, #8]
  while (!(ADC1->SR & ADC_SR_EOC));            // check EOC
 8000e02:	bf00      	nop
 8000e04:	4b24      	ldr	r3, [pc, #144]	; (8000e98 <Adc_Measure+0xa8>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f003 0302 	and.w	r3, r3, #2
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d0f9      	beq.n	8000e04 <Adc_Measure+0x14>
  adc_volts = ADC1->DR; // read DR to adc_volts
 8000e10:	4b21      	ldr	r3, [pc, #132]	; (8000e98 <Adc_Measure+0xa8>)
 8000e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e14:	81fb      	strh	r3, [r7, #14]
  float f;
  int16_t volts; // округление F до целых
  // formula for calculating the volts from value of adc1
  f = (adc_volts * V_REF * 1000) / ADC_FS;
 8000e16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fafa 	bl	8000414 <__aeabi_i2d>
 8000e20:	a319      	add	r3, pc, #100	; (adr r3, 8000e88 <Adc_Measure+0x98>)
 8000e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e26:	f7ff fb5f 	bl	80004e8 <__aeabi_dmul>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	4610      	mov	r0, r2
 8000e30:	4619      	mov	r1, r3
 8000e32:	f04f 0200 	mov.w	r2, #0
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <Adc_Measure+0xac>)
 8000e38:	f7ff fb56 	bl	80004e8 <__aeabi_dmul>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	460b      	mov	r3, r1
 8000e40:	4610      	mov	r0, r2
 8000e42:	4619      	mov	r1, r3
 8000e44:	a312      	add	r3, pc, #72	; (adr r3, 8000e90 <Adc_Measure+0xa0>)
 8000e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e4a:	f7ff fc77 	bl	800073c <__aeabi_ddiv>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	460b      	mov	r3, r1
 8000e52:	4610      	mov	r0, r2
 8000e54:	4619      	mov	r1, r3
 8000e56:	f7ff fd59 	bl	800090c <__aeabi_d2f>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	60bb      	str	r3, [r7, #8]
  volts = (int16_t)f;
 8000e5e:	68b8      	ldr	r0, [r7, #8]
 8000e60:	f7ff fda4 	bl	80009ac <__aeabi_f2iz>
 8000e64:	4603      	mov	r3, r0
 8000e66:	80fb      	strh	r3, [r7, #6]
  data[0] = (uint8_t)(volts & 0xFF);
 8000e68:	88fb      	ldrh	r3, [r7, #6]
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <Adc_Measure+0xb0>)
 8000e6e:	701a      	strb	r2, [r3, #0]
  data[1] = (uint8_t)((volts & 0xFF00) >> 8);
 8000e70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e74:	121b      	asrs	r3, r3, #8
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <Adc_Measure+0xb0>)
 8000e7a:	705a      	strb	r2, [r3, #1]
}
 8000e7c:	bf00      	nop
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	f3af 8000 	nop.w
 8000e88:	66666666 	.word	0x66666666
 8000e8c:	400a6666 	.word	0x400a6666
 8000e90:	00000000 	.word	0x00000000
 8000e94:	40affe00 	.word	0x40affe00
 8000e98:	40012400 	.word	0x40012400
 8000e9c:	408f4000 	.word	0x408f4000
 8000ea0:	20000028 	.word	0x20000028

08000ea4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ea4:	480d      	ldr	r0, [pc, #52]	; (8000edc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ea6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ea8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eac:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eae:	490d      	ldr	r1, [pc, #52]	; (8000ee4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <LoopForever+0xe>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb4:	e002      	b.n	8000ebc <LoopCopyDataInit>

08000eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eba:	3304      	adds	r3, #4

08000ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec0:	d3f9      	bcc.n	8000eb6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ec4:	4c0a      	ldr	r4, [pc, #40]	; (8000ef0 <LoopForever+0x16>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec8:	e001      	b.n	8000ece <LoopFillZerobss>

08000eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ecc:	3204      	adds	r2, #4

08000ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed0:	d3fb      	bcc.n	8000eca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ed2:	f000 f811 	bl	8000ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ed6:	f7ff ff39 	bl	8000d4c <main>

08000eda <LoopForever>:

LoopForever:
  b LoopForever
 8000eda:	e7fe      	b.n	8000eda <LoopForever>
  ldr   r0, =_estack
 8000edc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000ee8:	08000f60 	.word	0x08000f60
  ldr r2, =_sbss
 8000eec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000ef0:	2000002c 	.word	0x2000002c

08000ef4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ef4:	e7fe      	b.n	8000ef4 <ADC1_2_IRQHandler>
	...

08000ef8 <__libc_init_array>:
 8000ef8:	b570      	push	{r4, r5, r6, lr}
 8000efa:	2600      	movs	r6, #0
 8000efc:	4d0c      	ldr	r5, [pc, #48]	; (8000f30 <__libc_init_array+0x38>)
 8000efe:	4c0d      	ldr	r4, [pc, #52]	; (8000f34 <__libc_init_array+0x3c>)
 8000f00:	1b64      	subs	r4, r4, r5
 8000f02:	10a4      	asrs	r4, r4, #2
 8000f04:	42a6      	cmp	r6, r4
 8000f06:	d109      	bne.n	8000f1c <__libc_init_array+0x24>
 8000f08:	f000 f81a 	bl	8000f40 <_init>
 8000f0c:	2600      	movs	r6, #0
 8000f0e:	4d0a      	ldr	r5, [pc, #40]	; (8000f38 <__libc_init_array+0x40>)
 8000f10:	4c0a      	ldr	r4, [pc, #40]	; (8000f3c <__libc_init_array+0x44>)
 8000f12:	1b64      	subs	r4, r4, r5
 8000f14:	10a4      	asrs	r4, r4, #2
 8000f16:	42a6      	cmp	r6, r4
 8000f18:	d105      	bne.n	8000f26 <__libc_init_array+0x2e>
 8000f1a:	bd70      	pop	{r4, r5, r6, pc}
 8000f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f20:	4798      	blx	r3
 8000f22:	3601      	adds	r6, #1
 8000f24:	e7ee      	b.n	8000f04 <__libc_init_array+0xc>
 8000f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f2a:	4798      	blx	r3
 8000f2c:	3601      	adds	r6, #1
 8000f2e:	e7f2      	b.n	8000f16 <__libc_init_array+0x1e>
 8000f30:	08000f58 	.word	0x08000f58
 8000f34:	08000f58 	.word	0x08000f58
 8000f38:	08000f58 	.word	0x08000f58
 8000f3c:	08000f5c 	.word	0x08000f5c

08000f40 <_init>:
 8000f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f42:	bf00      	nop
 8000f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f46:	bc08      	pop	{r3}
 8000f48:	469e      	mov	lr, r3
 8000f4a:	4770      	bx	lr

08000f4c <_fini>:
 8000f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f4e:	bf00      	nop
 8000f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f52:	bc08      	pop	{r3}
 8000f54:	469e      	mov	lr, r3
 8000f56:	4770      	bx	lr


Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bb0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  08001ce0  08001ce0  00011ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e9c  08001e9c  00020050  2**0
                  CONTENTS
  4 .ARM          00000000  08001e9c  08001e9c  00020050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e9c  08001e9c  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e9c  08001e9c  00011e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ea0  08001ea0  00011ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08001ea4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  20000050  08001ef4  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  08001ef4  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020079  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000dc6  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000333  00000000  00000000  00020e82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000e8  00000000  00000000  000211b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000a5  00000000  00000000  000212a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010eaf  00000000  00000000  00021345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000fbf  00000000  00000000  000321f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00058920  00000000  00000000  000331b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000b70  00000000  00000000  0008bad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0008c644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000050 	.word	0x20000050
 800014c:	00000000 	.word	0x00000000
 8000150:	08001cc8 	.word	0x08001cc8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000054 	.word	0x20000054
 800016c:	08001cc8 	.word	0x08001cc8

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	4603      	mov	r3, r0
 8000188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	2b00      	cmp	r3, #0
 8000190:	db0b      	blt.n	80001aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	f003 021f 	and.w	r2, r3, #31
 8000198:	4906      	ldr	r1, [pc, #24]	; (80001b4 <__NVIC_EnableIRQ+0x34>)
 800019a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800019e:	095b      	lsrs	r3, r3, #5
 80001a0:	2001      	movs	r0, #1
 80001a2:	fa00 f202 	lsl.w	r2, r0, r2
 80001a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001aa:	bf00      	nop
 80001ac:	370c      	adds	r7, #12
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	e000e100 	.word	0xe000e100

080001b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	4603      	mov	r3, r0
 80001c0:	6039      	str	r1, [r7, #0]
 80001c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	db0a      	blt.n	80001e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001cc:	683b      	ldr	r3, [r7, #0]
 80001ce:	b2da      	uxtb	r2, r3
 80001d0:	490c      	ldr	r1, [pc, #48]	; (8000204 <__NVIC_SetPriority+0x4c>)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	0112      	lsls	r2, r2, #4
 80001d8:	b2d2      	uxtb	r2, r2
 80001da:	440b      	add	r3, r1
 80001dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001e0:	e00a      	b.n	80001f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	b2da      	uxtb	r2, r3
 80001e6:	4908      	ldr	r1, [pc, #32]	; (8000208 <__NVIC_SetPriority+0x50>)
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	f003 030f 	and.w	r3, r3, #15
 80001ee:	3b04      	subs	r3, #4
 80001f0:	0112      	lsls	r2, r2, #4
 80001f2:	b2d2      	uxtb	r2, r2
 80001f4:	440b      	add	r3, r1
 80001f6:	761a      	strb	r2, [r3, #24]
}
 80001f8:	bf00      	nop
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bc80      	pop	{r7}
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	e000e100 	.word	0xe000e100
 8000208:	e000ed00 	.word	0xe000ed00

0800020c <init_clk>:
 * 		Частота: 64МГц
 * @param  None
 * @retval None
 */
void init_clk(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
	// Enable HSI
	RCC->CR |= RCC_CR_HSION;
 8000210:	4b2e      	ldr	r3, [pc, #184]	; (80002cc <init_clk+0xc0>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a2d      	ldr	r2, [pc, #180]	; (80002cc <init_clk+0xc0>)
 8000216:	f043 0301 	orr.w	r3, r3, #1
 800021a:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSIRDY)){};
 800021c:	bf00      	nop
 800021e:	4b2b      	ldr	r3, [pc, #172]	; (80002cc <init_clk+0xc0>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f003 0302 	and.w	r3, r3, #2
 8000226:	2b00      	cmp	r3, #0
 8000228:	d0f9      	beq.n	800021e <init_clk+0x12>

	// Enable Prefetch Buffer
	FLASH->ACR |= FLASH_ACR_PRFTBE;
 800022a:	4b29      	ldr	r3, [pc, #164]	; (80002d0 <init_clk+0xc4>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a28      	ldr	r2, [pc, #160]	; (80002d0 <init_clk+0xc4>)
 8000230:	f043 0310 	orr.w	r3, r3, #16
 8000234:	6013      	str	r3, [r2, #0]

	// Flash 2 wait state
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8000236:	4b26      	ldr	r3, [pc, #152]	; (80002d0 <init_clk+0xc4>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a25      	ldr	r2, [pc, #148]	; (80002d0 <init_clk+0xc4>)
 800023c:	f023 0307 	bic.w	r3, r3, #7
 8000240:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_2;
 8000242:	4b23      	ldr	r3, [pc, #140]	; (80002d0 <init_clk+0xc4>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a22      	ldr	r2, [pc, #136]	; (80002d0 <init_clk+0xc4>)
 8000248:	f043 0304 	orr.w	r3, r3, #4
 800024c:	6013      	str	r3, [r2, #0]

	// HCLK = SYSCLK
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800024e:	4b1f      	ldr	r3, [pc, #124]	; (80002cc <init_clk+0xc0>)
 8000250:	4a1e      	ldr	r2, [pc, #120]	; (80002cc <init_clk+0xc0>)
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	6053      	str	r3, [r2, #4]

	// PCLK2 = HCLK
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000256:	4b1d      	ldr	r3, [pc, #116]	; (80002cc <init_clk+0xc0>)
 8000258:	4a1c      	ldr	r2, [pc, #112]	; (80002cc <init_clk+0xc0>)
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	6053      	str	r3, [r2, #4]

	// PCLK1 = HCLK/2
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800025e:	4b1b      	ldr	r3, [pc, #108]	; (80002cc <init_clk+0xc0>)
 8000260:	685b      	ldr	r3, [r3, #4]
 8000262:	4a1a      	ldr	r2, [pc, #104]	; (80002cc <init_clk+0xc0>)
 8000264:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000268:	6053      	str	r3, [r2, #4]

	// PLL configuration: PLLCLK = HSI/2 * 16 = 64 MHz
	RCC->CFGR &= ~RCC_CFGR_PLLSRC;
 800026a:	4b18      	ldr	r3, [pc, #96]	; (80002cc <init_clk+0xc0>)
 800026c:	685b      	ldr	r3, [r3, #4]
 800026e:	4a17      	ldr	r2, [pc, #92]	; (80002cc <init_clk+0xc0>)
 8000270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000274:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLMULL16;
 8000276:	4b15      	ldr	r3, [pc, #84]	; (80002cc <init_clk+0xc0>)
 8000278:	685b      	ldr	r3, [r3, #4]
 800027a:	4a14      	ldr	r2, [pc, #80]	; (80002cc <init_clk+0xc0>)
 800027c:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 8000280:	6053      	str	r3, [r2, #4]

	// Enable PLL
	RCC->CR |= RCC_CR_PLLON;
 8000282:	4b12      	ldr	r3, [pc, #72]	; (80002cc <init_clk+0xc0>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a11      	ldr	r2, [pc, #68]	; (80002cc <init_clk+0xc0>)
 8000288:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800028c:	6013      	str	r3, [r2, #0]

	// Wait till PLL is ready
	while((RCC->CR & RCC_CR_PLLRDY) == 0) {};
 800028e:	bf00      	nop
 8000290:	4b0e      	ldr	r3, [pc, #56]	; (80002cc <init_clk+0xc0>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000298:	2b00      	cmp	r3, #0
 800029a:	d0f9      	beq.n	8000290 <init_clk+0x84>

	// Select PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <init_clk+0xc0>)
 800029e:	685b      	ldr	r3, [r3, #4]
 80002a0:	4a0a      	ldr	r2, [pc, #40]	; (80002cc <init_clk+0xc0>)
 80002a2:	f023 0303 	bic.w	r3, r3, #3
 80002a6:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002a8:	4b08      	ldr	r3, [pc, #32]	; (80002cc <init_clk+0xc0>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	4a07      	ldr	r2, [pc, #28]	; (80002cc <init_clk+0xc0>)
 80002ae:	f043 0302 	orr.w	r3, r3, #2
 80002b2:	6053      	str	r3, [r2, #4]

	// Wait till PLL is used as system clock source
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL){};
 80002b4:	bf00      	nop
 80002b6:	4b05      	ldr	r3, [pc, #20]	; (80002cc <init_clk+0xc0>)
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	f003 030c 	and.w	r3, r3, #12
 80002be:	2b08      	cmp	r3, #8
 80002c0:	d1f9      	bne.n	80002b6 <init_clk+0xaa>
}
 80002c2:	bf00      	nop
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	40021000 	.word	0x40021000
 80002d0:	40022000 	.word	0x40022000

080002d4 <init_tim>:

void init_tim(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	//RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;			//включить тактирование GPIOA
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;			//Включить тактирование TIM6
 80002d8:	4b10      	ldr	r3, [pc, #64]	; (800031c <init_tim+0x48>)
 80002da:	69db      	ldr	r3, [r3, #28]
 80002dc:	4a0f      	ldr	r2, [pc, #60]	; (800031c <init_tim+0x48>)
 80002de:	f043 0301 	orr.w	r3, r3, #1
 80002e2:	61d3      	str	r3, [r2, #28]

	//Частота APB1 для таймеров = APB1Clk * 2 = 32МГц * 2 = 64МГц
	TIM2->PSC = 64000-1;						//Предделитель частоты (64МГц/64000 = 1кГц)
 80002e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002e8:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80002ec:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 1000-1;							//Модуль счёта таймера (1кГц/1000 = 1с)
 80002ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80002f6:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->DIER |= TIM_DIER_UIE;					//Разрешить прерывание по переполнению таймера
 80002f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002fc:	68db      	ldr	r3, [r3, #12]
 80002fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	60d3      	str	r3, [r2, #12]
	//TIM2->CR1 |= TIM_CR1_CEN;					//Включить таймер

	NVIC_EnableIRQ(TIM2_IRQn);					//Рарзрешить прерывание от TIM2
 8000308:	201c      	movs	r0, #28
 800030a:	f7ff ff39 	bl	8000180 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM2_IRQn, 2);				//Выставляем приоритет
 800030e:	2102      	movs	r1, #2
 8000310:	201c      	movs	r0, #28
 8000312:	f7ff ff51 	bl	80001b8 <__NVIC_SetPriority>
}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40021000 	.word	0x40021000

08000320 <init_ports>:
 * @brief  Инициализация портов ввода-вывода
 * @param  None
 * @retval None
 */
void init_ports(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN; // включить тактирование GPIOC
 8000324:	4b2e      	ldr	r3, [pc, #184]	; (80003e0 <init_ports+0xc0>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a2d      	ldr	r2, [pc, #180]	; (80003e0 <init_ports+0xc0>)
 800032a:	f043 0310 	orr.w	r3, r3, #16
 800032e:	6193      	str	r3, [r2, #24]
	// очистка полей
	GPIOC->CRL &= ~(GPIO_CRL_CNF0 | GPIO_CRL_MODE0);
 8000330:	4b2c      	ldr	r3, [pc, #176]	; (80003e4 <init_ports+0xc4>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a2b      	ldr	r2, [pc, #172]	; (80003e4 <init_ports+0xc4>)
 8000336:	f023 030f 	bic.w	r3, r3, #15
 800033a:	6013      	str	r3, [r2, #0]
	// и конфигурация
	GPIOC->CRL |= GPIO_CRL_MODE0_1; // PC0, выход 2МГц
 800033c:	4b29      	ldr	r3, [pc, #164]	; (80003e4 <init_ports+0xc4>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a28      	ldr	r2, [pc, #160]	; (80003e4 <init_ports+0xc4>)
 8000342:	f043 0302 	orr.w	r3, r3, #2
 8000346:	6013      	str	r3, [r2, #0]
	// очистка полей
	GPIOC->CRL &= ~(GPIO_CRL_CNF1 | GPIO_CRL_MODE1);
 8000348:	4b26      	ldr	r3, [pc, #152]	; (80003e4 <init_ports+0xc4>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a25      	ldr	r2, [pc, #148]	; (80003e4 <init_ports+0xc4>)
 800034e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000352:	6013      	str	r3, [r2, #0]
	// и конфигурация
	GPIOC->CRL |= GPIO_CRL_MODE1_1; // PC1, выход 2МГц
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <init_ports+0xc4>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a22      	ldr	r2, [pc, #136]	; (80003e4 <init_ports+0xc4>)
 800035a:	f043 0320 	orr.w	r3, r3, #32
 800035e:	6013      	str	r3, [r2, #0]
	// очистка полей
	GPIOC->CRL &= ~(GPIO_CRL_CNF2 | GPIO_CRL_MODE2);
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <init_ports+0xc4>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a1f      	ldr	r2, [pc, #124]	; (80003e4 <init_ports+0xc4>)
 8000366:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800036a:	6013      	str	r3, [r2, #0]
	// и конфигурация
	GPIOC->CRL |= GPIO_CRL_MODE2_1; // PC2, выход 2МГц
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <init_ports+0xc4>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a1c      	ldr	r2, [pc, #112]	; (80003e4 <init_ports+0xc4>)
 8000372:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000376:	6013      	str	r3, [r2, #0]
	// очистка полей
	GPIOC->CRL &= ~(GPIO_CRL_CNF3 | GPIO_CRL_MODE3);
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <init_ports+0xc4>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a19      	ldr	r2, [pc, #100]	; (80003e4 <init_ports+0xc4>)
 800037e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000382:	6013      	str	r3, [r2, #0]
	// и конфигурация
	GPIOC->CRL |= GPIO_CRL_MODE3_1; // PC3, выход 2МГц
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <init_ports+0xc4>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a16      	ldr	r2, [pc, #88]	; (80003e4 <init_ports+0xc4>)
 800038a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800038e:	6013      	str	r3, [r2, #0]
	// очистка полей
	GPIOC->CRL &= ~(GPIO_CRL_CNF4 | GPIO_CRL_MODE4);
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <init_ports+0xc4>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <init_ports+0xc4>)
 8000396:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800039a:	6013      	str	r3, [r2, #0]
	// и конфигурация
	GPIOC->CRL |= GPIO_CRL_MODE4_1; // PC4, выход 2МГц
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <init_ports+0xc4>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a10      	ldr	r2, [pc, #64]	; (80003e4 <init_ports+0xc4>)
 80003a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003a6:	6013      	str	r3, [r2, #0]
	// очистка полей
	GPIOC->CRL &= ~(GPIO_CRL_CNF5 | GPIO_CRL_MODE5);
 80003a8:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <init_ports+0xc4>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a0d      	ldr	r2, [pc, #52]	; (80003e4 <init_ports+0xc4>)
 80003ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80003b2:	6013      	str	r3, [r2, #0]
	// и конфигурация
	GPIOC->CRL |= GPIO_CRL_MODE5_1; // PC5, выход 2МГц
 80003b4:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <init_ports+0xc4>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a0a      	ldr	r2, [pc, #40]	; (80003e4 <init_ports+0xc4>)
 80003ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80003be:	6013      	str	r3, [r2, #0]
	// очистка полей
	GPIOC->CRL &= ~(GPIO_CRL_CNF6 | GPIO_CRL_MODE6);
 80003c0:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <init_ports+0xc4>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a07      	ldr	r2, [pc, #28]	; (80003e4 <init_ports+0xc4>)
 80003c6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80003ca:	6013      	str	r3, [r2, #0]
	// и конфигурация
	GPIOC->CRL |= GPIO_CRL_MODE6_1; // PC6, выход 2МГц
 80003cc:	4b05      	ldr	r3, [pc, #20]	; (80003e4 <init_ports+0xc4>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a04      	ldr	r2, [pc, #16]	; (80003e4 <init_ports+0xc4>)
 80003d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003d6:	6013      	str	r3, [r2, #0]
}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr
 80003e0:	40021000 	.word	0x40021000
 80003e4:	40011000 	.word	0x40011000

080003e8 <init_button>:
 * @brief  Инициализация прерывания от кнопки (PC12,13)
 * @param  None
 * @retval None
 */
void init_button(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	// PC13 и PC12
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN | RCC_APB2ENR_AFIOEN;
 80003ec:	4b22      	ldr	r3, [pc, #136]	; (8000478 <init_button+0x90>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a21      	ldr	r2, [pc, #132]	; (8000478 <init_button+0x90>)
 80003f2:	f043 0311 	orr.w	r3, r3, #17
 80003f6:	6193      	str	r3, [r2, #24]
	// GPIOC->CRH &= ~(GPIO_CRH_MODE13 | GPIO_CRH_CNF13);
	// 	//...и выставляем так, как нам нужно
	// GPIOC->CRH |= GPIO_CRH_CNF13_1;			//Вход с подтяжкой
	// GPIOC->BSRR |= GPIO_BSRR_BS13;			//Подтяжка к Vdd

	GPIOC->CRH &= ~(GPIO_CRH_MODE12 | GPIO_CRH_CNF12);
 80003f8:	4b20      	ldr	r3, [pc, #128]	; (800047c <init_button+0x94>)
 80003fa:	685b      	ldr	r3, [r3, #4]
 80003fc:	4a1f      	ldr	r2, [pc, #124]	; (800047c <init_button+0x94>)
 80003fe:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000402:	6053      	str	r3, [r2, #4]
	//...и выставляем так, как нам нужно
	GPIOC->CRH |= GPIO_CRH_CNF12_1; // Вход с подтяжкой
 8000404:	4b1d      	ldr	r3, [pc, #116]	; (800047c <init_button+0x94>)
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	4a1c      	ldr	r2, [pc, #112]	; (800047c <init_button+0x94>)
 800040a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800040e:	6053      	str	r3, [r2, #4]
	GPIOC->BSRR |= GPIO_BSRR_BS12;	// Подтяжка к Vdd
 8000410:	4b1a      	ldr	r3, [pc, #104]	; (800047c <init_button+0x94>)
 8000412:	691b      	ldr	r3, [r3, #16]
 8000414:	4a19      	ldr	r2, [pc, #100]	; (800047c <init_button+0x94>)
 8000416:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800041a:	6113      	str	r3, [r2, #16]

	// Настройка альтернативных фукнций портов.
	// Настройки портов с 12 по 15 хранятся в регистре AFIO_EXTICR4.
	// Регистры объединены в массив AFIO->EXTICR, нумерация массива начинается с нулевого элемента.
	// Поэтому настройки AFIO_EXTICR4 хранятся в AFIO->EXTICR[3]
	AFIO->EXTICR[3] |= AFIO_EXTICR4_EXTI13_PC;
 800041c:	4b18      	ldr	r3, [pc, #96]	; (8000480 <init_button+0x98>)
 800041e:	695b      	ldr	r3, [r3, #20]
 8000420:	4a17      	ldr	r2, [pc, #92]	; (8000480 <init_button+0x98>)
 8000422:	f043 0320 	orr.w	r3, r3, #32
 8000426:	6153      	str	r3, [r2, #20]

	EXTI->IMR |= EXTI_IMR_MR13;	  // Выставляем маску - EXTI13
 8000428:	4b16      	ldr	r3, [pc, #88]	; (8000484 <init_button+0x9c>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a15      	ldr	r2, [pc, #84]	; (8000484 <init_button+0x9c>)
 800042e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000432:	6013      	str	r3, [r2, #0]
	EXTI->FTSR |= EXTI_FTSR_TR13; // Прерывание по спаду импульса (при нажатии на кнопку)
 8000434:	4b13      	ldr	r3, [pc, #76]	; (8000484 <init_button+0x9c>)
 8000436:	68db      	ldr	r3, [r3, #12]
 8000438:	4a12      	ldr	r2, [pc, #72]	; (8000484 <init_button+0x9c>)
 800043a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800043e:	60d3      	str	r3, [r2, #12]

	AFIO->EXTICR[3] |= AFIO_EXTICR4_EXTI12_PC;
 8000440:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <init_button+0x98>)
 8000442:	695b      	ldr	r3, [r3, #20]
 8000444:	4a0e      	ldr	r2, [pc, #56]	; (8000480 <init_button+0x98>)
 8000446:	f043 0302 	orr.w	r3, r3, #2
 800044a:	6153      	str	r3, [r2, #20]

	EXTI->IMR |= EXTI_IMR_MR12;	  // Выставляем маску - EXTI12
 800044c:	4b0d      	ldr	r3, [pc, #52]	; (8000484 <init_button+0x9c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a0c      	ldr	r2, [pc, #48]	; (8000484 <init_button+0x9c>)
 8000452:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000456:	6013      	str	r3, [r2, #0]
	EXTI->FTSR |= EXTI_FTSR_TR12; // Прерывание по спаду импульса (при нажатии на кнопку)
 8000458:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <init_button+0x9c>)
 800045a:	68db      	ldr	r3, [r3, #12]
 800045c:	4a09      	ldr	r2, [pc, #36]	; (8000484 <init_button+0x9c>)
 800045e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000462:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000464:	2028      	movs	r0, #40	; 0x28
 8000466:	f7ff fe8b 	bl	8000180 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI15_10_IRQn, 1);
 800046a:	2101      	movs	r1, #1
 800046c:	2028      	movs	r0, #40	; 0x28
 800046e:	f7ff fea3 	bl	80001b8 <__NVIC_SetPriority>
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40021000 	.word	0x40021000
 800047c:	40011000 	.word	0x40011000
 8000480:	40010000 	.word	0x40010000
 8000484:	40010400 	.word	0x40010400

08000488 <EXTI15_10_IRQHandler>:
 *			Нас интересует EXTI13, там висит кнопка.
 * @param  None
 * @retval None
 */
void EXTI15_10_IRQHandler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
	// Т.к. этот обработчик вызывается, если произошло одно из прерываний EXTI15-EXI10, нужно проверить, кто из них его вызвал.
	if (EXTI->PR & EXTI_PR_PR12) // нас интересует EXTI12
 800048c:	4b17      	ldr	r3, [pc, #92]	; (80004ec <EXTI15_10_IRQHandler+0x64>)
 800048e:	695b      	ldr	r3, [r3, #20]
 8000490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000494:	2b00      	cmp	r3, #0
 8000496:	d012      	beq.n	80004be <EXTI15_10_IRQHandler+0x36>
	{
		delay(10000);			  // Задержка для защиты от дребезга контактов
 8000498:	f242 7010 	movw	r0, #10000	; 0x2710
 800049c:	f000 fa2c 	bl	80008f8 <delay>
		EXTI->PR |= EXTI_PR_PR12; // сброс флага
 80004a0:	4b12      	ldr	r3, [pc, #72]	; (80004ec <EXTI15_10_IRQHandler+0x64>)
 80004a2:	695b      	ldr	r3, [r3, #20]
 80004a4:	4a11      	ldr	r2, [pc, #68]	; (80004ec <EXTI15_10_IRQHandler+0x64>)
 80004a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004aa:	6153      	str	r3, [r2, #20]
		TIM2->CR1 ^= TIM_CR1_CEN; // Инвертируем состояние таймера
 80004ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004b6:	f083 0301 	eor.w	r3, r3, #1
 80004ba:	6013      	str	r3, [r2, #0]
		delay(10000);			  // Задержка для защиты от дребезга контактов
		EXTI->PR |= EXTI_PR_PR13; // сброс флага
		increment();			  // fun for counts of button
		indicator();
	}
}
 80004bc:	e013      	b.n	80004e6 <EXTI15_10_IRQHandler+0x5e>
	else if (EXTI->PR & EXTI_PR_PR13) // нас интересует EXTI13
 80004be:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <EXTI15_10_IRQHandler+0x64>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d00d      	beq.n	80004e6 <EXTI15_10_IRQHandler+0x5e>
		delay(10000);			  // Задержка для защиты от дребезга контактов
 80004ca:	f242 7010 	movw	r0, #10000	; 0x2710
 80004ce:	f000 fa13 	bl	80008f8 <delay>
		EXTI->PR |= EXTI_PR_PR13; // сброс флага
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <EXTI15_10_IRQHandler+0x64>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a05      	ldr	r2, [pc, #20]	; (80004ec <EXTI15_10_IRQHandler+0x64>)
 80004d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004dc:	6153      	str	r3, [r2, #20]
		increment();			  // fun for counts of button
 80004de:	f000 f825 	bl	800052c <increment>
		indicator();
 80004e2:	f000 f839 	bl	8000558 <indicator>
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40010400 	.word	0x40010400

080004f0 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;
 80004f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004f8:	691b      	ldr	r3, [r3, #16]
 80004fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004fe:	f023 0301 	bic.w	r3, r3, #1
 8000502:	6113      	str	r3, [r2, #16]
	increment();
 8000504:	f000 f812 	bl	800052c <increment>
	indicator();
 8000508:	f000 f826 	bl	8000558 <indicator>
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}

08000510 <reset_all>:

void reset_all()
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
	GPIOC->BSRR |= GPIO_BSRR_BR0 | GPIO_BSRR_BR1 | GPIO_BSRR_BR2 | GPIO_BSRR_BR3 | GPIO_BSRR_BR4 | GPIO_BSRR_BR5 | GPIO_BSRR_BR6;
 8000514:	4b04      	ldr	r3, [pc, #16]	; (8000528 <reset_all+0x18>)
 8000516:	691b      	ldr	r3, [r3, #16]
 8000518:	4a03      	ldr	r2, [pc, #12]	; (8000528 <reset_all+0x18>)
 800051a:	f443 03fe 	orr.w	r3, r3, #8323072	; 0x7f0000
 800051e:	6113      	str	r3, [r2, #16]
	//	GPIO_BSRR_BR0			@ сбрасываем в '0'
	//	GPIO_BSRR_BS0			@ в '1'
	return;
 8000520:	bf00      	nop
}
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr
 8000528:	40011000 	.word	0x40011000

0800052c <increment>:

void increment()
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
	if (count > 8)
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <increment+0x28>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b08      	cmp	r3, #8
 8000536:	d903      	bls.n	8000540 <increment+0x14>
		count = 0;
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <increment+0x28>)
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
	else
		count++;
}
 800053e:	e005      	b.n	800054c <increment+0x20>
		count++;
 8000540:	4b04      	ldr	r3, [pc, #16]	; (8000554 <increment+0x28>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	3301      	adds	r3, #1
 8000546:	b2da      	uxtb	r2, r3
 8000548:	4b02      	ldr	r3, [pc, #8]	; (8000554 <increment+0x28>)
 800054a:	701a      	strb	r2, [r3, #0]
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	bc80      	pop	{r7}
 8000552:	4770      	bx	lr
 8000554:	2000026d 	.word	0x2000026d

08000558 <indicator>:

void indicator()
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	//	case 6:	GPIOC->BSRR =
	//	case 7:	GPIOC->BSRR =
	//	case 8:	GPIOC->BSRR =
	//	case 9:	GPIOC->BSRR =
	//	}
	reset_all();
 800055c:	f7ff ffd8 	bl	8000510 <reset_all>
	switch (count)
 8000560:	4b31      	ldr	r3, [pc, #196]	; (8000628 <indicator+0xd0>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	2b09      	cmp	r3, #9
 8000566:	d85c      	bhi.n	8000622 <indicator+0xca>
 8000568:	a201      	add	r2, pc, #4	; (adr r2, 8000570 <indicator+0x18>)
 800056a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800056e:	bf00      	nop
 8000570:	08000599 	.word	0x08000599
 8000574:	080005a7 	.word	0x080005a7
 8000578:	080005b5 	.word	0x080005b5
 800057c:	080005c3 	.word	0x080005c3
 8000580:	080005d1 	.word	0x080005d1
 8000584:	080005df 	.word	0x080005df
 8000588:	080005ed 	.word	0x080005ed
 800058c:	080005fb 	.word	0x080005fb
 8000590:	08000609 	.word	0x08000609
 8000594:	08000615 	.word	0x08000615
	{
	case 0:
		GPIOC->ODR |= GPIO_ODR_ODR0 | GPIO_ODR_ODR1 | GPIO_ODR_ODR2 | GPIO_ODR_ODR3 | GPIO_ODR_ODR4 | GPIO_ODR_ODR5;
 8000598:	4b24      	ldr	r3, [pc, #144]	; (800062c <indicator+0xd4>)
 800059a:	68db      	ldr	r3, [r3, #12]
 800059c:	4a23      	ldr	r2, [pc, #140]	; (800062c <indicator+0xd4>)
 800059e:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80005a2:	60d3      	str	r3, [r2, #12]
		break;
 80005a4:	e03e      	b.n	8000624 <indicator+0xcc>
	case 1:
		GPIOC->ODR |= GPIO_ODR_ODR1 | GPIO_ODR_ODR2;
 80005a6:	4b21      	ldr	r3, [pc, #132]	; (800062c <indicator+0xd4>)
 80005a8:	68db      	ldr	r3, [r3, #12]
 80005aa:	4a20      	ldr	r2, [pc, #128]	; (800062c <indicator+0xd4>)
 80005ac:	f043 0306 	orr.w	r3, r3, #6
 80005b0:	60d3      	str	r3, [r2, #12]
		break;
 80005b2:	e037      	b.n	8000624 <indicator+0xcc>
	case 2:
		GPIOC->ODR |= GPIO_ODR_ODR0 | GPIO_ODR_ODR1 | GPIO_ODR_ODR3 | GPIO_ODR_ODR4 | GPIO_ODR_ODR6;
 80005b4:	4b1d      	ldr	r3, [pc, #116]	; (800062c <indicator+0xd4>)
 80005b6:	68db      	ldr	r3, [r3, #12]
 80005b8:	4a1c      	ldr	r2, [pc, #112]	; (800062c <indicator+0xd4>)
 80005ba:	f043 035b 	orr.w	r3, r3, #91	; 0x5b
 80005be:	60d3      	str	r3, [r2, #12]
		break;
 80005c0:	e030      	b.n	8000624 <indicator+0xcc>
	case 3:
		GPIOC->ODR |= GPIO_ODR_ODR0 | GPIO_ODR_ODR1 | GPIO_ODR_ODR2 | GPIO_ODR_ODR3 | GPIO_ODR_ODR6;
 80005c2:	4b1a      	ldr	r3, [pc, #104]	; (800062c <indicator+0xd4>)
 80005c4:	68db      	ldr	r3, [r3, #12]
 80005c6:	4a19      	ldr	r2, [pc, #100]	; (800062c <indicator+0xd4>)
 80005c8:	f043 034f 	orr.w	r3, r3, #79	; 0x4f
 80005cc:	60d3      	str	r3, [r2, #12]
		break;
 80005ce:	e029      	b.n	8000624 <indicator+0xcc>
	case 4:
		GPIOC->ODR |= GPIO_ODR_ODR1 | GPIO_ODR_ODR2 | GPIO_ODR_ODR5 | GPIO_ODR_ODR6;
 80005d0:	4b16      	ldr	r3, [pc, #88]	; (800062c <indicator+0xd4>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	4a15      	ldr	r2, [pc, #84]	; (800062c <indicator+0xd4>)
 80005d6:	f043 0366 	orr.w	r3, r3, #102	; 0x66
 80005da:	60d3      	str	r3, [r2, #12]
		break;
 80005dc:	e022      	b.n	8000624 <indicator+0xcc>
	case 5:
		GPIOC->ODR |= GPIO_ODR_ODR0 | GPIO_ODR_ODR2 | GPIO_ODR_ODR3 | GPIO_ODR_ODR5 | GPIO_ODR_ODR6;
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <indicator+0xd4>)
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	4a12      	ldr	r2, [pc, #72]	; (800062c <indicator+0xd4>)
 80005e4:	f043 036d 	orr.w	r3, r3, #109	; 0x6d
 80005e8:	60d3      	str	r3, [r2, #12]
		break;
 80005ea:	e01b      	b.n	8000624 <indicator+0xcc>
	case 6:
		GPIOC->ODR |= GPIO_ODR_ODR0 | GPIO_ODR_ODR2 | GPIO_ODR_ODR3 | GPIO_ODR_ODR4 | GPIO_ODR_ODR5 | GPIO_ODR_ODR6;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <indicator+0xd4>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	4a0e      	ldr	r2, [pc, #56]	; (800062c <indicator+0xd4>)
 80005f2:	f043 037d 	orr.w	r3, r3, #125	; 0x7d
 80005f6:	60d3      	str	r3, [r2, #12]
		break;
 80005f8:	e014      	b.n	8000624 <indicator+0xcc>
	case 7:
		GPIOC->ODR |= GPIO_ODR_ODR1 | GPIO_ODR_ODR1 | GPIO_ODR_ODR2;
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <indicator+0xd4>)
 80005fc:	68db      	ldr	r3, [r3, #12]
 80005fe:	4a0b      	ldr	r2, [pc, #44]	; (800062c <indicator+0xd4>)
 8000600:	f043 0306 	orr.w	r3, r3, #6
 8000604:	60d3      	str	r3, [r2, #12]
		break;
 8000606:	e00d      	b.n	8000624 <indicator+0xcc>
	case 8:
		GPIOC->ODR |= GPIO_ODR_ODR0 | GPIO_ODR_ODR1 | GPIO_ODR_ODR2 | GPIO_ODR_ODR3 | GPIO_ODR_ODR4 | GPIO_ODR_ODR5 | GPIO_ODR_ODR6;
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <indicator+0xd4>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	4a07      	ldr	r2, [pc, #28]	; (800062c <indicator+0xd4>)
 800060e:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 8000612:	60d3      	str	r3, [r2, #12]
	case 9:
		GPIOC->ODR |= GPIO_ODR_ODR0 | GPIO_ODR_ODR1 | GPIO_ODR_ODR2 | GPIO_ODR_ODR3 | GPIO_ODR_ODR5 | GPIO_ODR_ODR6;
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <indicator+0xd4>)
 8000616:	68db      	ldr	r3, [r3, #12]
 8000618:	4a04      	ldr	r2, [pc, #16]	; (800062c <indicator+0xd4>)
 800061a:	f043 036f 	orr.w	r3, r3, #111	; 0x6f
 800061e:	60d3      	str	r3, [r2, #12]
		break;
 8000620:	e000      	b.n	8000624 <indicator+0xcc>
	default:
		//increment();
		break;
 8000622:	bf00      	nop
	}
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000026d 	.word	0x2000026d
 800062c:	40011000 	.word	0x40011000

08000630 <init_usart2>:

void init_usart2(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;						//
 8000634:	4b21      	ldr	r3, [pc, #132]	; (80006bc <init_usart2+0x8c>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4a20      	ldr	r2, [pc, #128]	; (80006bc <init_usart2+0x8c>)
 800063a:	f043 0304 	orr.w	r3, r3, #4
 800063e:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;						//включить тактирование альтернативных ф-ций портов
 8000640:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <init_usart2+0x8c>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a1d      	ldr	r2, [pc, #116]	; (80006bc <init_usart2+0x8c>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;					//включить тактирование UART2
 800064c:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <init_usart2+0x8c>)
 800064e:	69db      	ldr	r3, [r3, #28]
 8000650:	4a1a      	ldr	r2, [pc, #104]	; (80006bc <init_usart2+0x8c>)
 8000652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000656:	61d3      	str	r3, [r2, #28]

	GPIOA->CRL &= ~(GPIO_CRL_MODE2 | GPIO_CRL_CNF2);		//PA2 на выход
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <init_usart2+0x90>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a18      	ldr	r2, [pc, #96]	; (80006c0 <init_usart2+0x90>)
 800065e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000662:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (GPIO_CRL_MODE2_1 | GPIO_CRL_CNF2_1);
 8000664:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <init_usart2+0x90>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a15      	ldr	r2, [pc, #84]	; (80006c0 <init_usart2+0x90>)
 800066a:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 800066e:	6013      	str	r3, [r2, #0]

	GPIOA->CRL &= ~(GPIO_CRL_MODE3 | GPIO_CRL_CNF3);		//PA3 - вход
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <init_usart2+0x90>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a12      	ldr	r2, [pc, #72]	; (80006c0 <init_usart2+0x90>)
 8000676:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800067a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_CNF3_0;
 800067c:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <init_usart2+0x90>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a0f      	ldr	r2, [pc, #60]	; (80006c0 <init_usart2+0x90>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000686:	6013      	str	r3, [r2, #0]
	1. USARTDIV = 32'000'000/(16*115200) = 17.4
	2. 17 = 0x11
	3. 16*0.4 = 6
	4. Итого 0x116
	*****************************************/
	USART2->BRR = 0xFA;
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <init_usart2+0x94>)
 800068a:	22fa      	movs	r2, #250	; 0xfa
 800068c:	609a      	str	r2, [r3, #8]

	USART2->CR1 |= USART_CR1_RE | USART_CR1_TE | USART_CR1_UE;
 800068e:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <init_usart2+0x94>)
 8000690:	68db      	ldr	r3, [r3, #12]
 8000692:	4a0c      	ldr	r2, [pc, #48]	; (80006c4 <init_usart2+0x94>)
 8000694:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000698:	f043 030c 	orr.w	r3, r3, #12
 800069c:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= USART_CR1_RXNEIE;						//разрешить прерывание по приему байта данных
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <init_usart2+0x94>)
 80006a0:	68db      	ldr	r3, [r3, #12]
 80006a2:	4a08      	ldr	r2, [pc, #32]	; (80006c4 <init_usart2+0x94>)
 80006a4:	f043 0320 	orr.w	r3, r3, #32
 80006a8:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(USART2_IRQn);
 80006aa:	2026      	movs	r0, #38	; 0x26
 80006ac:	f7ff fd68 	bl	8000180 <__NVIC_EnableIRQ>
	NVIC_SetPriority(USART2_IRQn, 1);
 80006b0:	2101      	movs	r1, #1
 80006b2:	2026      	movs	r0, #38	; 0x26
 80006b4:	f7ff fd80 	bl	80001b8 <__NVIC_SetPriority>
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40021000 	.word	0x40021000
 80006c0:	40010800 	.word	0x40010800
 80006c4:	40004400 	.word	0x40004400

080006c8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
	if ((USART2->SR & USART_SR_RXNE)!=0)		//Прерывание по приёму данных // проверка на наличие данных
 80006ce:	4b0f      	ldr	r3, [pc, #60]	; (800070c <USART2_IRQHandler+0x44>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f003 0320 	and.w	r3, r3, #32
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d014      	beq.n	8000704 <USART2_IRQHandler+0x3c>
	{
		uint8_t pos = strlen(RxBuffer);			//Вычисляем позицию свободной ячейки
 80006da:	480d      	ldr	r0, [pc, #52]	; (8000710 <USART2_IRQHandler+0x48>)
 80006dc:	f7ff fd48 	bl	8000170 <strlen>
 80006e0:	4603      	mov	r3, r0
 80006e2:	71fb      	strb	r3, [r7, #7]

		RxBuffer[pos] = USART2->DR;				//Считываем содержимое регистра данных
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <USART2_IRQHandler+0x44>)
 80006e6:	685a      	ldr	r2, [r3, #4]
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	b2d1      	uxtb	r1, r2
 80006ec:	4a08      	ldr	r2, [pc, #32]	; (8000710 <USART2_IRQHandler+0x48>)
 80006ee:	54d1      	strb	r1, [r2, r3]

		if (RxBuffer[pos-1]== 0x0D)							//Если это символ конца строки
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	4a06      	ldr	r2, [pc, #24]	; (8000710 <USART2_IRQHandler+0x48>)
 80006f6:	5cd3      	ldrb	r3, [r2, r3]
 80006f8:	2b0d      	cmp	r3, #13
 80006fa:	d103      	bne.n	8000704 <USART2_IRQHandler+0x3c>
		{
			ComReceived = true;					//- выставляем флаг приёма строки
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <USART2_IRQHandler+0x4c>)
 80006fe:	2201      	movs	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]
			return;								//- и выходим
 8000702:	bf00      	nop
		}
	}
}
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40004400 	.word	0x40004400
 8000710:	2000006c 	.word	0x2000006c
 8000714:	2000026c 	.word	0x2000026c

08000718 <SendString>:
  * @param  *str - указатель на строку
  * @param  crlf - если true, перед отправкой добавить строке символы конца строки
  * @retval None
  */
void SendString(char *str)
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	uint16_t i;

	strcat(str, "\r\n");	//добавляем символ конца строки
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f7ff fd25 	bl	8000170 <strlen>
 8000726:	4603      	mov	r3, r0
 8000728:	461a      	mov	r2, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4413      	add	r3, r2
 800072e:	4a12      	ldr	r2, [pc, #72]	; (8000778 <SendString+0x60>)
 8000730:	8811      	ldrh	r1, [r2, #0]
 8000732:	7892      	ldrb	r2, [r2, #2]
 8000734:	8019      	strh	r1, [r3, #0]
 8000736:	709a      	strb	r2, [r3, #2]
	for (i = 0; i < strlen(str); i++)
 8000738:	2300      	movs	r3, #0
 800073a:	81fb      	strh	r3, [r7, #14]
 800073c:	e00f      	b.n	800075e <SendString+0x46>
	{
		USART2->DR = str[i];								//передаём байт данных
 800073e:	89fb      	ldrh	r3, [r7, #14]
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	4413      	add	r3, r2
 8000744:	781a      	ldrb	r2, [r3, #0]
 8000746:	4b0d      	ldr	r3, [pc, #52]	; (800077c <SendString+0x64>)
 8000748:	605a      	str	r2, [r3, #4]
		while ((USART2->SR & USART_SR_TC)==0) {};			//ждём окончания передачи
 800074a:	bf00      	nop
 800074c:	4b0b      	ldr	r3, [pc, #44]	; (800077c <SendString+0x64>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000754:	2b00      	cmp	r3, #0
 8000756:	d0f9      	beq.n	800074c <SendString+0x34>
	for (i = 0; i < strlen(str); i++)
 8000758:	89fb      	ldrh	r3, [r7, #14]
 800075a:	3301      	adds	r3, #1
 800075c:	81fb      	strh	r3, [r7, #14]
 800075e:	89fc      	ldrh	r4, [r7, #14]
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff fd05 	bl	8000170 <strlen>
 8000766:	4603      	mov	r3, r0
 8000768:	429c      	cmp	r4, r3
 800076a:	d3e8      	bcc.n	800073e <SendString+0x26>
	}
}
 800076c:	bf00      	nop
 800076e:	bf00      	nop
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	bd90      	pop	{r4, r7, pc}
 8000776:	bf00      	nop
 8000778:	08001ce0 	.word	0x08001ce0
 800077c:	40004400 	.word	0x40004400

08000780 <ExecuteCommand>:
  * @brief  Обработчик команд
  * @param  None
  * @retval None
  */
void ExecuteCommand(void)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
//	txStr(RxBuffer, false);

	memset(TxBuffer,0,sizeof(TxBuffer));					//Очистка буфера передачи
 8000786:	f44f 7280 	mov.w	r2, #256	; 0x100
 800078a:	2100      	movs	r1, #0
 800078c:	4840      	ldr	r0, [pc, #256]	; (8000890 <ExecuteCommand+0x110>)
 800078e:	f000 f985 	bl	8000a9c <memset>

	/* Обработчик команд */
	if (strncmp(RxBuffer,"*IDN?",strlen("*IDN?")) == 0)					//Это команда "*IDN?"
 8000792:	2205      	movs	r2, #5
 8000794:	493f      	ldr	r1, [pc, #252]	; (8000894 <ExecuteCommand+0x114>)
 8000796:	4840      	ldr	r0, [pc, #256]	; (8000898 <ExecuteCommand+0x118>)
 8000798:	f000 f96e 	bl	8000a78 <strncmp>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d106      	bne.n	80007b0 <ExecuteCommand+0x30>
	{
		//Она самая, возвращаем строку идентификации
		strcpy(TxBuffer,"Yakimov IU72");
 80007a2:	4a3b      	ldr	r2, [pc, #236]	; (8000890 <ExecuteCommand+0x110>)
 80007a4:	4b3d      	ldr	r3, [pc, #244]	; (800089c <ExecuteCommand+0x11c>)
 80007a6:	4614      	mov	r4, r2
 80007a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007aa:	c407      	stmia	r4!, {r0, r1, r2}
 80007ac:	7023      	strb	r3, [r4, #0]
 80007ae:	e05e      	b.n	800086e <ExecuteCommand+0xee>
	}
	else if (strncmp(RxBuffer,"INC",strlen("INC")) == 0)				//Команда запуска таймера?
 80007b0:	2203      	movs	r2, #3
 80007b2:	493b      	ldr	r1, [pc, #236]	; (80008a0 <ExecuteCommand+0x120>)
 80007b4:	4838      	ldr	r0, [pc, #224]	; (8000898 <ExecuteCommand+0x118>)
 80007b6:	f000 f95f 	bl	8000a78 <strncmp>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d10e      	bne.n	80007de <ExecuteCommand+0x5e>
	{
		count++;
 80007c0:	4b38      	ldr	r3, [pc, #224]	; (80008a4 <ExecuteCommand+0x124>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	3301      	adds	r3, #1
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b36      	ldr	r3, [pc, #216]	; (80008a4 <ExecuteCommand+0x124>)
 80007ca:	701a      	strb	r2, [r3, #0]
		strcpy(TxBuffer, "OK");
 80007cc:	4b30      	ldr	r3, [pc, #192]	; (8000890 <ExecuteCommand+0x110>)
 80007ce:	4a36      	ldr	r2, [pc, #216]	; (80008a8 <ExecuteCommand+0x128>)
 80007d0:	6812      	ldr	r2, [r2, #0]
 80007d2:	4611      	mov	r1, r2
 80007d4:	8019      	strh	r1, [r3, #0]
 80007d6:	3302      	adds	r3, #2
 80007d8:	0c12      	lsrs	r2, r2, #16
 80007da:	701a      	strb	r2, [r3, #0]
 80007dc:	e047      	b.n	800086e <ExecuteCommand+0xee>
	}
	else if (strncmp(RxBuffer,"VALUE?",strlen("VALUE?")) == 0)				//Команда остановки таймера?
 80007de:	2206      	movs	r2, #6
 80007e0:	4932      	ldr	r1, [pc, #200]	; (80008ac <ExecuteCommand+0x12c>)
 80007e2:	482d      	ldr	r0, [pc, #180]	; (8000898 <ExecuteCommand+0x118>)
 80007e4:	f000 f948 	bl	8000a78 <strncmp>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d107      	bne.n	80007fe <ExecuteCommand+0x7e>
	{
		sprintf(TxBuffer,"%d", count);
 80007ee:	4b2d      	ldr	r3, [pc, #180]	; (80008a4 <ExecuteCommand+0x124>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	461a      	mov	r2, r3
 80007f4:	492e      	ldr	r1, [pc, #184]	; (80008b0 <ExecuteCommand+0x130>)
 80007f6:	4826      	ldr	r0, [pc, #152]	; (8000890 <ExecuteCommand+0x110>)
 80007f8:	f000 f8f2 	bl	80009e0 <siprintf>
 80007fc:	e037      	b.n	800086e <ExecuteCommand+0xee>
//	else if (strncmp(RxBuffer,"STOP",strlen("STOP")) == 0)				//Команда остановки таймера?
//	{
//		TIM2->CR1 ^= TIM_CR1_CEN; // Инвертируем состояние таймера
//		strcpy(TxBuffer, "OK");
//	}
	else if (strncmp(RxBuffer,"PERIOD ",strlen("PERIOD ")) == 0)				//Команда изменения периода таймера?
 80007fe:	2207      	movs	r2, #7
 8000800:	492c      	ldr	r1, [pc, #176]	; (80008b4 <ExecuteCommand+0x134>)
 8000802:	4825      	ldr	r0, [pc, #148]	; (8000898 <ExecuteCommand+0x118>)
 8000804:	f000 f938 	bl	8000a78 <strncmp>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d126      	bne.n	800085c <ExecuteCommand+0xdc>
	{
		uint16_t tim_value;
		sscanf(RxBuffer,"%*s %hu", &tim_value);				//преобразуем строку в целое число
 800080e:	1dbb      	adds	r3, r7, #6
 8000810:	461a      	mov	r2, r3
 8000812:	4929      	ldr	r1, [pc, #164]	; (80008b8 <ExecuteCommand+0x138>)
 8000814:	4820      	ldr	r0, [pc, #128]	; (8000898 <ExecuteCommand+0x118>)
 8000816:	f000 f903 	bl	8000a20 <siscanf>

		if ((100 <= tim_value) && (tim_value <= 3000))		//параметр должен быть в заданных пределах!
 800081a:	88fb      	ldrh	r3, [r7, #6]
 800081c:	2b63      	cmp	r3, #99	; 0x63
 800081e:	d916      	bls.n	800084e <ExecuteCommand+0xce>
 8000820:	88fb      	ldrh	r3, [r7, #6]
 8000822:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000826:	4293      	cmp	r3, r2
 8000828:	d811      	bhi.n	800084e <ExecuteCommand+0xce>
			{
				TIM2->ARR = tim_value-1;
 800082a:	88fb      	ldrh	r3, [r7, #6]
 800082c:	1e5a      	subs	r2, r3, #1
 800082e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000832:	62da      	str	r2, [r3, #44]	; 0x2c
				TIM2->CNT = 0;
 8000834:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000838:	2200      	movs	r2, #0
 800083a:	625a      	str	r2, [r3, #36]	; 0x24
				strcpy(TxBuffer, "OK");
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <ExecuteCommand+0x110>)
 800083e:	4a1a      	ldr	r2, [pc, #104]	; (80008a8 <ExecuteCommand+0x128>)
 8000840:	6812      	ldr	r2, [r2, #0]
 8000842:	4611      	mov	r1, r2
 8000844:	8019      	strh	r1, [r3, #0]
 8000846:	3302      	adds	r3, #2
 8000848:	0c12      	lsrs	r2, r2, #16
 800084a:	701a      	strb	r2, [r3, #0]
 800084c:	e00f      	b.n	800086e <ExecuteCommand+0xee>
			}
		else
				strcpy(TxBuffer, "INVALID PARAM");	//ругаемся
 800084e:	4a10      	ldr	r2, [pc, #64]	; (8000890 <ExecuteCommand+0x110>)
 8000850:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <ExecuteCommand+0x13c>)
 8000852:	4614      	mov	r4, r2
 8000854:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000856:	c407      	stmia	r4!, {r0, r1, r2}
 8000858:	8023      	strh	r3, [r4, #0]
 800085a:	e008      	b.n	800086e <ExecuteCommand+0xee>
	}
	else strcpy(TxBuffer,"UNKOWN COMMAND");					//Если мы не знаем, чего от нас хотят, ругаемся в ответ
 800085c:	4a0c      	ldr	r2, [pc, #48]	; (8000890 <ExecuteCommand+0x110>)
 800085e:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <ExecuteCommand+0x140>)
 8000860:	4614      	mov	r4, r2
 8000862:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000864:	c407      	stmia	r4!, {r0, r1, r2}
 8000866:	8023      	strh	r3, [r4, #0]
 8000868:	3402      	adds	r4, #2
 800086a:	0c1b      	lsrs	r3, r3, #16
 800086c:	7023      	strb	r3, [r4, #0]

	SendString(TxBuffer);
 800086e:	4808      	ldr	r0, [pc, #32]	; (8000890 <ExecuteCommand+0x110>)
 8000870:	f7ff ff52 	bl	8000718 <SendString>
	memset(RxBuffer,0,RX_BUFF_SIZE);						//Очистка буфера приёма									//Сбрасываем флаг приёма строки
 8000874:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000878:	2100      	movs	r1, #0
 800087a:	4807      	ldr	r0, [pc, #28]	; (8000898 <ExecuteCommand+0x118>)
 800087c:	f000 f90e 	bl	8000a9c <memset>
	ComReceived = false;
 8000880:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <ExecuteCommand+0x144>)
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	bd90      	pop	{r4, r7, pc}
 800088e:	bf00      	nop
 8000890:	2000016c 	.word	0x2000016c
 8000894:	08001ce4 	.word	0x08001ce4
 8000898:	2000006c 	.word	0x2000006c
 800089c:	08001cec 	.word	0x08001cec
 80008a0:	08001cfc 	.word	0x08001cfc
 80008a4:	2000026d 	.word	0x2000026d
 80008a8:	08001d00 	.word	0x08001d00
 80008ac:	08001d04 	.word	0x08001d04
 80008b0:	08001d0c 	.word	0x08001d0c
 80008b4:	08001d10 	.word	0x08001d10
 80008b8:	08001d18 	.word	0x08001d18
 80008bc:	08001d20 	.word	0x08001d20
 80008c0:	08001d30 	.word	0x08001d30
 80008c4:	2000026c 	.word	0x2000026c

080008c8 <main>:

int main(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	/*Инициализации всякие*/
		init_clk();
 80008cc:	f7ff fc9e 	bl	800020c <init_clk>
		init_ports();
 80008d0:	f7ff fd26 	bl	8000320 <init_ports>
		init_button();
 80008d4:	f7ff fd88 	bl	80003e8 <init_button>
		init_tim();
 80008d8:	f7ff fcfc 	bl	80002d4 <init_tim>
		init_usart2();
 80008dc:	f7ff fea8 	bl	8000630 <init_usart2>
		indicator();
 80008e0:	f7ff fe3a 	bl	8000558 <indicator>
		/*Основной цикл*/
		while(true)
		{
			if (ComReceived)				//Ждём приема строки
 80008e4:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <main+0x2c>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d0fb      	beq.n	80008e4 <main+0x1c>
				ExecuteCommand();
 80008ec:	f7ff ff48 	bl	8000780 <ExecuteCommand>
			if (ComReceived)				//Ждём приема строки
 80008f0:	e7f8      	b.n	80008e4 <main+0x1c>
 80008f2:	bf00      	nop
 80008f4:	2000026c 	.word	0x2000026c

080008f8 <delay>:
		};
}

void delay(uint32_t takts)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < takts; i++) {};
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	e002      	b.n	800090c <delay+0x14>
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	3301      	adds	r3, #1
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fa      	ldr	r2, [r7, #12]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	429a      	cmp	r2, r3
 8000912:	d3f8      	bcc.n	8000906 <delay+0xe>
}
 8000914:	bf00      	nop
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr

08000920 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000928:	4a14      	ldr	r2, [pc, #80]	; (800097c <_sbrk+0x5c>)
 800092a:	4b15      	ldr	r3, [pc, #84]	; (8000980 <_sbrk+0x60>)
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000934:	4b13      	ldr	r3, [pc, #76]	; (8000984 <_sbrk+0x64>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d102      	bne.n	8000942 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <_sbrk+0x64>)
 800093e:	4a12      	ldr	r2, [pc, #72]	; (8000988 <_sbrk+0x68>)
 8000940:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <_sbrk+0x64>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4413      	add	r3, r2
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	429a      	cmp	r2, r3
 800094e:	d207      	bcs.n	8000960 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000950:	f000 f8ac 	bl	8000aac <__errno>
 8000954:	4603      	mov	r3, r0
 8000956:	220c      	movs	r2, #12
 8000958:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800095a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800095e:	e009      	b.n	8000974 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <_sbrk+0x64>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <_sbrk+0x64>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4413      	add	r3, r2
 800096e:	4a05      	ldr	r2, [pc, #20]	; (8000984 <_sbrk+0x64>)
 8000970:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000972:	68fb      	ldr	r3, [r7, #12]
}
 8000974:	4618      	mov	r0, r3
 8000976:	3718      	adds	r7, #24
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20005000 	.word	0x20005000
 8000980:	00000400 	.word	0x00000400
 8000984:	20000270 	.word	0x20000270
 8000988:	200003c0 	.word	0x200003c0

0800098c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800098c:	480d      	ldr	r0, [pc, #52]	; (80009c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800098e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000990:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000994:	480c      	ldr	r0, [pc, #48]	; (80009c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000996:	490d      	ldr	r1, [pc, #52]	; (80009cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000998:	4a0d      	ldr	r2, [pc, #52]	; (80009d0 <LoopForever+0xe>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800099c:	e002      	b.n	80009a4 <LoopCopyDataInit>

0800099e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a2:	3304      	adds	r3, #4

080009a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a8:	d3f9      	bcc.n	800099e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009aa:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009ac:	4c0a      	ldr	r4, [pc, #40]	; (80009d8 <LoopForever+0x16>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b0:	e001      	b.n	80009b6 <LoopFillZerobss>

080009b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b4:	3204      	adds	r2, #4

080009b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b8:	d3fb      	bcc.n	80009b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009ba:	f000 f87d 	bl	8000ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009be:	f7ff ff83 	bl	80008c8 <main>

080009c2 <LoopForever>:

LoopForever:
  b LoopForever
 80009c2:	e7fe      	b.n	80009c2 <LoopForever>
  ldr   r0, =_estack
 80009c4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80009c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009cc:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80009d0:	08001ea4 	.word	0x08001ea4
  ldr r2, =_sbss
 80009d4:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80009d8:	200003bc 	.word	0x200003bc

080009dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009dc:	e7fe      	b.n	80009dc <ADC1_2_IRQHandler>
	...

080009e0 <siprintf>:
 80009e0:	b40e      	push	{r1, r2, r3}
 80009e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80009e6:	b500      	push	{lr}
 80009e8:	b09c      	sub	sp, #112	; 0x70
 80009ea:	ab1d      	add	r3, sp, #116	; 0x74
 80009ec:	9002      	str	r0, [sp, #8]
 80009ee:	9006      	str	r0, [sp, #24]
 80009f0:	9107      	str	r1, [sp, #28]
 80009f2:	9104      	str	r1, [sp, #16]
 80009f4:	4808      	ldr	r0, [pc, #32]	; (8000a18 <siprintf+0x38>)
 80009f6:	4909      	ldr	r1, [pc, #36]	; (8000a1c <siprintf+0x3c>)
 80009f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80009fc:	9105      	str	r1, [sp, #20]
 80009fe:	6800      	ldr	r0, [r0, #0]
 8000a00:	a902      	add	r1, sp, #8
 8000a02:	9301      	str	r3, [sp, #4]
 8000a04:	f000 f920 	bl	8000c48 <_svfiprintf_r>
 8000a08:	2200      	movs	r2, #0
 8000a0a:	9b02      	ldr	r3, [sp, #8]
 8000a0c:	701a      	strb	r2, [r3, #0]
 8000a0e:	b01c      	add	sp, #112	; 0x70
 8000a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8000a14:	b003      	add	sp, #12
 8000a16:	4770      	bx	lr
 8000a18:	2000004c 	.word	0x2000004c
 8000a1c:	ffff0208 	.word	0xffff0208

08000a20 <siscanf>:
 8000a20:	b40e      	push	{r1, r2, r3}
 8000a22:	f44f 7201 	mov.w	r2, #516	; 0x204
 8000a26:	b530      	push	{r4, r5, lr}
 8000a28:	b09c      	sub	sp, #112	; 0x70
 8000a2a:	ac1f      	add	r4, sp, #124	; 0x7c
 8000a2c:	f854 5b04 	ldr.w	r5, [r4], #4
 8000a30:	f8ad 2014 	strh.w	r2, [sp, #20]
 8000a34:	9002      	str	r0, [sp, #8]
 8000a36:	9006      	str	r0, [sp, #24]
 8000a38:	f7ff fb9a 	bl	8000170 <strlen>
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <siscanf+0x4c>)
 8000a3e:	9003      	str	r0, [sp, #12]
 8000a40:	930b      	str	r3, [sp, #44]	; 0x2c
 8000a42:	2300      	movs	r3, #0
 8000a44:	930f      	str	r3, [sp, #60]	; 0x3c
 8000a46:	9314      	str	r3, [sp, #80]	; 0x50
 8000a48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a4c:	9007      	str	r0, [sp, #28]
 8000a4e:	4808      	ldr	r0, [pc, #32]	; (8000a70 <siscanf+0x50>)
 8000a50:	f8ad 3016 	strh.w	r3, [sp, #22]
 8000a54:	462a      	mov	r2, r5
 8000a56:	4623      	mov	r3, r4
 8000a58:	a902      	add	r1, sp, #8
 8000a5a:	6800      	ldr	r0, [r0, #0]
 8000a5c:	9401      	str	r4, [sp, #4]
 8000a5e:	f000 fa4b 	bl	8000ef8 <__ssvfiscanf_r>
 8000a62:	b01c      	add	sp, #112	; 0x70
 8000a64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000a68:	b003      	add	sp, #12
 8000a6a:	4770      	bx	lr
 8000a6c:	08000a75 	.word	0x08000a75
 8000a70:	2000004c 	.word	0x2000004c

08000a74 <__seofread>:
 8000a74:	2000      	movs	r0, #0
 8000a76:	4770      	bx	lr

08000a78 <strncmp>:
 8000a78:	b510      	push	{r4, lr}
 8000a7a:	b16a      	cbz	r2, 8000a98 <strncmp+0x20>
 8000a7c:	3901      	subs	r1, #1
 8000a7e:	1884      	adds	r4, r0, r2
 8000a80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000a84:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d103      	bne.n	8000a94 <strncmp+0x1c>
 8000a8c:	42a0      	cmp	r0, r4
 8000a8e:	d001      	beq.n	8000a94 <strncmp+0x1c>
 8000a90:	2a00      	cmp	r2, #0
 8000a92:	d1f5      	bne.n	8000a80 <strncmp+0x8>
 8000a94:	1ad0      	subs	r0, r2, r3
 8000a96:	bd10      	pop	{r4, pc}
 8000a98:	4610      	mov	r0, r2
 8000a9a:	e7fc      	b.n	8000a96 <strncmp+0x1e>

08000a9c <memset>:
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	4402      	add	r2, r0
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d100      	bne.n	8000aa6 <memset+0xa>
 8000aa4:	4770      	bx	lr
 8000aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8000aaa:	e7f9      	b.n	8000aa0 <memset+0x4>

08000aac <__errno>:
 8000aac:	4b01      	ldr	r3, [pc, #4]	; (8000ab4 <__errno+0x8>)
 8000aae:	6818      	ldr	r0, [r3, #0]
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	2000004c 	.word	0x2000004c

08000ab8 <__libc_init_array>:
 8000ab8:	b570      	push	{r4, r5, r6, lr}
 8000aba:	2600      	movs	r6, #0
 8000abc:	4d0c      	ldr	r5, [pc, #48]	; (8000af0 <__libc_init_array+0x38>)
 8000abe:	4c0d      	ldr	r4, [pc, #52]	; (8000af4 <__libc_init_array+0x3c>)
 8000ac0:	1b64      	subs	r4, r4, r5
 8000ac2:	10a4      	asrs	r4, r4, #2
 8000ac4:	42a6      	cmp	r6, r4
 8000ac6:	d109      	bne.n	8000adc <__libc_init_array+0x24>
 8000ac8:	f001 f8fe 	bl	8001cc8 <_init>
 8000acc:	2600      	movs	r6, #0
 8000ace:	4d0a      	ldr	r5, [pc, #40]	; (8000af8 <__libc_init_array+0x40>)
 8000ad0:	4c0a      	ldr	r4, [pc, #40]	; (8000afc <__libc_init_array+0x44>)
 8000ad2:	1b64      	subs	r4, r4, r5
 8000ad4:	10a4      	asrs	r4, r4, #2
 8000ad6:	42a6      	cmp	r6, r4
 8000ad8:	d105      	bne.n	8000ae6 <__libc_init_array+0x2e>
 8000ada:	bd70      	pop	{r4, r5, r6, pc}
 8000adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ae0:	4798      	blx	r3
 8000ae2:	3601      	adds	r6, #1
 8000ae4:	e7ee      	b.n	8000ac4 <__libc_init_array+0xc>
 8000ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aea:	4798      	blx	r3
 8000aec:	3601      	adds	r6, #1
 8000aee:	e7f2      	b.n	8000ad6 <__libc_init_array+0x1e>
 8000af0:	08001e9c 	.word	0x08001e9c
 8000af4:	08001e9c 	.word	0x08001e9c
 8000af8:	08001e9c 	.word	0x08001e9c
 8000afc:	08001ea0 	.word	0x08001ea0

08000b00 <__retarget_lock_acquire_recursive>:
 8000b00:	4770      	bx	lr

08000b02 <__retarget_lock_release_recursive>:
 8000b02:	4770      	bx	lr

08000b04 <_free_r>:
 8000b04:	b538      	push	{r3, r4, r5, lr}
 8000b06:	4605      	mov	r5, r0
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	d040      	beq.n	8000b8e <_free_r+0x8a>
 8000b0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b10:	1f0c      	subs	r4, r1, #4
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	bfb8      	it	lt
 8000b16:	18e4      	addlt	r4, r4, r3
 8000b18:	f000 ff20 	bl	800195c <__malloc_lock>
 8000b1c:	4a1c      	ldr	r2, [pc, #112]	; (8000b90 <_free_r+0x8c>)
 8000b1e:	6813      	ldr	r3, [r2, #0]
 8000b20:	b933      	cbnz	r3, 8000b30 <_free_r+0x2c>
 8000b22:	6063      	str	r3, [r4, #4]
 8000b24:	6014      	str	r4, [r2, #0]
 8000b26:	4628      	mov	r0, r5
 8000b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b2c:	f000 bf1c 	b.w	8001968 <__malloc_unlock>
 8000b30:	42a3      	cmp	r3, r4
 8000b32:	d908      	bls.n	8000b46 <_free_r+0x42>
 8000b34:	6820      	ldr	r0, [r4, #0]
 8000b36:	1821      	adds	r1, r4, r0
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	bf01      	itttt	eq
 8000b3c:	6819      	ldreq	r1, [r3, #0]
 8000b3e:	685b      	ldreq	r3, [r3, #4]
 8000b40:	1809      	addeq	r1, r1, r0
 8000b42:	6021      	streq	r1, [r4, #0]
 8000b44:	e7ed      	b.n	8000b22 <_free_r+0x1e>
 8000b46:	461a      	mov	r2, r3
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	b10b      	cbz	r3, 8000b50 <_free_r+0x4c>
 8000b4c:	42a3      	cmp	r3, r4
 8000b4e:	d9fa      	bls.n	8000b46 <_free_r+0x42>
 8000b50:	6811      	ldr	r1, [r2, #0]
 8000b52:	1850      	adds	r0, r2, r1
 8000b54:	42a0      	cmp	r0, r4
 8000b56:	d10b      	bne.n	8000b70 <_free_r+0x6c>
 8000b58:	6820      	ldr	r0, [r4, #0]
 8000b5a:	4401      	add	r1, r0
 8000b5c:	1850      	adds	r0, r2, r1
 8000b5e:	4283      	cmp	r3, r0
 8000b60:	6011      	str	r1, [r2, #0]
 8000b62:	d1e0      	bne.n	8000b26 <_free_r+0x22>
 8000b64:	6818      	ldr	r0, [r3, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	4408      	add	r0, r1
 8000b6a:	6010      	str	r0, [r2, #0]
 8000b6c:	6053      	str	r3, [r2, #4]
 8000b6e:	e7da      	b.n	8000b26 <_free_r+0x22>
 8000b70:	d902      	bls.n	8000b78 <_free_r+0x74>
 8000b72:	230c      	movs	r3, #12
 8000b74:	602b      	str	r3, [r5, #0]
 8000b76:	e7d6      	b.n	8000b26 <_free_r+0x22>
 8000b78:	6820      	ldr	r0, [r4, #0]
 8000b7a:	1821      	adds	r1, r4, r0
 8000b7c:	428b      	cmp	r3, r1
 8000b7e:	bf01      	itttt	eq
 8000b80:	6819      	ldreq	r1, [r3, #0]
 8000b82:	685b      	ldreq	r3, [r3, #4]
 8000b84:	1809      	addeq	r1, r1, r0
 8000b86:	6021      	streq	r1, [r4, #0]
 8000b88:	6063      	str	r3, [r4, #4]
 8000b8a:	6054      	str	r4, [r2, #4]
 8000b8c:	e7cb      	b.n	8000b26 <_free_r+0x22>
 8000b8e:	bd38      	pop	{r3, r4, r5, pc}
 8000b90:	200003b4 	.word	0x200003b4

08000b94 <__ssputs_r>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	461f      	mov	r7, r3
 8000b9a:	688e      	ldr	r6, [r1, #8]
 8000b9c:	4682      	mov	sl, r0
 8000b9e:	42be      	cmp	r6, r7
 8000ba0:	460c      	mov	r4, r1
 8000ba2:	4690      	mov	r8, r2
 8000ba4:	680b      	ldr	r3, [r1, #0]
 8000ba6:	d82c      	bhi.n	8000c02 <__ssputs_r+0x6e>
 8000ba8:	898a      	ldrh	r2, [r1, #12]
 8000baa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000bae:	d026      	beq.n	8000bfe <__ssputs_r+0x6a>
 8000bb0:	6965      	ldr	r5, [r4, #20]
 8000bb2:	6909      	ldr	r1, [r1, #16]
 8000bb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000bb8:	eba3 0901 	sub.w	r9, r3, r1
 8000bbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000bc0:	1c7b      	adds	r3, r7, #1
 8000bc2:	444b      	add	r3, r9
 8000bc4:	106d      	asrs	r5, r5, #1
 8000bc6:	429d      	cmp	r5, r3
 8000bc8:	bf38      	it	cc
 8000bca:	461d      	movcc	r5, r3
 8000bcc:	0553      	lsls	r3, r2, #21
 8000bce:	d527      	bpl.n	8000c20 <__ssputs_r+0x8c>
 8000bd0:	4629      	mov	r1, r5
 8000bd2:	f000 fb29 	bl	8001228 <_malloc_r>
 8000bd6:	4606      	mov	r6, r0
 8000bd8:	b360      	cbz	r0, 8000c34 <__ssputs_r+0xa0>
 8000bda:	464a      	mov	r2, r9
 8000bdc:	6921      	ldr	r1, [r4, #16]
 8000bde:	f001 f85d 	bl	8001c9c <memcpy>
 8000be2:	89a3      	ldrh	r3, [r4, #12]
 8000be4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bec:	81a3      	strh	r3, [r4, #12]
 8000bee:	6126      	str	r6, [r4, #16]
 8000bf0:	444e      	add	r6, r9
 8000bf2:	6026      	str	r6, [r4, #0]
 8000bf4:	463e      	mov	r6, r7
 8000bf6:	6165      	str	r5, [r4, #20]
 8000bf8:	eba5 0509 	sub.w	r5, r5, r9
 8000bfc:	60a5      	str	r5, [r4, #8]
 8000bfe:	42be      	cmp	r6, r7
 8000c00:	d900      	bls.n	8000c04 <__ssputs_r+0x70>
 8000c02:	463e      	mov	r6, r7
 8000c04:	4632      	mov	r2, r6
 8000c06:	4641      	mov	r1, r8
 8000c08:	6820      	ldr	r0, [r4, #0]
 8000c0a:	f001 f80f 	bl	8001c2c <memmove>
 8000c0e:	2000      	movs	r0, #0
 8000c10:	68a3      	ldr	r3, [r4, #8]
 8000c12:	1b9b      	subs	r3, r3, r6
 8000c14:	60a3      	str	r3, [r4, #8]
 8000c16:	6823      	ldr	r3, [r4, #0]
 8000c18:	4433      	add	r3, r6
 8000c1a:	6023      	str	r3, [r4, #0]
 8000c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c20:	462a      	mov	r2, r5
 8000c22:	f000 fedf 	bl	80019e4 <_realloc_r>
 8000c26:	4606      	mov	r6, r0
 8000c28:	2800      	cmp	r0, #0
 8000c2a:	d1e0      	bne.n	8000bee <__ssputs_r+0x5a>
 8000c2c:	4650      	mov	r0, sl
 8000c2e:	6921      	ldr	r1, [r4, #16]
 8000c30:	f7ff ff68 	bl	8000b04 <_free_r>
 8000c34:	230c      	movs	r3, #12
 8000c36:	f8ca 3000 	str.w	r3, [sl]
 8000c3a:	89a3      	ldrh	r3, [r4, #12]
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c44:	81a3      	strh	r3, [r4, #12]
 8000c46:	e7e9      	b.n	8000c1c <__ssputs_r+0x88>

08000c48 <_svfiprintf_r>:
 8000c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c4c:	4698      	mov	r8, r3
 8000c4e:	898b      	ldrh	r3, [r1, #12]
 8000c50:	4607      	mov	r7, r0
 8000c52:	061b      	lsls	r3, r3, #24
 8000c54:	460d      	mov	r5, r1
 8000c56:	4614      	mov	r4, r2
 8000c58:	b09d      	sub	sp, #116	; 0x74
 8000c5a:	d50e      	bpl.n	8000c7a <_svfiprintf_r+0x32>
 8000c5c:	690b      	ldr	r3, [r1, #16]
 8000c5e:	b963      	cbnz	r3, 8000c7a <_svfiprintf_r+0x32>
 8000c60:	2140      	movs	r1, #64	; 0x40
 8000c62:	f000 fae1 	bl	8001228 <_malloc_r>
 8000c66:	6028      	str	r0, [r5, #0]
 8000c68:	6128      	str	r0, [r5, #16]
 8000c6a:	b920      	cbnz	r0, 8000c76 <_svfiprintf_r+0x2e>
 8000c6c:	230c      	movs	r3, #12
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c74:	e0d0      	b.n	8000e18 <_svfiprintf_r+0x1d0>
 8000c76:	2340      	movs	r3, #64	; 0x40
 8000c78:	616b      	str	r3, [r5, #20]
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8000c7e:	2320      	movs	r3, #32
 8000c80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000c84:	2330      	movs	r3, #48	; 0x30
 8000c86:	f04f 0901 	mov.w	r9, #1
 8000c8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c8e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000e30 <_svfiprintf_r+0x1e8>
 8000c92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000c96:	4623      	mov	r3, r4
 8000c98:	469a      	mov	sl, r3
 8000c9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c9e:	b10a      	cbz	r2, 8000ca4 <_svfiprintf_r+0x5c>
 8000ca0:	2a25      	cmp	r2, #37	; 0x25
 8000ca2:	d1f9      	bne.n	8000c98 <_svfiprintf_r+0x50>
 8000ca4:	ebba 0b04 	subs.w	fp, sl, r4
 8000ca8:	d00b      	beq.n	8000cc2 <_svfiprintf_r+0x7a>
 8000caa:	465b      	mov	r3, fp
 8000cac:	4622      	mov	r2, r4
 8000cae:	4629      	mov	r1, r5
 8000cb0:	4638      	mov	r0, r7
 8000cb2:	f7ff ff6f 	bl	8000b94 <__ssputs_r>
 8000cb6:	3001      	adds	r0, #1
 8000cb8:	f000 80a9 	beq.w	8000e0e <_svfiprintf_r+0x1c6>
 8000cbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000cbe:	445a      	add	r2, fp
 8000cc0:	9209      	str	r2, [sp, #36]	; 0x24
 8000cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f000 80a1 	beq.w	8000e0e <_svfiprintf_r+0x1c6>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000cd6:	f10a 0a01 	add.w	sl, sl, #1
 8000cda:	9304      	str	r3, [sp, #16]
 8000cdc:	9307      	str	r3, [sp, #28]
 8000cde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000ce2:	931a      	str	r3, [sp, #104]	; 0x68
 8000ce4:	4654      	mov	r4, sl
 8000ce6:	2205      	movs	r2, #5
 8000ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cec:	4850      	ldr	r0, [pc, #320]	; (8000e30 <_svfiprintf_r+0x1e8>)
 8000cee:	f000 ffc7 	bl	8001c80 <memchr>
 8000cf2:	9a04      	ldr	r2, [sp, #16]
 8000cf4:	b9d8      	cbnz	r0, 8000d2e <_svfiprintf_r+0xe6>
 8000cf6:	06d0      	lsls	r0, r2, #27
 8000cf8:	bf44      	itt	mi
 8000cfa:	2320      	movmi	r3, #32
 8000cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d00:	0711      	lsls	r1, r2, #28
 8000d02:	bf44      	itt	mi
 8000d04:	232b      	movmi	r3, #43	; 0x2b
 8000d06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8000d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8000d10:	d015      	beq.n	8000d3e <_svfiprintf_r+0xf6>
 8000d12:	4654      	mov	r4, sl
 8000d14:	2000      	movs	r0, #0
 8000d16:	f04f 0c0a 	mov.w	ip, #10
 8000d1a:	9a07      	ldr	r2, [sp, #28]
 8000d1c:	4621      	mov	r1, r4
 8000d1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d22:	3b30      	subs	r3, #48	; 0x30
 8000d24:	2b09      	cmp	r3, #9
 8000d26:	d94d      	bls.n	8000dc4 <_svfiprintf_r+0x17c>
 8000d28:	b1b0      	cbz	r0, 8000d58 <_svfiprintf_r+0x110>
 8000d2a:	9207      	str	r2, [sp, #28]
 8000d2c:	e014      	b.n	8000d58 <_svfiprintf_r+0x110>
 8000d2e:	eba0 0308 	sub.w	r3, r0, r8
 8000d32:	fa09 f303 	lsl.w	r3, r9, r3
 8000d36:	4313      	orrs	r3, r2
 8000d38:	46a2      	mov	sl, r4
 8000d3a:	9304      	str	r3, [sp, #16]
 8000d3c:	e7d2      	b.n	8000ce4 <_svfiprintf_r+0x9c>
 8000d3e:	9b03      	ldr	r3, [sp, #12]
 8000d40:	1d19      	adds	r1, r3, #4
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	9103      	str	r1, [sp, #12]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	bfbb      	ittet	lt
 8000d4a:	425b      	neglt	r3, r3
 8000d4c:	f042 0202 	orrlt.w	r2, r2, #2
 8000d50:	9307      	strge	r3, [sp, #28]
 8000d52:	9307      	strlt	r3, [sp, #28]
 8000d54:	bfb8      	it	lt
 8000d56:	9204      	strlt	r2, [sp, #16]
 8000d58:	7823      	ldrb	r3, [r4, #0]
 8000d5a:	2b2e      	cmp	r3, #46	; 0x2e
 8000d5c:	d10c      	bne.n	8000d78 <_svfiprintf_r+0x130>
 8000d5e:	7863      	ldrb	r3, [r4, #1]
 8000d60:	2b2a      	cmp	r3, #42	; 0x2a
 8000d62:	d134      	bne.n	8000dce <_svfiprintf_r+0x186>
 8000d64:	9b03      	ldr	r3, [sp, #12]
 8000d66:	3402      	adds	r4, #2
 8000d68:	1d1a      	adds	r2, r3, #4
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	9203      	str	r2, [sp, #12]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	bfb8      	it	lt
 8000d72:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000d76:	9305      	str	r3, [sp, #20]
 8000d78:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8000e34 <_svfiprintf_r+0x1ec>
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	4650      	mov	r0, sl
 8000d80:	7821      	ldrb	r1, [r4, #0]
 8000d82:	f000 ff7d 	bl	8001c80 <memchr>
 8000d86:	b138      	cbz	r0, 8000d98 <_svfiprintf_r+0x150>
 8000d88:	2240      	movs	r2, #64	; 0x40
 8000d8a:	9b04      	ldr	r3, [sp, #16]
 8000d8c:	eba0 000a 	sub.w	r0, r0, sl
 8000d90:	4082      	lsls	r2, r0
 8000d92:	4313      	orrs	r3, r2
 8000d94:	3401      	adds	r4, #1
 8000d96:	9304      	str	r3, [sp, #16]
 8000d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d9c:	2206      	movs	r2, #6
 8000d9e:	4826      	ldr	r0, [pc, #152]	; (8000e38 <_svfiprintf_r+0x1f0>)
 8000da0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000da4:	f000 ff6c 	bl	8001c80 <memchr>
 8000da8:	2800      	cmp	r0, #0
 8000daa:	d038      	beq.n	8000e1e <_svfiprintf_r+0x1d6>
 8000dac:	4b23      	ldr	r3, [pc, #140]	; (8000e3c <_svfiprintf_r+0x1f4>)
 8000dae:	bb1b      	cbnz	r3, 8000df8 <_svfiprintf_r+0x1b0>
 8000db0:	9b03      	ldr	r3, [sp, #12]
 8000db2:	3307      	adds	r3, #7
 8000db4:	f023 0307 	bic.w	r3, r3, #7
 8000db8:	3308      	adds	r3, #8
 8000dba:	9303      	str	r3, [sp, #12]
 8000dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000dbe:	4433      	add	r3, r6
 8000dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8000dc2:	e768      	b.n	8000c96 <_svfiprintf_r+0x4e>
 8000dc4:	460c      	mov	r4, r1
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8000dcc:	e7a6      	b.n	8000d1c <_svfiprintf_r+0xd4>
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f04f 0c0a 	mov.w	ip, #10
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	3401      	adds	r4, #1
 8000dd8:	9305      	str	r3, [sp, #20]
 8000dda:	4620      	mov	r0, r4
 8000ddc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000de0:	3a30      	subs	r2, #48	; 0x30
 8000de2:	2a09      	cmp	r2, #9
 8000de4:	d903      	bls.n	8000dee <_svfiprintf_r+0x1a6>
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0c6      	beq.n	8000d78 <_svfiprintf_r+0x130>
 8000dea:	9105      	str	r1, [sp, #20]
 8000dec:	e7c4      	b.n	8000d78 <_svfiprintf_r+0x130>
 8000dee:	4604      	mov	r4, r0
 8000df0:	2301      	movs	r3, #1
 8000df2:	fb0c 2101 	mla	r1, ip, r1, r2
 8000df6:	e7f0      	b.n	8000dda <_svfiprintf_r+0x192>
 8000df8:	ab03      	add	r3, sp, #12
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	462a      	mov	r2, r5
 8000dfe:	4638      	mov	r0, r7
 8000e00:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <_svfiprintf_r+0x1f8>)
 8000e02:	a904      	add	r1, sp, #16
 8000e04:	f3af 8000 	nop.w
 8000e08:	1c42      	adds	r2, r0, #1
 8000e0a:	4606      	mov	r6, r0
 8000e0c:	d1d6      	bne.n	8000dbc <_svfiprintf_r+0x174>
 8000e0e:	89ab      	ldrh	r3, [r5, #12]
 8000e10:	065b      	lsls	r3, r3, #25
 8000e12:	f53f af2d 	bmi.w	8000c70 <_svfiprintf_r+0x28>
 8000e16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000e18:	b01d      	add	sp, #116	; 0x74
 8000e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e1e:	ab03      	add	r3, sp, #12
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	462a      	mov	r2, r5
 8000e24:	4638      	mov	r0, r7
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <_svfiprintf_r+0x1f8>)
 8000e28:	a904      	add	r1, sp, #16
 8000e2a:	f000 faef 	bl	800140c <_printf_i>
 8000e2e:	e7eb      	b.n	8000e08 <_svfiprintf_r+0x1c0>
 8000e30:	08001d4c 	.word	0x08001d4c
 8000e34:	08001d52 	.word	0x08001d52
 8000e38:	08001d56 	.word	0x08001d56
 8000e3c:	00000000 	.word	0x00000000
 8000e40:	08000b95 	.word	0x08000b95

08000e44 <_sungetc_r>:
 8000e44:	b538      	push	{r3, r4, r5, lr}
 8000e46:	1c4b      	adds	r3, r1, #1
 8000e48:	4614      	mov	r4, r2
 8000e4a:	d103      	bne.n	8000e54 <_sungetc_r+0x10>
 8000e4c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8000e50:	4628      	mov	r0, r5
 8000e52:	bd38      	pop	{r3, r4, r5, pc}
 8000e54:	8993      	ldrh	r3, [r2, #12]
 8000e56:	b2cd      	uxtb	r5, r1
 8000e58:	f023 0320 	bic.w	r3, r3, #32
 8000e5c:	8193      	strh	r3, [r2, #12]
 8000e5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000e60:	6852      	ldr	r2, [r2, #4]
 8000e62:	b18b      	cbz	r3, 8000e88 <_sungetc_r+0x44>
 8000e64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000e66:	4293      	cmp	r3, r2
 8000e68:	dd08      	ble.n	8000e7c <_sungetc_r+0x38>
 8000e6a:	6823      	ldr	r3, [r4, #0]
 8000e6c:	1e5a      	subs	r2, r3, #1
 8000e6e:	6022      	str	r2, [r4, #0]
 8000e70:	f803 5c01 	strb.w	r5, [r3, #-1]
 8000e74:	6863      	ldr	r3, [r4, #4]
 8000e76:	3301      	adds	r3, #1
 8000e78:	6063      	str	r3, [r4, #4]
 8000e7a:	e7e9      	b.n	8000e50 <_sungetc_r+0xc>
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	f000 fd79 	bl	8001974 <__submore>
 8000e82:	2800      	cmp	r0, #0
 8000e84:	d0f1      	beq.n	8000e6a <_sungetc_r+0x26>
 8000e86:	e7e1      	b.n	8000e4c <_sungetc_r+0x8>
 8000e88:	6921      	ldr	r1, [r4, #16]
 8000e8a:	6823      	ldr	r3, [r4, #0]
 8000e8c:	b151      	cbz	r1, 8000ea4 <_sungetc_r+0x60>
 8000e8e:	4299      	cmp	r1, r3
 8000e90:	d208      	bcs.n	8000ea4 <_sungetc_r+0x60>
 8000e92:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8000e96:	42a9      	cmp	r1, r5
 8000e98:	d104      	bne.n	8000ea4 <_sungetc_r+0x60>
 8000e9a:	3b01      	subs	r3, #1
 8000e9c:	3201      	adds	r2, #1
 8000e9e:	6023      	str	r3, [r4, #0]
 8000ea0:	6062      	str	r2, [r4, #4]
 8000ea2:	e7d5      	b.n	8000e50 <_sungetc_r+0xc>
 8000ea4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8000ea8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000eac:	6363      	str	r3, [r4, #52]	; 0x34
 8000eae:	2303      	movs	r3, #3
 8000eb0:	63a3      	str	r3, [r4, #56]	; 0x38
 8000eb2:	4623      	mov	r3, r4
 8000eb4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8000eb8:	6023      	str	r3, [r4, #0]
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e7dc      	b.n	8000e78 <_sungetc_r+0x34>

08000ebe <__ssrefill_r>:
 8000ebe:	b510      	push	{r4, lr}
 8000ec0:	460c      	mov	r4, r1
 8000ec2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8000ec4:	b169      	cbz	r1, 8000ee2 <__ssrefill_r+0x24>
 8000ec6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000eca:	4299      	cmp	r1, r3
 8000ecc:	d001      	beq.n	8000ed2 <__ssrefill_r+0x14>
 8000ece:	f7ff fe19 	bl	8000b04 <_free_r>
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ed6:	6360      	str	r0, [r4, #52]	; 0x34
 8000ed8:	6063      	str	r3, [r4, #4]
 8000eda:	b113      	cbz	r3, 8000ee2 <__ssrefill_r+0x24>
 8000edc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000ede:	6023      	str	r3, [r4, #0]
 8000ee0:	bd10      	pop	{r4, pc}
 8000ee2:	6923      	ldr	r3, [r4, #16]
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ee8:	6023      	str	r3, [r4, #0]
 8000eea:	2300      	movs	r3, #0
 8000eec:	6063      	str	r3, [r4, #4]
 8000eee:	89a3      	ldrh	r3, [r4, #12]
 8000ef0:	f043 0320 	orr.w	r3, r3, #32
 8000ef4:	81a3      	strh	r3, [r4, #12]
 8000ef6:	e7f3      	b.n	8000ee0 <__ssrefill_r+0x22>

08000ef8 <__ssvfiscanf_r>:
 8000ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000efc:	460c      	mov	r4, r1
 8000efe:	2100      	movs	r1, #0
 8000f00:	4606      	mov	r6, r0
 8000f02:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8000f06:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8000f0a:	49a6      	ldr	r1, [pc, #664]	; (80011a4 <__ssvfiscanf_r+0x2ac>)
 8000f0c:	f10d 0804 	add.w	r8, sp, #4
 8000f10:	91a0      	str	r1, [sp, #640]	; 0x280
 8000f12:	49a5      	ldr	r1, [pc, #660]	; (80011a8 <__ssvfiscanf_r+0x2b0>)
 8000f14:	4fa5      	ldr	r7, [pc, #660]	; (80011ac <__ssvfiscanf_r+0x2b4>)
 8000f16:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80011b0 <__ssvfiscanf_r+0x2b8>
 8000f1a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8000f1e:	91a1      	str	r1, [sp, #644]	; 0x284
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	7813      	ldrb	r3, [r2, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f000 815a 	beq.w	80011de <__ssvfiscanf_r+0x2e6>
 8000f2a:	5cf9      	ldrb	r1, [r7, r3]
 8000f2c:	1c55      	adds	r5, r2, #1
 8000f2e:	f011 0108 	ands.w	r1, r1, #8
 8000f32:	d019      	beq.n	8000f68 <__ssvfiscanf_r+0x70>
 8000f34:	6863      	ldr	r3, [r4, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	dd0f      	ble.n	8000f5a <__ssvfiscanf_r+0x62>
 8000f3a:	6823      	ldr	r3, [r4, #0]
 8000f3c:	781a      	ldrb	r2, [r3, #0]
 8000f3e:	5cba      	ldrb	r2, [r7, r2]
 8000f40:	0712      	lsls	r2, r2, #28
 8000f42:	d401      	bmi.n	8000f48 <__ssvfiscanf_r+0x50>
 8000f44:	462a      	mov	r2, r5
 8000f46:	e7ec      	b.n	8000f22 <__ssvfiscanf_r+0x2a>
 8000f48:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	3201      	adds	r2, #1
 8000f4e:	9245      	str	r2, [sp, #276]	; 0x114
 8000f50:	6862      	ldr	r2, [r4, #4]
 8000f52:	6023      	str	r3, [r4, #0]
 8000f54:	3a01      	subs	r2, #1
 8000f56:	6062      	str	r2, [r4, #4]
 8000f58:	e7ec      	b.n	8000f34 <__ssvfiscanf_r+0x3c>
 8000f5a:	4621      	mov	r1, r4
 8000f5c:	4630      	mov	r0, r6
 8000f5e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8000f60:	4798      	blx	r3
 8000f62:	2800      	cmp	r0, #0
 8000f64:	d0e9      	beq.n	8000f3a <__ssvfiscanf_r+0x42>
 8000f66:	e7ed      	b.n	8000f44 <__ssvfiscanf_r+0x4c>
 8000f68:	2b25      	cmp	r3, #37	; 0x25
 8000f6a:	d012      	beq.n	8000f92 <__ssvfiscanf_r+0x9a>
 8000f6c:	469a      	mov	sl, r3
 8000f6e:	6863      	ldr	r3, [r4, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f340 8092 	ble.w	800109a <__ssvfiscanf_r+0x1a2>
 8000f76:	6822      	ldr	r2, [r4, #0]
 8000f78:	7813      	ldrb	r3, [r2, #0]
 8000f7a:	4553      	cmp	r3, sl
 8000f7c:	f040 812f 	bne.w	80011de <__ssvfiscanf_r+0x2e6>
 8000f80:	6863      	ldr	r3, [r4, #4]
 8000f82:	3201      	adds	r2, #1
 8000f84:	3b01      	subs	r3, #1
 8000f86:	6063      	str	r3, [r4, #4]
 8000f88:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8000f8a:	6022      	str	r2, [r4, #0]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	9345      	str	r3, [sp, #276]	; 0x114
 8000f90:	e7d8      	b.n	8000f44 <__ssvfiscanf_r+0x4c>
 8000f92:	9141      	str	r1, [sp, #260]	; 0x104
 8000f94:	9143      	str	r1, [sp, #268]	; 0x10c
 8000f96:	7853      	ldrb	r3, [r2, #1]
 8000f98:	2b2a      	cmp	r3, #42	; 0x2a
 8000f9a:	bf04      	itt	eq
 8000f9c:	2310      	moveq	r3, #16
 8000f9e:	1c95      	addeq	r5, r2, #2
 8000fa0:	f04f 020a 	mov.w	r2, #10
 8000fa4:	bf08      	it	eq
 8000fa6:	9341      	streq	r3, [sp, #260]	; 0x104
 8000fa8:	46aa      	mov	sl, r5
 8000faa:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8000fae:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8000fb2:	2b09      	cmp	r3, #9
 8000fb4:	d91c      	bls.n	8000ff0 <__ssvfiscanf_r+0xf8>
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	487d      	ldr	r0, [pc, #500]	; (80011b0 <__ssvfiscanf_r+0x2b8>)
 8000fba:	f000 fe61 	bl	8001c80 <memchr>
 8000fbe:	b138      	cbz	r0, 8000fd0 <__ssvfiscanf_r+0xd8>
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	4655      	mov	r5, sl
 8000fc4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8000fc6:	eba0 0009 	sub.w	r0, r0, r9
 8000fca:	4083      	lsls	r3, r0
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	9341      	str	r3, [sp, #260]	; 0x104
 8000fd0:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000fd4:	2b78      	cmp	r3, #120	; 0x78
 8000fd6:	d806      	bhi.n	8000fe6 <__ssvfiscanf_r+0xee>
 8000fd8:	2b57      	cmp	r3, #87	; 0x57
 8000fda:	d810      	bhi.n	8000ffe <__ssvfiscanf_r+0x106>
 8000fdc:	2b25      	cmp	r3, #37	; 0x25
 8000fde:	d0c5      	beq.n	8000f6c <__ssvfiscanf_r+0x74>
 8000fe0:	d856      	bhi.n	8001090 <__ssvfiscanf_r+0x198>
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d064      	beq.n	80010b0 <__ssvfiscanf_r+0x1b8>
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	9347      	str	r3, [sp, #284]	; 0x11c
 8000fea:	230a      	movs	r3, #10
 8000fec:	9342      	str	r3, [sp, #264]	; 0x108
 8000fee:	e075      	b.n	80010dc <__ssvfiscanf_r+0x1e4>
 8000ff0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8000ff2:	4655      	mov	r5, sl
 8000ff4:	fb02 1103 	mla	r1, r2, r3, r1
 8000ff8:	3930      	subs	r1, #48	; 0x30
 8000ffa:	9143      	str	r1, [sp, #268]	; 0x10c
 8000ffc:	e7d4      	b.n	8000fa8 <__ssvfiscanf_r+0xb0>
 8000ffe:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8001002:	2a20      	cmp	r2, #32
 8001004:	d8ef      	bhi.n	8000fe6 <__ssvfiscanf_r+0xee>
 8001006:	a101      	add	r1, pc, #4	; (adr r1, 800100c <__ssvfiscanf_r+0x114>)
 8001008:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800100c:	080010bf 	.word	0x080010bf
 8001010:	08000fe7 	.word	0x08000fe7
 8001014:	08000fe7 	.word	0x08000fe7
 8001018:	0800111d 	.word	0x0800111d
 800101c:	08000fe7 	.word	0x08000fe7
 8001020:	08000fe7 	.word	0x08000fe7
 8001024:	08000fe7 	.word	0x08000fe7
 8001028:	08000fe7 	.word	0x08000fe7
 800102c:	08000fe7 	.word	0x08000fe7
 8001030:	08000fe7 	.word	0x08000fe7
 8001034:	08000fe7 	.word	0x08000fe7
 8001038:	08001133 	.word	0x08001133
 800103c:	08001119 	.word	0x08001119
 8001040:	08001097 	.word	0x08001097
 8001044:	08001097 	.word	0x08001097
 8001048:	08001097 	.word	0x08001097
 800104c:	08000fe7 	.word	0x08000fe7
 8001050:	080010d5 	.word	0x080010d5
 8001054:	08000fe7 	.word	0x08000fe7
 8001058:	08000fe7 	.word	0x08000fe7
 800105c:	08000fe7 	.word	0x08000fe7
 8001060:	08000fe7 	.word	0x08000fe7
 8001064:	08001143 	.word	0x08001143
 8001068:	08001111 	.word	0x08001111
 800106c:	080010b7 	.word	0x080010b7
 8001070:	08000fe7 	.word	0x08000fe7
 8001074:	08000fe7 	.word	0x08000fe7
 8001078:	0800113f 	.word	0x0800113f
 800107c:	08000fe7 	.word	0x08000fe7
 8001080:	08001119 	.word	0x08001119
 8001084:	08000fe7 	.word	0x08000fe7
 8001088:	08000fe7 	.word	0x08000fe7
 800108c:	080010bf 	.word	0x080010bf
 8001090:	3b45      	subs	r3, #69	; 0x45
 8001092:	2b02      	cmp	r3, #2
 8001094:	d8a7      	bhi.n	8000fe6 <__ssvfiscanf_r+0xee>
 8001096:	2305      	movs	r3, #5
 8001098:	e01f      	b.n	80010da <__ssvfiscanf_r+0x1e2>
 800109a:	4621      	mov	r1, r4
 800109c:	4630      	mov	r0, r6
 800109e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80010a0:	4798      	blx	r3
 80010a2:	2800      	cmp	r0, #0
 80010a4:	f43f af67 	beq.w	8000f76 <__ssvfiscanf_r+0x7e>
 80010a8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80010aa:	2800      	cmp	r0, #0
 80010ac:	f040 808d 	bne.w	80011ca <__ssvfiscanf_r+0x2d2>
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010b4:	e08f      	b.n	80011d6 <__ssvfiscanf_r+0x2de>
 80010b6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80010b8:	f042 0220 	orr.w	r2, r2, #32
 80010bc:	9241      	str	r2, [sp, #260]	; 0x104
 80010be:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80010c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010c4:	9241      	str	r2, [sp, #260]	; 0x104
 80010c6:	2210      	movs	r2, #16
 80010c8:	2b6f      	cmp	r3, #111	; 0x6f
 80010ca:	bf34      	ite	cc
 80010cc:	2303      	movcc	r3, #3
 80010ce:	2304      	movcs	r3, #4
 80010d0:	9242      	str	r2, [sp, #264]	; 0x108
 80010d2:	e002      	b.n	80010da <__ssvfiscanf_r+0x1e2>
 80010d4:	2300      	movs	r3, #0
 80010d6:	9342      	str	r3, [sp, #264]	; 0x108
 80010d8:	2303      	movs	r3, #3
 80010da:	9347      	str	r3, [sp, #284]	; 0x11c
 80010dc:	6863      	ldr	r3, [r4, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	dd3d      	ble.n	800115e <__ssvfiscanf_r+0x266>
 80010e2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80010e4:	0659      	lsls	r1, r3, #25
 80010e6:	d404      	bmi.n	80010f2 <__ssvfiscanf_r+0x1fa>
 80010e8:	6823      	ldr	r3, [r4, #0]
 80010ea:	781a      	ldrb	r2, [r3, #0]
 80010ec:	5cba      	ldrb	r2, [r7, r2]
 80010ee:	0712      	lsls	r2, r2, #28
 80010f0:	d43c      	bmi.n	800116c <__ssvfiscanf_r+0x274>
 80010f2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	dc4b      	bgt.n	8001190 <__ssvfiscanf_r+0x298>
 80010f8:	466b      	mov	r3, sp
 80010fa:	4622      	mov	r2, r4
 80010fc:	4630      	mov	r0, r6
 80010fe:	a941      	add	r1, sp, #260	; 0x104
 8001100:	f000 faa6 	bl	8001650 <_scanf_chars>
 8001104:	2801      	cmp	r0, #1
 8001106:	d06a      	beq.n	80011de <__ssvfiscanf_r+0x2e6>
 8001108:	2802      	cmp	r0, #2
 800110a:	f47f af1b 	bne.w	8000f44 <__ssvfiscanf_r+0x4c>
 800110e:	e7cb      	b.n	80010a8 <__ssvfiscanf_r+0x1b0>
 8001110:	2308      	movs	r3, #8
 8001112:	9342      	str	r3, [sp, #264]	; 0x108
 8001114:	2304      	movs	r3, #4
 8001116:	e7e0      	b.n	80010da <__ssvfiscanf_r+0x1e2>
 8001118:	220a      	movs	r2, #10
 800111a:	e7d5      	b.n	80010c8 <__ssvfiscanf_r+0x1d0>
 800111c:	4629      	mov	r1, r5
 800111e:	4640      	mov	r0, r8
 8001120:	f000 fbe2 	bl	80018e8 <__sccl>
 8001124:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8001126:	4605      	mov	r5, r0
 8001128:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800112c:	9341      	str	r3, [sp, #260]	; 0x104
 800112e:	2301      	movs	r3, #1
 8001130:	e7d3      	b.n	80010da <__ssvfiscanf_r+0x1e2>
 8001132:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8001134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001138:	9341      	str	r3, [sp, #260]	; 0x104
 800113a:	2300      	movs	r3, #0
 800113c:	e7cd      	b.n	80010da <__ssvfiscanf_r+0x1e2>
 800113e:	2302      	movs	r3, #2
 8001140:	e7cb      	b.n	80010da <__ssvfiscanf_r+0x1e2>
 8001142:	9841      	ldr	r0, [sp, #260]	; 0x104
 8001144:	06c3      	lsls	r3, r0, #27
 8001146:	f53f aefd 	bmi.w	8000f44 <__ssvfiscanf_r+0x4c>
 800114a:	9b00      	ldr	r3, [sp, #0]
 800114c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800114e:	1d19      	adds	r1, r3, #4
 8001150:	9100      	str	r1, [sp, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	07c0      	lsls	r0, r0, #31
 8001156:	bf4c      	ite	mi
 8001158:	801a      	strhmi	r2, [r3, #0]
 800115a:	601a      	strpl	r2, [r3, #0]
 800115c:	e6f2      	b.n	8000f44 <__ssvfiscanf_r+0x4c>
 800115e:	4621      	mov	r1, r4
 8001160:	4630      	mov	r0, r6
 8001162:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8001164:	4798      	blx	r3
 8001166:	2800      	cmp	r0, #0
 8001168:	d0bb      	beq.n	80010e2 <__ssvfiscanf_r+0x1ea>
 800116a:	e79d      	b.n	80010a8 <__ssvfiscanf_r+0x1b0>
 800116c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800116e:	3201      	adds	r2, #1
 8001170:	9245      	str	r2, [sp, #276]	; 0x114
 8001172:	6862      	ldr	r2, [r4, #4]
 8001174:	3a01      	subs	r2, #1
 8001176:	2a00      	cmp	r2, #0
 8001178:	6062      	str	r2, [r4, #4]
 800117a:	dd02      	ble.n	8001182 <__ssvfiscanf_r+0x28a>
 800117c:	3301      	adds	r3, #1
 800117e:	6023      	str	r3, [r4, #0]
 8001180:	e7b2      	b.n	80010e8 <__ssvfiscanf_r+0x1f0>
 8001182:	4621      	mov	r1, r4
 8001184:	4630      	mov	r0, r6
 8001186:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8001188:	4798      	blx	r3
 800118a:	2800      	cmp	r0, #0
 800118c:	d0ac      	beq.n	80010e8 <__ssvfiscanf_r+0x1f0>
 800118e:	e78b      	b.n	80010a8 <__ssvfiscanf_r+0x1b0>
 8001190:	2b04      	cmp	r3, #4
 8001192:	dc0f      	bgt.n	80011b4 <__ssvfiscanf_r+0x2bc>
 8001194:	466b      	mov	r3, sp
 8001196:	4622      	mov	r2, r4
 8001198:	4630      	mov	r0, r6
 800119a:	a941      	add	r1, sp, #260	; 0x104
 800119c:	f000 fab2 	bl	8001704 <_scanf_i>
 80011a0:	e7b0      	b.n	8001104 <__ssvfiscanf_r+0x20c>
 80011a2:	bf00      	nop
 80011a4:	08000e45 	.word	0x08000e45
 80011a8:	08000ebf 	.word	0x08000ebf
 80011ac:	08001d9b 	.word	0x08001d9b
 80011b0:	08001d52 	.word	0x08001d52
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <__ssvfiscanf_r+0x2ec>)
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f43f aec4 	beq.w	8000f44 <__ssvfiscanf_r+0x4c>
 80011bc:	466b      	mov	r3, sp
 80011be:	4622      	mov	r2, r4
 80011c0:	4630      	mov	r0, r6
 80011c2:	a941      	add	r1, sp, #260	; 0x104
 80011c4:	f3af 8000 	nop.w
 80011c8:	e79c      	b.n	8001104 <__ssvfiscanf_r+0x20c>
 80011ca:	89a3      	ldrh	r3, [r4, #12]
 80011cc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80011d0:	bf18      	it	ne
 80011d2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80011d6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80011da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011de:	9844      	ldr	r0, [sp, #272]	; 0x110
 80011e0:	e7f9      	b.n	80011d6 <__ssvfiscanf_r+0x2de>
 80011e2:	bf00      	nop
 80011e4:	00000000 	.word	0x00000000

080011e8 <sbrk_aligned>:
 80011e8:	b570      	push	{r4, r5, r6, lr}
 80011ea:	4e0e      	ldr	r6, [pc, #56]	; (8001224 <sbrk_aligned+0x3c>)
 80011ec:	460c      	mov	r4, r1
 80011ee:	6831      	ldr	r1, [r6, #0]
 80011f0:	4605      	mov	r5, r0
 80011f2:	b911      	cbnz	r1, 80011fa <sbrk_aligned+0x12>
 80011f4:	f000 fd34 	bl	8001c60 <_sbrk_r>
 80011f8:	6030      	str	r0, [r6, #0]
 80011fa:	4621      	mov	r1, r4
 80011fc:	4628      	mov	r0, r5
 80011fe:	f000 fd2f 	bl	8001c60 <_sbrk_r>
 8001202:	1c43      	adds	r3, r0, #1
 8001204:	d00a      	beq.n	800121c <sbrk_aligned+0x34>
 8001206:	1cc4      	adds	r4, r0, #3
 8001208:	f024 0403 	bic.w	r4, r4, #3
 800120c:	42a0      	cmp	r0, r4
 800120e:	d007      	beq.n	8001220 <sbrk_aligned+0x38>
 8001210:	1a21      	subs	r1, r4, r0
 8001212:	4628      	mov	r0, r5
 8001214:	f000 fd24 	bl	8001c60 <_sbrk_r>
 8001218:	3001      	adds	r0, #1
 800121a:	d101      	bne.n	8001220 <sbrk_aligned+0x38>
 800121c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001220:	4620      	mov	r0, r4
 8001222:	bd70      	pop	{r4, r5, r6, pc}
 8001224:	200003b8 	.word	0x200003b8

08001228 <_malloc_r>:
 8001228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800122c:	1ccd      	adds	r5, r1, #3
 800122e:	f025 0503 	bic.w	r5, r5, #3
 8001232:	3508      	adds	r5, #8
 8001234:	2d0c      	cmp	r5, #12
 8001236:	bf38      	it	cc
 8001238:	250c      	movcc	r5, #12
 800123a:	2d00      	cmp	r5, #0
 800123c:	4607      	mov	r7, r0
 800123e:	db01      	blt.n	8001244 <_malloc_r+0x1c>
 8001240:	42a9      	cmp	r1, r5
 8001242:	d905      	bls.n	8001250 <_malloc_r+0x28>
 8001244:	230c      	movs	r3, #12
 8001246:	2600      	movs	r6, #0
 8001248:	603b      	str	r3, [r7, #0]
 800124a:	4630      	mov	r0, r6
 800124c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001250:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001324 <_malloc_r+0xfc>
 8001254:	f000 fb82 	bl	800195c <__malloc_lock>
 8001258:	f8d8 3000 	ldr.w	r3, [r8]
 800125c:	461c      	mov	r4, r3
 800125e:	bb5c      	cbnz	r4, 80012b8 <_malloc_r+0x90>
 8001260:	4629      	mov	r1, r5
 8001262:	4638      	mov	r0, r7
 8001264:	f7ff ffc0 	bl	80011e8 <sbrk_aligned>
 8001268:	1c43      	adds	r3, r0, #1
 800126a:	4604      	mov	r4, r0
 800126c:	d155      	bne.n	800131a <_malloc_r+0xf2>
 800126e:	f8d8 4000 	ldr.w	r4, [r8]
 8001272:	4626      	mov	r6, r4
 8001274:	2e00      	cmp	r6, #0
 8001276:	d145      	bne.n	8001304 <_malloc_r+0xdc>
 8001278:	2c00      	cmp	r4, #0
 800127a:	d048      	beq.n	800130e <_malloc_r+0xe6>
 800127c:	6823      	ldr	r3, [r4, #0]
 800127e:	4631      	mov	r1, r6
 8001280:	4638      	mov	r0, r7
 8001282:	eb04 0903 	add.w	r9, r4, r3
 8001286:	f000 fceb 	bl	8001c60 <_sbrk_r>
 800128a:	4581      	cmp	r9, r0
 800128c:	d13f      	bne.n	800130e <_malloc_r+0xe6>
 800128e:	6821      	ldr	r1, [r4, #0]
 8001290:	4638      	mov	r0, r7
 8001292:	1a6d      	subs	r5, r5, r1
 8001294:	4629      	mov	r1, r5
 8001296:	f7ff ffa7 	bl	80011e8 <sbrk_aligned>
 800129a:	3001      	adds	r0, #1
 800129c:	d037      	beq.n	800130e <_malloc_r+0xe6>
 800129e:	6823      	ldr	r3, [r4, #0]
 80012a0:	442b      	add	r3, r5
 80012a2:	6023      	str	r3, [r4, #0]
 80012a4:	f8d8 3000 	ldr.w	r3, [r8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d038      	beq.n	800131e <_malloc_r+0xf6>
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	42a2      	cmp	r2, r4
 80012b0:	d12b      	bne.n	800130a <_malloc_r+0xe2>
 80012b2:	2200      	movs	r2, #0
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	e00f      	b.n	80012d8 <_malloc_r+0xb0>
 80012b8:	6822      	ldr	r2, [r4, #0]
 80012ba:	1b52      	subs	r2, r2, r5
 80012bc:	d41f      	bmi.n	80012fe <_malloc_r+0xd6>
 80012be:	2a0b      	cmp	r2, #11
 80012c0:	d917      	bls.n	80012f2 <_malloc_r+0xca>
 80012c2:	1961      	adds	r1, r4, r5
 80012c4:	42a3      	cmp	r3, r4
 80012c6:	6025      	str	r5, [r4, #0]
 80012c8:	bf18      	it	ne
 80012ca:	6059      	strne	r1, [r3, #4]
 80012cc:	6863      	ldr	r3, [r4, #4]
 80012ce:	bf08      	it	eq
 80012d0:	f8c8 1000 	streq.w	r1, [r8]
 80012d4:	5162      	str	r2, [r4, r5]
 80012d6:	604b      	str	r3, [r1, #4]
 80012d8:	4638      	mov	r0, r7
 80012da:	f104 060b 	add.w	r6, r4, #11
 80012de:	f000 fb43 	bl	8001968 <__malloc_unlock>
 80012e2:	f026 0607 	bic.w	r6, r6, #7
 80012e6:	1d23      	adds	r3, r4, #4
 80012e8:	1af2      	subs	r2, r6, r3
 80012ea:	d0ae      	beq.n	800124a <_malloc_r+0x22>
 80012ec:	1b9b      	subs	r3, r3, r6
 80012ee:	50a3      	str	r3, [r4, r2]
 80012f0:	e7ab      	b.n	800124a <_malloc_r+0x22>
 80012f2:	42a3      	cmp	r3, r4
 80012f4:	6862      	ldr	r2, [r4, #4]
 80012f6:	d1dd      	bne.n	80012b4 <_malloc_r+0x8c>
 80012f8:	f8c8 2000 	str.w	r2, [r8]
 80012fc:	e7ec      	b.n	80012d8 <_malloc_r+0xb0>
 80012fe:	4623      	mov	r3, r4
 8001300:	6864      	ldr	r4, [r4, #4]
 8001302:	e7ac      	b.n	800125e <_malloc_r+0x36>
 8001304:	4634      	mov	r4, r6
 8001306:	6876      	ldr	r6, [r6, #4]
 8001308:	e7b4      	b.n	8001274 <_malloc_r+0x4c>
 800130a:	4613      	mov	r3, r2
 800130c:	e7cc      	b.n	80012a8 <_malloc_r+0x80>
 800130e:	230c      	movs	r3, #12
 8001310:	4638      	mov	r0, r7
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	f000 fb28 	bl	8001968 <__malloc_unlock>
 8001318:	e797      	b.n	800124a <_malloc_r+0x22>
 800131a:	6025      	str	r5, [r4, #0]
 800131c:	e7dc      	b.n	80012d8 <_malloc_r+0xb0>
 800131e:	605b      	str	r3, [r3, #4]
 8001320:	deff      	udf	#255	; 0xff
 8001322:	bf00      	nop
 8001324:	200003b4 	.word	0x200003b4

08001328 <_printf_common>:
 8001328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800132c:	4616      	mov	r6, r2
 800132e:	4699      	mov	r9, r3
 8001330:	688a      	ldr	r2, [r1, #8]
 8001332:	690b      	ldr	r3, [r1, #16]
 8001334:	4607      	mov	r7, r0
 8001336:	4293      	cmp	r3, r2
 8001338:	bfb8      	it	lt
 800133a:	4613      	movlt	r3, r2
 800133c:	6033      	str	r3, [r6, #0]
 800133e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001342:	460c      	mov	r4, r1
 8001344:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001348:	b10a      	cbz	r2, 800134e <_printf_common+0x26>
 800134a:	3301      	adds	r3, #1
 800134c:	6033      	str	r3, [r6, #0]
 800134e:	6823      	ldr	r3, [r4, #0]
 8001350:	0699      	lsls	r1, r3, #26
 8001352:	bf42      	ittt	mi
 8001354:	6833      	ldrmi	r3, [r6, #0]
 8001356:	3302      	addmi	r3, #2
 8001358:	6033      	strmi	r3, [r6, #0]
 800135a:	6825      	ldr	r5, [r4, #0]
 800135c:	f015 0506 	ands.w	r5, r5, #6
 8001360:	d106      	bne.n	8001370 <_printf_common+0x48>
 8001362:	f104 0a19 	add.w	sl, r4, #25
 8001366:	68e3      	ldr	r3, [r4, #12]
 8001368:	6832      	ldr	r2, [r6, #0]
 800136a:	1a9b      	subs	r3, r3, r2
 800136c:	42ab      	cmp	r3, r5
 800136e:	dc2b      	bgt.n	80013c8 <_printf_common+0xa0>
 8001370:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001374:	1e13      	subs	r3, r2, #0
 8001376:	6822      	ldr	r2, [r4, #0]
 8001378:	bf18      	it	ne
 800137a:	2301      	movne	r3, #1
 800137c:	0692      	lsls	r2, r2, #26
 800137e:	d430      	bmi.n	80013e2 <_printf_common+0xba>
 8001380:	4649      	mov	r1, r9
 8001382:	4638      	mov	r0, r7
 8001384:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001388:	47c0      	blx	r8
 800138a:	3001      	adds	r0, #1
 800138c:	d023      	beq.n	80013d6 <_printf_common+0xae>
 800138e:	6823      	ldr	r3, [r4, #0]
 8001390:	6922      	ldr	r2, [r4, #16]
 8001392:	f003 0306 	and.w	r3, r3, #6
 8001396:	2b04      	cmp	r3, #4
 8001398:	bf14      	ite	ne
 800139a:	2500      	movne	r5, #0
 800139c:	6833      	ldreq	r3, [r6, #0]
 800139e:	f04f 0600 	mov.w	r6, #0
 80013a2:	bf08      	it	eq
 80013a4:	68e5      	ldreq	r5, [r4, #12]
 80013a6:	f104 041a 	add.w	r4, r4, #26
 80013aa:	bf08      	it	eq
 80013ac:	1aed      	subeq	r5, r5, r3
 80013ae:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80013b2:	bf08      	it	eq
 80013b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80013b8:	4293      	cmp	r3, r2
 80013ba:	bfc4      	itt	gt
 80013bc:	1a9b      	subgt	r3, r3, r2
 80013be:	18ed      	addgt	r5, r5, r3
 80013c0:	42b5      	cmp	r5, r6
 80013c2:	d11a      	bne.n	80013fa <_printf_common+0xd2>
 80013c4:	2000      	movs	r0, #0
 80013c6:	e008      	b.n	80013da <_printf_common+0xb2>
 80013c8:	2301      	movs	r3, #1
 80013ca:	4652      	mov	r2, sl
 80013cc:	4649      	mov	r1, r9
 80013ce:	4638      	mov	r0, r7
 80013d0:	47c0      	blx	r8
 80013d2:	3001      	adds	r0, #1
 80013d4:	d103      	bne.n	80013de <_printf_common+0xb6>
 80013d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013de:	3501      	adds	r5, #1
 80013e0:	e7c1      	b.n	8001366 <_printf_common+0x3e>
 80013e2:	2030      	movs	r0, #48	; 0x30
 80013e4:	18e1      	adds	r1, r4, r3
 80013e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80013ea:	1c5a      	adds	r2, r3, #1
 80013ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80013f0:	4422      	add	r2, r4
 80013f2:	3302      	adds	r3, #2
 80013f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80013f8:	e7c2      	b.n	8001380 <_printf_common+0x58>
 80013fa:	2301      	movs	r3, #1
 80013fc:	4622      	mov	r2, r4
 80013fe:	4649      	mov	r1, r9
 8001400:	4638      	mov	r0, r7
 8001402:	47c0      	blx	r8
 8001404:	3001      	adds	r0, #1
 8001406:	d0e6      	beq.n	80013d6 <_printf_common+0xae>
 8001408:	3601      	adds	r6, #1
 800140a:	e7d9      	b.n	80013c0 <_printf_common+0x98>

0800140c <_printf_i>:
 800140c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001410:	7e0f      	ldrb	r7, [r1, #24]
 8001412:	4691      	mov	r9, r2
 8001414:	2f78      	cmp	r7, #120	; 0x78
 8001416:	4680      	mov	r8, r0
 8001418:	460c      	mov	r4, r1
 800141a:	469a      	mov	sl, r3
 800141c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800141e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001422:	d807      	bhi.n	8001434 <_printf_i+0x28>
 8001424:	2f62      	cmp	r7, #98	; 0x62
 8001426:	d80a      	bhi.n	800143e <_printf_i+0x32>
 8001428:	2f00      	cmp	r7, #0
 800142a:	f000 80d5 	beq.w	80015d8 <_printf_i+0x1cc>
 800142e:	2f58      	cmp	r7, #88	; 0x58
 8001430:	f000 80c1 	beq.w	80015b6 <_printf_i+0x1aa>
 8001434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001438:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800143c:	e03a      	b.n	80014b4 <_printf_i+0xa8>
 800143e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001442:	2b15      	cmp	r3, #21
 8001444:	d8f6      	bhi.n	8001434 <_printf_i+0x28>
 8001446:	a101      	add	r1, pc, #4	; (adr r1, 800144c <_printf_i+0x40>)
 8001448:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800144c:	080014a5 	.word	0x080014a5
 8001450:	080014b9 	.word	0x080014b9
 8001454:	08001435 	.word	0x08001435
 8001458:	08001435 	.word	0x08001435
 800145c:	08001435 	.word	0x08001435
 8001460:	08001435 	.word	0x08001435
 8001464:	080014b9 	.word	0x080014b9
 8001468:	08001435 	.word	0x08001435
 800146c:	08001435 	.word	0x08001435
 8001470:	08001435 	.word	0x08001435
 8001474:	08001435 	.word	0x08001435
 8001478:	080015bf 	.word	0x080015bf
 800147c:	080014e5 	.word	0x080014e5
 8001480:	08001579 	.word	0x08001579
 8001484:	08001435 	.word	0x08001435
 8001488:	08001435 	.word	0x08001435
 800148c:	080015e1 	.word	0x080015e1
 8001490:	08001435 	.word	0x08001435
 8001494:	080014e5 	.word	0x080014e5
 8001498:	08001435 	.word	0x08001435
 800149c:	08001435 	.word	0x08001435
 80014a0:	08001581 	.word	0x08001581
 80014a4:	682b      	ldr	r3, [r5, #0]
 80014a6:	1d1a      	adds	r2, r3, #4
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	602a      	str	r2, [r5, #0]
 80014ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80014b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80014b4:	2301      	movs	r3, #1
 80014b6:	e0a0      	b.n	80015fa <_printf_i+0x1ee>
 80014b8:	6820      	ldr	r0, [r4, #0]
 80014ba:	682b      	ldr	r3, [r5, #0]
 80014bc:	0607      	lsls	r7, r0, #24
 80014be:	f103 0104 	add.w	r1, r3, #4
 80014c2:	6029      	str	r1, [r5, #0]
 80014c4:	d501      	bpl.n	80014ca <_printf_i+0xbe>
 80014c6:	681e      	ldr	r6, [r3, #0]
 80014c8:	e003      	b.n	80014d2 <_printf_i+0xc6>
 80014ca:	0646      	lsls	r6, r0, #25
 80014cc:	d5fb      	bpl.n	80014c6 <_printf_i+0xba>
 80014ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80014d2:	2e00      	cmp	r6, #0
 80014d4:	da03      	bge.n	80014de <_printf_i+0xd2>
 80014d6:	232d      	movs	r3, #45	; 0x2d
 80014d8:	4276      	negs	r6, r6
 80014da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80014de:	230a      	movs	r3, #10
 80014e0:	4859      	ldr	r0, [pc, #356]	; (8001648 <_printf_i+0x23c>)
 80014e2:	e012      	b.n	800150a <_printf_i+0xfe>
 80014e4:	682b      	ldr	r3, [r5, #0]
 80014e6:	6820      	ldr	r0, [r4, #0]
 80014e8:	1d19      	adds	r1, r3, #4
 80014ea:	6029      	str	r1, [r5, #0]
 80014ec:	0605      	lsls	r5, r0, #24
 80014ee:	d501      	bpl.n	80014f4 <_printf_i+0xe8>
 80014f0:	681e      	ldr	r6, [r3, #0]
 80014f2:	e002      	b.n	80014fa <_printf_i+0xee>
 80014f4:	0641      	lsls	r1, r0, #25
 80014f6:	d5fb      	bpl.n	80014f0 <_printf_i+0xe4>
 80014f8:	881e      	ldrh	r6, [r3, #0]
 80014fa:	2f6f      	cmp	r7, #111	; 0x6f
 80014fc:	bf0c      	ite	eq
 80014fe:	2308      	moveq	r3, #8
 8001500:	230a      	movne	r3, #10
 8001502:	4851      	ldr	r0, [pc, #324]	; (8001648 <_printf_i+0x23c>)
 8001504:	2100      	movs	r1, #0
 8001506:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800150a:	6865      	ldr	r5, [r4, #4]
 800150c:	2d00      	cmp	r5, #0
 800150e:	bfa8      	it	ge
 8001510:	6821      	ldrge	r1, [r4, #0]
 8001512:	60a5      	str	r5, [r4, #8]
 8001514:	bfa4      	itt	ge
 8001516:	f021 0104 	bicge.w	r1, r1, #4
 800151a:	6021      	strge	r1, [r4, #0]
 800151c:	b90e      	cbnz	r6, 8001522 <_printf_i+0x116>
 800151e:	2d00      	cmp	r5, #0
 8001520:	d04b      	beq.n	80015ba <_printf_i+0x1ae>
 8001522:	4615      	mov	r5, r2
 8001524:	fbb6 f1f3 	udiv	r1, r6, r3
 8001528:	fb03 6711 	mls	r7, r3, r1, r6
 800152c:	5dc7      	ldrb	r7, [r0, r7]
 800152e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001532:	4637      	mov	r7, r6
 8001534:	42bb      	cmp	r3, r7
 8001536:	460e      	mov	r6, r1
 8001538:	d9f4      	bls.n	8001524 <_printf_i+0x118>
 800153a:	2b08      	cmp	r3, #8
 800153c:	d10b      	bne.n	8001556 <_printf_i+0x14a>
 800153e:	6823      	ldr	r3, [r4, #0]
 8001540:	07de      	lsls	r6, r3, #31
 8001542:	d508      	bpl.n	8001556 <_printf_i+0x14a>
 8001544:	6923      	ldr	r3, [r4, #16]
 8001546:	6861      	ldr	r1, [r4, #4]
 8001548:	4299      	cmp	r1, r3
 800154a:	bfde      	ittt	le
 800154c:	2330      	movle	r3, #48	; 0x30
 800154e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001552:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001556:	1b52      	subs	r2, r2, r5
 8001558:	6122      	str	r2, [r4, #16]
 800155a:	464b      	mov	r3, r9
 800155c:	4621      	mov	r1, r4
 800155e:	4640      	mov	r0, r8
 8001560:	f8cd a000 	str.w	sl, [sp]
 8001564:	aa03      	add	r2, sp, #12
 8001566:	f7ff fedf 	bl	8001328 <_printf_common>
 800156a:	3001      	adds	r0, #1
 800156c:	d14a      	bne.n	8001604 <_printf_i+0x1f8>
 800156e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001572:	b004      	add	sp, #16
 8001574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001578:	6823      	ldr	r3, [r4, #0]
 800157a:	f043 0320 	orr.w	r3, r3, #32
 800157e:	6023      	str	r3, [r4, #0]
 8001580:	2778      	movs	r7, #120	; 0x78
 8001582:	4832      	ldr	r0, [pc, #200]	; (800164c <_printf_i+0x240>)
 8001584:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001588:	6823      	ldr	r3, [r4, #0]
 800158a:	6829      	ldr	r1, [r5, #0]
 800158c:	061f      	lsls	r7, r3, #24
 800158e:	f851 6b04 	ldr.w	r6, [r1], #4
 8001592:	d402      	bmi.n	800159a <_printf_i+0x18e>
 8001594:	065f      	lsls	r7, r3, #25
 8001596:	bf48      	it	mi
 8001598:	b2b6      	uxthmi	r6, r6
 800159a:	07df      	lsls	r7, r3, #31
 800159c:	bf48      	it	mi
 800159e:	f043 0320 	orrmi.w	r3, r3, #32
 80015a2:	6029      	str	r1, [r5, #0]
 80015a4:	bf48      	it	mi
 80015a6:	6023      	strmi	r3, [r4, #0]
 80015a8:	b91e      	cbnz	r6, 80015b2 <_printf_i+0x1a6>
 80015aa:	6823      	ldr	r3, [r4, #0]
 80015ac:	f023 0320 	bic.w	r3, r3, #32
 80015b0:	6023      	str	r3, [r4, #0]
 80015b2:	2310      	movs	r3, #16
 80015b4:	e7a6      	b.n	8001504 <_printf_i+0xf8>
 80015b6:	4824      	ldr	r0, [pc, #144]	; (8001648 <_printf_i+0x23c>)
 80015b8:	e7e4      	b.n	8001584 <_printf_i+0x178>
 80015ba:	4615      	mov	r5, r2
 80015bc:	e7bd      	b.n	800153a <_printf_i+0x12e>
 80015be:	682b      	ldr	r3, [r5, #0]
 80015c0:	6826      	ldr	r6, [r4, #0]
 80015c2:	1d18      	adds	r0, r3, #4
 80015c4:	6961      	ldr	r1, [r4, #20]
 80015c6:	6028      	str	r0, [r5, #0]
 80015c8:	0635      	lsls	r5, r6, #24
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	d501      	bpl.n	80015d2 <_printf_i+0x1c6>
 80015ce:	6019      	str	r1, [r3, #0]
 80015d0:	e002      	b.n	80015d8 <_printf_i+0x1cc>
 80015d2:	0670      	lsls	r0, r6, #25
 80015d4:	d5fb      	bpl.n	80015ce <_printf_i+0x1c2>
 80015d6:	8019      	strh	r1, [r3, #0]
 80015d8:	2300      	movs	r3, #0
 80015da:	4615      	mov	r5, r2
 80015dc:	6123      	str	r3, [r4, #16]
 80015de:	e7bc      	b.n	800155a <_printf_i+0x14e>
 80015e0:	682b      	ldr	r3, [r5, #0]
 80015e2:	2100      	movs	r1, #0
 80015e4:	1d1a      	adds	r2, r3, #4
 80015e6:	602a      	str	r2, [r5, #0]
 80015e8:	681d      	ldr	r5, [r3, #0]
 80015ea:	6862      	ldr	r2, [r4, #4]
 80015ec:	4628      	mov	r0, r5
 80015ee:	f000 fb47 	bl	8001c80 <memchr>
 80015f2:	b108      	cbz	r0, 80015f8 <_printf_i+0x1ec>
 80015f4:	1b40      	subs	r0, r0, r5
 80015f6:	6060      	str	r0, [r4, #4]
 80015f8:	6863      	ldr	r3, [r4, #4]
 80015fa:	6123      	str	r3, [r4, #16]
 80015fc:	2300      	movs	r3, #0
 80015fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001602:	e7aa      	b.n	800155a <_printf_i+0x14e>
 8001604:	462a      	mov	r2, r5
 8001606:	4649      	mov	r1, r9
 8001608:	4640      	mov	r0, r8
 800160a:	6923      	ldr	r3, [r4, #16]
 800160c:	47d0      	blx	sl
 800160e:	3001      	adds	r0, #1
 8001610:	d0ad      	beq.n	800156e <_printf_i+0x162>
 8001612:	6823      	ldr	r3, [r4, #0]
 8001614:	079b      	lsls	r3, r3, #30
 8001616:	d413      	bmi.n	8001640 <_printf_i+0x234>
 8001618:	68e0      	ldr	r0, [r4, #12]
 800161a:	9b03      	ldr	r3, [sp, #12]
 800161c:	4298      	cmp	r0, r3
 800161e:	bfb8      	it	lt
 8001620:	4618      	movlt	r0, r3
 8001622:	e7a6      	b.n	8001572 <_printf_i+0x166>
 8001624:	2301      	movs	r3, #1
 8001626:	4632      	mov	r2, r6
 8001628:	4649      	mov	r1, r9
 800162a:	4640      	mov	r0, r8
 800162c:	47d0      	blx	sl
 800162e:	3001      	adds	r0, #1
 8001630:	d09d      	beq.n	800156e <_printf_i+0x162>
 8001632:	3501      	adds	r5, #1
 8001634:	68e3      	ldr	r3, [r4, #12]
 8001636:	9903      	ldr	r1, [sp, #12]
 8001638:	1a5b      	subs	r3, r3, r1
 800163a:	42ab      	cmp	r3, r5
 800163c:	dcf2      	bgt.n	8001624 <_printf_i+0x218>
 800163e:	e7eb      	b.n	8001618 <_printf_i+0x20c>
 8001640:	2500      	movs	r5, #0
 8001642:	f104 0619 	add.w	r6, r4, #25
 8001646:	e7f5      	b.n	8001634 <_printf_i+0x228>
 8001648:	08001d5d 	.word	0x08001d5d
 800164c:	08001d6e 	.word	0x08001d6e

08001650 <_scanf_chars>:
 8001650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001654:	4615      	mov	r5, r2
 8001656:	688a      	ldr	r2, [r1, #8]
 8001658:	4680      	mov	r8, r0
 800165a:	460c      	mov	r4, r1
 800165c:	b932      	cbnz	r2, 800166c <_scanf_chars+0x1c>
 800165e:	698a      	ldr	r2, [r1, #24]
 8001660:	2a00      	cmp	r2, #0
 8001662:	bf0c      	ite	eq
 8001664:	2201      	moveq	r2, #1
 8001666:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800166a:	608a      	str	r2, [r1, #8]
 800166c:	2700      	movs	r7, #0
 800166e:	6822      	ldr	r2, [r4, #0]
 8001670:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8001700 <_scanf_chars+0xb0>
 8001674:	06d1      	lsls	r1, r2, #27
 8001676:	bf5f      	itttt	pl
 8001678:	681a      	ldrpl	r2, [r3, #0]
 800167a:	1d11      	addpl	r1, r2, #4
 800167c:	6019      	strpl	r1, [r3, #0]
 800167e:	6816      	ldrpl	r6, [r2, #0]
 8001680:	69a0      	ldr	r0, [r4, #24]
 8001682:	b188      	cbz	r0, 80016a8 <_scanf_chars+0x58>
 8001684:	2801      	cmp	r0, #1
 8001686:	d107      	bne.n	8001698 <_scanf_chars+0x48>
 8001688:	682b      	ldr	r3, [r5, #0]
 800168a:	781a      	ldrb	r2, [r3, #0]
 800168c:	6963      	ldr	r3, [r4, #20]
 800168e:	5c9b      	ldrb	r3, [r3, r2]
 8001690:	b953      	cbnz	r3, 80016a8 <_scanf_chars+0x58>
 8001692:	2f00      	cmp	r7, #0
 8001694:	d031      	beq.n	80016fa <_scanf_chars+0xaa>
 8001696:	e022      	b.n	80016de <_scanf_chars+0x8e>
 8001698:	2802      	cmp	r0, #2
 800169a:	d120      	bne.n	80016de <_scanf_chars+0x8e>
 800169c:	682b      	ldr	r3, [r5, #0]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80016a4:	071b      	lsls	r3, r3, #28
 80016a6:	d41a      	bmi.n	80016de <_scanf_chars+0x8e>
 80016a8:	6823      	ldr	r3, [r4, #0]
 80016aa:	3701      	adds	r7, #1
 80016ac:	06da      	lsls	r2, r3, #27
 80016ae:	bf5e      	ittt	pl
 80016b0:	682b      	ldrpl	r3, [r5, #0]
 80016b2:	781b      	ldrbpl	r3, [r3, #0]
 80016b4:	f806 3b01 	strbpl.w	r3, [r6], #1
 80016b8:	682a      	ldr	r2, [r5, #0]
 80016ba:	686b      	ldr	r3, [r5, #4]
 80016bc:	3201      	adds	r2, #1
 80016be:	602a      	str	r2, [r5, #0]
 80016c0:	68a2      	ldr	r2, [r4, #8]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	3a01      	subs	r2, #1
 80016c6:	606b      	str	r3, [r5, #4]
 80016c8:	60a2      	str	r2, [r4, #8]
 80016ca:	b142      	cbz	r2, 80016de <_scanf_chars+0x8e>
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	dcd7      	bgt.n	8001680 <_scanf_chars+0x30>
 80016d0:	4629      	mov	r1, r5
 80016d2:	4640      	mov	r0, r8
 80016d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80016d8:	4798      	blx	r3
 80016da:	2800      	cmp	r0, #0
 80016dc:	d0d0      	beq.n	8001680 <_scanf_chars+0x30>
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	f013 0310 	ands.w	r3, r3, #16
 80016e4:	d105      	bne.n	80016f2 <_scanf_chars+0xa2>
 80016e6:	68e2      	ldr	r2, [r4, #12]
 80016e8:	3201      	adds	r2, #1
 80016ea:	60e2      	str	r2, [r4, #12]
 80016ec:	69a2      	ldr	r2, [r4, #24]
 80016ee:	b102      	cbz	r2, 80016f2 <_scanf_chars+0xa2>
 80016f0:	7033      	strb	r3, [r6, #0]
 80016f2:	2000      	movs	r0, #0
 80016f4:	6923      	ldr	r3, [r4, #16]
 80016f6:	443b      	add	r3, r7
 80016f8:	6123      	str	r3, [r4, #16]
 80016fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016fe:	bf00      	nop
 8001700:	08001d9b 	.word	0x08001d9b

08001704 <_scanf_i>:
 8001704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001708:	460c      	mov	r4, r1
 800170a:	4698      	mov	r8, r3
 800170c:	4b72      	ldr	r3, [pc, #456]	; (80018d8 <_scanf_i+0x1d4>)
 800170e:	b087      	sub	sp, #28
 8001710:	4682      	mov	sl, r0
 8001712:	4616      	mov	r6, r2
 8001714:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001718:	ab03      	add	r3, sp, #12
 800171a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800171e:	4b6f      	ldr	r3, [pc, #444]	; (80018dc <_scanf_i+0x1d8>)
 8001720:	69a1      	ldr	r1, [r4, #24]
 8001722:	4a6f      	ldr	r2, [pc, #444]	; (80018e0 <_scanf_i+0x1dc>)
 8001724:	4627      	mov	r7, r4
 8001726:	2903      	cmp	r1, #3
 8001728:	bf18      	it	ne
 800172a:	461a      	movne	r2, r3
 800172c:	68a3      	ldr	r3, [r4, #8]
 800172e:	9201      	str	r2, [sp, #4]
 8001730:	1e5a      	subs	r2, r3, #1
 8001732:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8001736:	bf81      	itttt	hi
 8001738:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800173c:	eb03 0905 	addhi.w	r9, r3, r5
 8001740:	f240 135d 	movwhi	r3, #349	; 0x15d
 8001744:	60a3      	strhi	r3, [r4, #8]
 8001746:	f857 3b1c 	ldr.w	r3, [r7], #28
 800174a:	bf98      	it	ls
 800174c:	f04f 0900 	movls.w	r9, #0
 8001750:	463d      	mov	r5, r7
 8001752:	f04f 0b00 	mov.w	fp, #0
 8001756:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800175a:	6023      	str	r3, [r4, #0]
 800175c:	6831      	ldr	r1, [r6, #0]
 800175e:	ab03      	add	r3, sp, #12
 8001760:	2202      	movs	r2, #2
 8001762:	7809      	ldrb	r1, [r1, #0]
 8001764:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8001768:	f000 fa8a 	bl	8001c80 <memchr>
 800176c:	b328      	cbz	r0, 80017ba <_scanf_i+0xb6>
 800176e:	f1bb 0f01 	cmp.w	fp, #1
 8001772:	d159      	bne.n	8001828 <_scanf_i+0x124>
 8001774:	6862      	ldr	r2, [r4, #4]
 8001776:	b92a      	cbnz	r2, 8001784 <_scanf_i+0x80>
 8001778:	2308      	movs	r3, #8
 800177a:	6822      	ldr	r2, [r4, #0]
 800177c:	6063      	str	r3, [r4, #4]
 800177e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001782:	6022      	str	r2, [r4, #0]
 8001784:	6822      	ldr	r2, [r4, #0]
 8001786:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800178a:	6022      	str	r2, [r4, #0]
 800178c:	68a2      	ldr	r2, [r4, #8]
 800178e:	1e51      	subs	r1, r2, #1
 8001790:	60a1      	str	r1, [r4, #8]
 8001792:	b192      	cbz	r2, 80017ba <_scanf_i+0xb6>
 8001794:	6832      	ldr	r2, [r6, #0]
 8001796:	1c51      	adds	r1, r2, #1
 8001798:	6031      	str	r1, [r6, #0]
 800179a:	7812      	ldrb	r2, [r2, #0]
 800179c:	f805 2b01 	strb.w	r2, [r5], #1
 80017a0:	6872      	ldr	r2, [r6, #4]
 80017a2:	3a01      	subs	r2, #1
 80017a4:	2a00      	cmp	r2, #0
 80017a6:	6072      	str	r2, [r6, #4]
 80017a8:	dc07      	bgt.n	80017ba <_scanf_i+0xb6>
 80017aa:	4631      	mov	r1, r6
 80017ac:	4650      	mov	r0, sl
 80017ae:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80017b2:	4790      	blx	r2
 80017b4:	2800      	cmp	r0, #0
 80017b6:	f040 8085 	bne.w	80018c4 <_scanf_i+0x1c0>
 80017ba:	f10b 0b01 	add.w	fp, fp, #1
 80017be:	f1bb 0f03 	cmp.w	fp, #3
 80017c2:	d1cb      	bne.n	800175c <_scanf_i+0x58>
 80017c4:	6863      	ldr	r3, [r4, #4]
 80017c6:	b90b      	cbnz	r3, 80017cc <_scanf_i+0xc8>
 80017c8:	230a      	movs	r3, #10
 80017ca:	6063      	str	r3, [r4, #4]
 80017cc:	6863      	ldr	r3, [r4, #4]
 80017ce:	4945      	ldr	r1, [pc, #276]	; (80018e4 <_scanf_i+0x1e0>)
 80017d0:	6960      	ldr	r0, [r4, #20]
 80017d2:	1ac9      	subs	r1, r1, r3
 80017d4:	f000 f888 	bl	80018e8 <__sccl>
 80017d8:	f04f 0b00 	mov.w	fp, #0
 80017dc:	68a3      	ldr	r3, [r4, #8]
 80017de:	6822      	ldr	r2, [r4, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d03d      	beq.n	8001860 <_scanf_i+0x15c>
 80017e4:	6831      	ldr	r1, [r6, #0]
 80017e6:	6960      	ldr	r0, [r4, #20]
 80017e8:	f891 c000 	ldrb.w	ip, [r1]
 80017ec:	f810 000c 	ldrb.w	r0, [r0, ip]
 80017f0:	2800      	cmp	r0, #0
 80017f2:	d035      	beq.n	8001860 <_scanf_i+0x15c>
 80017f4:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80017f8:	d124      	bne.n	8001844 <_scanf_i+0x140>
 80017fa:	0510      	lsls	r0, r2, #20
 80017fc:	d522      	bpl.n	8001844 <_scanf_i+0x140>
 80017fe:	f10b 0b01 	add.w	fp, fp, #1
 8001802:	f1b9 0f00 	cmp.w	r9, #0
 8001806:	d003      	beq.n	8001810 <_scanf_i+0x10c>
 8001808:	3301      	adds	r3, #1
 800180a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800180e:	60a3      	str	r3, [r4, #8]
 8001810:	6873      	ldr	r3, [r6, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	2b00      	cmp	r3, #0
 8001816:	6073      	str	r3, [r6, #4]
 8001818:	dd1b      	ble.n	8001852 <_scanf_i+0x14e>
 800181a:	6833      	ldr	r3, [r6, #0]
 800181c:	3301      	adds	r3, #1
 800181e:	6033      	str	r3, [r6, #0]
 8001820:	68a3      	ldr	r3, [r4, #8]
 8001822:	3b01      	subs	r3, #1
 8001824:	60a3      	str	r3, [r4, #8]
 8001826:	e7d9      	b.n	80017dc <_scanf_i+0xd8>
 8001828:	f1bb 0f02 	cmp.w	fp, #2
 800182c:	d1ae      	bne.n	800178c <_scanf_i+0x88>
 800182e:	6822      	ldr	r2, [r4, #0]
 8001830:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8001834:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001838:	d1bf      	bne.n	80017ba <_scanf_i+0xb6>
 800183a:	2310      	movs	r3, #16
 800183c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001840:	6063      	str	r3, [r4, #4]
 8001842:	e7a2      	b.n	800178a <_scanf_i+0x86>
 8001844:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8001848:	6022      	str	r2, [r4, #0]
 800184a:	780b      	ldrb	r3, [r1, #0]
 800184c:	f805 3b01 	strb.w	r3, [r5], #1
 8001850:	e7de      	b.n	8001810 <_scanf_i+0x10c>
 8001852:	4631      	mov	r1, r6
 8001854:	4650      	mov	r0, sl
 8001856:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800185a:	4798      	blx	r3
 800185c:	2800      	cmp	r0, #0
 800185e:	d0df      	beq.n	8001820 <_scanf_i+0x11c>
 8001860:	6823      	ldr	r3, [r4, #0]
 8001862:	05d9      	lsls	r1, r3, #23
 8001864:	d50d      	bpl.n	8001882 <_scanf_i+0x17e>
 8001866:	42bd      	cmp	r5, r7
 8001868:	d909      	bls.n	800187e <_scanf_i+0x17a>
 800186a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800186e:	4632      	mov	r2, r6
 8001870:	4650      	mov	r0, sl
 8001872:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8001876:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800187a:	4798      	blx	r3
 800187c:	464d      	mov	r5, r9
 800187e:	42bd      	cmp	r5, r7
 8001880:	d028      	beq.n	80018d4 <_scanf_i+0x1d0>
 8001882:	6822      	ldr	r2, [r4, #0]
 8001884:	f012 0210 	ands.w	r2, r2, #16
 8001888:	d113      	bne.n	80018b2 <_scanf_i+0x1ae>
 800188a:	702a      	strb	r2, [r5, #0]
 800188c:	4639      	mov	r1, r7
 800188e:	6863      	ldr	r3, [r4, #4]
 8001890:	4650      	mov	r0, sl
 8001892:	9e01      	ldr	r6, [sp, #4]
 8001894:	47b0      	blx	r6
 8001896:	f8d8 3000 	ldr.w	r3, [r8]
 800189a:	6821      	ldr	r1, [r4, #0]
 800189c:	1d1a      	adds	r2, r3, #4
 800189e:	f8c8 2000 	str.w	r2, [r8]
 80018a2:	f011 0f20 	tst.w	r1, #32
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	d00f      	beq.n	80018ca <_scanf_i+0x1c6>
 80018aa:	6018      	str	r0, [r3, #0]
 80018ac:	68e3      	ldr	r3, [r4, #12]
 80018ae:	3301      	adds	r3, #1
 80018b0:	60e3      	str	r3, [r4, #12]
 80018b2:	2000      	movs	r0, #0
 80018b4:	6923      	ldr	r3, [r4, #16]
 80018b6:	1bed      	subs	r5, r5, r7
 80018b8:	445d      	add	r5, fp
 80018ba:	442b      	add	r3, r5
 80018bc:	6123      	str	r3, [r4, #16]
 80018be:	b007      	add	sp, #28
 80018c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018c4:	f04f 0b00 	mov.w	fp, #0
 80018c8:	e7ca      	b.n	8001860 <_scanf_i+0x15c>
 80018ca:	07ca      	lsls	r2, r1, #31
 80018cc:	bf4c      	ite	mi
 80018ce:	8018      	strhmi	r0, [r3, #0]
 80018d0:	6018      	strpl	r0, [r3, #0]
 80018d2:	e7eb      	b.n	80018ac <_scanf_i+0x1a8>
 80018d4:	2001      	movs	r0, #1
 80018d6:	e7f2      	b.n	80018be <_scanf_i+0x1ba>
 80018d8:	08001d40 	.word	0x08001d40
 80018dc:	08001c29 	.word	0x08001c29
 80018e0:	08001b41 	.word	0x08001b41
 80018e4:	08001d8f 	.word	0x08001d8f

080018e8 <__sccl>:
 80018e8:	b570      	push	{r4, r5, r6, lr}
 80018ea:	780b      	ldrb	r3, [r1, #0]
 80018ec:	4604      	mov	r4, r0
 80018ee:	2b5e      	cmp	r3, #94	; 0x5e
 80018f0:	bf0b      	itete	eq
 80018f2:	784b      	ldrbeq	r3, [r1, #1]
 80018f4:	1c4a      	addne	r2, r1, #1
 80018f6:	1c8a      	addeq	r2, r1, #2
 80018f8:	2100      	movne	r1, #0
 80018fa:	bf08      	it	eq
 80018fc:	2101      	moveq	r1, #1
 80018fe:	3801      	subs	r0, #1
 8001900:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8001904:	f800 1f01 	strb.w	r1, [r0, #1]!
 8001908:	42a8      	cmp	r0, r5
 800190a:	d1fb      	bne.n	8001904 <__sccl+0x1c>
 800190c:	b90b      	cbnz	r3, 8001912 <__sccl+0x2a>
 800190e:	1e50      	subs	r0, r2, #1
 8001910:	bd70      	pop	{r4, r5, r6, pc}
 8001912:	f081 0101 	eor.w	r1, r1, #1
 8001916:	4610      	mov	r0, r2
 8001918:	54e1      	strb	r1, [r4, r3]
 800191a:	4602      	mov	r2, r0
 800191c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8001920:	2d2d      	cmp	r5, #45	; 0x2d
 8001922:	d005      	beq.n	8001930 <__sccl+0x48>
 8001924:	2d5d      	cmp	r5, #93	; 0x5d
 8001926:	d016      	beq.n	8001956 <__sccl+0x6e>
 8001928:	2d00      	cmp	r5, #0
 800192a:	d0f1      	beq.n	8001910 <__sccl+0x28>
 800192c:	462b      	mov	r3, r5
 800192e:	e7f2      	b.n	8001916 <__sccl+0x2e>
 8001930:	7846      	ldrb	r6, [r0, #1]
 8001932:	2e5d      	cmp	r6, #93	; 0x5d
 8001934:	d0fa      	beq.n	800192c <__sccl+0x44>
 8001936:	42b3      	cmp	r3, r6
 8001938:	dcf8      	bgt.n	800192c <__sccl+0x44>
 800193a:	461a      	mov	r2, r3
 800193c:	3002      	adds	r0, #2
 800193e:	3201      	adds	r2, #1
 8001940:	4296      	cmp	r6, r2
 8001942:	54a1      	strb	r1, [r4, r2]
 8001944:	dcfb      	bgt.n	800193e <__sccl+0x56>
 8001946:	1af2      	subs	r2, r6, r3
 8001948:	3a01      	subs	r2, #1
 800194a:	42b3      	cmp	r3, r6
 800194c:	bfa8      	it	ge
 800194e:	2200      	movge	r2, #0
 8001950:	1c5d      	adds	r5, r3, #1
 8001952:	18ab      	adds	r3, r5, r2
 8001954:	e7e1      	b.n	800191a <__sccl+0x32>
 8001956:	4610      	mov	r0, r2
 8001958:	e7da      	b.n	8001910 <__sccl+0x28>
	...

0800195c <__malloc_lock>:
 800195c:	4801      	ldr	r0, [pc, #4]	; (8001964 <__malloc_lock+0x8>)
 800195e:	f7ff b8cf 	b.w	8000b00 <__retarget_lock_acquire_recursive>
 8001962:	bf00      	nop
 8001964:	200003b0 	.word	0x200003b0

08001968 <__malloc_unlock>:
 8001968:	4801      	ldr	r0, [pc, #4]	; (8001970 <__malloc_unlock+0x8>)
 800196a:	f7ff b8ca 	b.w	8000b02 <__retarget_lock_release_recursive>
 800196e:	bf00      	nop
 8001970:	200003b0 	.word	0x200003b0

08001974 <__submore>:
 8001974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001978:	460c      	mov	r4, r1
 800197a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800197c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001980:	4299      	cmp	r1, r3
 8001982:	d11b      	bne.n	80019bc <__submore+0x48>
 8001984:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001988:	f7ff fc4e 	bl	8001228 <_malloc_r>
 800198c:	b918      	cbnz	r0, 8001996 <__submore+0x22>
 800198e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800199a:	63a3      	str	r3, [r4, #56]	; 0x38
 800199c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80019a0:	6360      	str	r0, [r4, #52]	; 0x34
 80019a2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80019a6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80019aa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80019ae:	7043      	strb	r3, [r0, #1]
 80019b0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80019b4:	7003      	strb	r3, [r0, #0]
 80019b6:	6020      	str	r0, [r4, #0]
 80019b8:	2000      	movs	r0, #0
 80019ba:	e7ea      	b.n	8001992 <__submore+0x1e>
 80019bc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80019be:	0077      	lsls	r7, r6, #1
 80019c0:	463a      	mov	r2, r7
 80019c2:	f000 f80f 	bl	80019e4 <_realloc_r>
 80019c6:	4605      	mov	r5, r0
 80019c8:	2800      	cmp	r0, #0
 80019ca:	d0e0      	beq.n	800198e <__submore+0x1a>
 80019cc:	eb00 0806 	add.w	r8, r0, r6
 80019d0:	4601      	mov	r1, r0
 80019d2:	4632      	mov	r2, r6
 80019d4:	4640      	mov	r0, r8
 80019d6:	f000 f961 	bl	8001c9c <memcpy>
 80019da:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80019de:	f8c4 8000 	str.w	r8, [r4]
 80019e2:	e7e9      	b.n	80019b8 <__submore+0x44>

080019e4 <_realloc_r>:
 80019e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019e8:	4680      	mov	r8, r0
 80019ea:	4614      	mov	r4, r2
 80019ec:	460e      	mov	r6, r1
 80019ee:	b921      	cbnz	r1, 80019fa <_realloc_r+0x16>
 80019f0:	4611      	mov	r1, r2
 80019f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80019f6:	f7ff bc17 	b.w	8001228 <_malloc_r>
 80019fa:	b92a      	cbnz	r2, 8001a08 <_realloc_r+0x24>
 80019fc:	f7ff f882 	bl	8000b04 <_free_r>
 8001a00:	4625      	mov	r5, r4
 8001a02:	4628      	mov	r0, r5
 8001a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a08:	f000 f956 	bl	8001cb8 <_malloc_usable_size_r>
 8001a0c:	4284      	cmp	r4, r0
 8001a0e:	4607      	mov	r7, r0
 8001a10:	d802      	bhi.n	8001a18 <_realloc_r+0x34>
 8001a12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001a16:	d812      	bhi.n	8001a3e <_realloc_r+0x5a>
 8001a18:	4621      	mov	r1, r4
 8001a1a:	4640      	mov	r0, r8
 8001a1c:	f7ff fc04 	bl	8001228 <_malloc_r>
 8001a20:	4605      	mov	r5, r0
 8001a22:	2800      	cmp	r0, #0
 8001a24:	d0ed      	beq.n	8001a02 <_realloc_r+0x1e>
 8001a26:	42bc      	cmp	r4, r7
 8001a28:	4622      	mov	r2, r4
 8001a2a:	4631      	mov	r1, r6
 8001a2c:	bf28      	it	cs
 8001a2e:	463a      	movcs	r2, r7
 8001a30:	f000 f934 	bl	8001c9c <memcpy>
 8001a34:	4631      	mov	r1, r6
 8001a36:	4640      	mov	r0, r8
 8001a38:	f7ff f864 	bl	8000b04 <_free_r>
 8001a3c:	e7e1      	b.n	8001a02 <_realloc_r+0x1e>
 8001a3e:	4635      	mov	r5, r6
 8001a40:	e7df      	b.n	8001a02 <_realloc_r+0x1e>
	...

08001a44 <_strtol_l.constprop.0>:
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a4a:	4686      	mov	lr, r0
 8001a4c:	4690      	mov	r8, r2
 8001a4e:	d001      	beq.n	8001a54 <_strtol_l.constprop.0+0x10>
 8001a50:	2b24      	cmp	r3, #36	; 0x24
 8001a52:	d906      	bls.n	8001a62 <_strtol_l.constprop.0+0x1e>
 8001a54:	f7ff f82a 	bl	8000aac <__errno>
 8001a58:	2316      	movs	r3, #22
 8001a5a:	6003      	str	r3, [r0, #0]
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a62:	460d      	mov	r5, r1
 8001a64:	4835      	ldr	r0, [pc, #212]	; (8001b3c <_strtol_l.constprop.0+0xf8>)
 8001a66:	462a      	mov	r2, r5
 8001a68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001a6c:	5d06      	ldrb	r6, [r0, r4]
 8001a6e:	f016 0608 	ands.w	r6, r6, #8
 8001a72:	d1f8      	bne.n	8001a66 <_strtol_l.constprop.0+0x22>
 8001a74:	2c2d      	cmp	r4, #45	; 0x2d
 8001a76:	d12e      	bne.n	8001ad6 <_strtol_l.constprop.0+0x92>
 8001a78:	2601      	movs	r6, #1
 8001a7a:	782c      	ldrb	r4, [r5, #0]
 8001a7c:	1c95      	adds	r5, r2, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d057      	beq.n	8001b32 <_strtol_l.constprop.0+0xee>
 8001a82:	2b10      	cmp	r3, #16
 8001a84:	d109      	bne.n	8001a9a <_strtol_l.constprop.0+0x56>
 8001a86:	2c30      	cmp	r4, #48	; 0x30
 8001a88:	d107      	bne.n	8001a9a <_strtol_l.constprop.0+0x56>
 8001a8a:	782a      	ldrb	r2, [r5, #0]
 8001a8c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8001a90:	2a58      	cmp	r2, #88	; 0x58
 8001a92:	d149      	bne.n	8001b28 <_strtol_l.constprop.0+0xe4>
 8001a94:	2310      	movs	r3, #16
 8001a96:	786c      	ldrb	r4, [r5, #1]
 8001a98:	3502      	adds	r5, #2
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8001aa0:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8001aa4:	fbbc f9f3 	udiv	r9, ip, r3
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	fb03 ca19 	mls	sl, r3, r9, ip
 8001aae:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8001ab2:	2f09      	cmp	r7, #9
 8001ab4:	d814      	bhi.n	8001ae0 <_strtol_l.constprop.0+0x9c>
 8001ab6:	463c      	mov	r4, r7
 8001ab8:	42a3      	cmp	r3, r4
 8001aba:	dd20      	ble.n	8001afe <_strtol_l.constprop.0+0xba>
 8001abc:	1c57      	adds	r7, r2, #1
 8001abe:	d007      	beq.n	8001ad0 <_strtol_l.constprop.0+0x8c>
 8001ac0:	4581      	cmp	r9, r0
 8001ac2:	d319      	bcc.n	8001af8 <_strtol_l.constprop.0+0xb4>
 8001ac4:	d101      	bne.n	8001aca <_strtol_l.constprop.0+0x86>
 8001ac6:	45a2      	cmp	sl, r4
 8001ac8:	db16      	blt.n	8001af8 <_strtol_l.constprop.0+0xb4>
 8001aca:	2201      	movs	r2, #1
 8001acc:	fb00 4003 	mla	r0, r0, r3, r4
 8001ad0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001ad4:	e7eb      	b.n	8001aae <_strtol_l.constprop.0+0x6a>
 8001ad6:	2c2b      	cmp	r4, #43	; 0x2b
 8001ad8:	bf04      	itt	eq
 8001ada:	782c      	ldrbeq	r4, [r5, #0]
 8001adc:	1c95      	addeq	r5, r2, #2
 8001ade:	e7ce      	b.n	8001a7e <_strtol_l.constprop.0+0x3a>
 8001ae0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8001ae4:	2f19      	cmp	r7, #25
 8001ae6:	d801      	bhi.n	8001aec <_strtol_l.constprop.0+0xa8>
 8001ae8:	3c37      	subs	r4, #55	; 0x37
 8001aea:	e7e5      	b.n	8001ab8 <_strtol_l.constprop.0+0x74>
 8001aec:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8001af0:	2f19      	cmp	r7, #25
 8001af2:	d804      	bhi.n	8001afe <_strtol_l.constprop.0+0xba>
 8001af4:	3c57      	subs	r4, #87	; 0x57
 8001af6:	e7df      	b.n	8001ab8 <_strtol_l.constprop.0+0x74>
 8001af8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001afc:	e7e8      	b.n	8001ad0 <_strtol_l.constprop.0+0x8c>
 8001afe:	1c53      	adds	r3, r2, #1
 8001b00:	d108      	bne.n	8001b14 <_strtol_l.constprop.0+0xd0>
 8001b02:	2322      	movs	r3, #34	; 0x22
 8001b04:	4660      	mov	r0, ip
 8001b06:	f8ce 3000 	str.w	r3, [lr]
 8001b0a:	f1b8 0f00 	cmp.w	r8, #0
 8001b0e:	d0a6      	beq.n	8001a5e <_strtol_l.constprop.0+0x1a>
 8001b10:	1e69      	subs	r1, r5, #1
 8001b12:	e006      	b.n	8001b22 <_strtol_l.constprop.0+0xde>
 8001b14:	b106      	cbz	r6, 8001b18 <_strtol_l.constprop.0+0xd4>
 8001b16:	4240      	negs	r0, r0
 8001b18:	f1b8 0f00 	cmp.w	r8, #0
 8001b1c:	d09f      	beq.n	8001a5e <_strtol_l.constprop.0+0x1a>
 8001b1e:	2a00      	cmp	r2, #0
 8001b20:	d1f6      	bne.n	8001b10 <_strtol_l.constprop.0+0xcc>
 8001b22:	f8c8 1000 	str.w	r1, [r8]
 8001b26:	e79a      	b.n	8001a5e <_strtol_l.constprop.0+0x1a>
 8001b28:	2430      	movs	r4, #48	; 0x30
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1b5      	bne.n	8001a9a <_strtol_l.constprop.0+0x56>
 8001b2e:	2308      	movs	r3, #8
 8001b30:	e7b3      	b.n	8001a9a <_strtol_l.constprop.0+0x56>
 8001b32:	2c30      	cmp	r4, #48	; 0x30
 8001b34:	d0a9      	beq.n	8001a8a <_strtol_l.constprop.0+0x46>
 8001b36:	230a      	movs	r3, #10
 8001b38:	e7af      	b.n	8001a9a <_strtol_l.constprop.0+0x56>
 8001b3a:	bf00      	nop
 8001b3c:	08001d9b 	.word	0x08001d9b

08001b40 <_strtol_r>:
 8001b40:	f7ff bf80 	b.w	8001a44 <_strtol_l.constprop.0>

08001b44 <_strtoul_l.constprop.0>:
 8001b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b48:	4686      	mov	lr, r0
 8001b4a:	460d      	mov	r5, r1
 8001b4c:	4f35      	ldr	r7, [pc, #212]	; (8001c24 <_strtoul_l.constprop.0+0xe0>)
 8001b4e:	4628      	mov	r0, r5
 8001b50:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001b54:	5d3e      	ldrb	r6, [r7, r4]
 8001b56:	f016 0608 	ands.w	r6, r6, #8
 8001b5a:	d1f8      	bne.n	8001b4e <_strtoul_l.constprop.0+0xa>
 8001b5c:	2c2d      	cmp	r4, #45	; 0x2d
 8001b5e:	d130      	bne.n	8001bc2 <_strtoul_l.constprop.0+0x7e>
 8001b60:	2601      	movs	r6, #1
 8001b62:	782c      	ldrb	r4, [r5, #0]
 8001b64:	1c85      	adds	r5, r0, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d057      	beq.n	8001c1a <_strtoul_l.constprop.0+0xd6>
 8001b6a:	2b10      	cmp	r3, #16
 8001b6c:	d109      	bne.n	8001b82 <_strtoul_l.constprop.0+0x3e>
 8001b6e:	2c30      	cmp	r4, #48	; 0x30
 8001b70:	d107      	bne.n	8001b82 <_strtoul_l.constprop.0+0x3e>
 8001b72:	7828      	ldrb	r0, [r5, #0]
 8001b74:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8001b78:	2858      	cmp	r0, #88	; 0x58
 8001b7a:	d149      	bne.n	8001c10 <_strtoul_l.constprop.0+0xcc>
 8001b7c:	2310      	movs	r3, #16
 8001b7e:	786c      	ldrb	r4, [r5, #1]
 8001b80:	3502      	adds	r5, #2
 8001b82:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8001b86:	fbb8 f8f3 	udiv	r8, r8, r3
 8001b8a:	2700      	movs	r7, #0
 8001b8c:	fb03 f908 	mul.w	r9, r3, r8
 8001b90:	4638      	mov	r0, r7
 8001b92:	ea6f 0909 	mvn.w	r9, r9
 8001b96:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8001b9a:	f1bc 0f09 	cmp.w	ip, #9
 8001b9e:	d815      	bhi.n	8001bcc <_strtoul_l.constprop.0+0x88>
 8001ba0:	4664      	mov	r4, ip
 8001ba2:	42a3      	cmp	r3, r4
 8001ba4:	dd23      	ble.n	8001bee <_strtoul_l.constprop.0+0xaa>
 8001ba6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8001baa:	d007      	beq.n	8001bbc <_strtoul_l.constprop.0+0x78>
 8001bac:	4580      	cmp	r8, r0
 8001bae:	d31b      	bcc.n	8001be8 <_strtoul_l.constprop.0+0xa4>
 8001bb0:	d101      	bne.n	8001bb6 <_strtoul_l.constprop.0+0x72>
 8001bb2:	45a1      	cmp	r9, r4
 8001bb4:	db18      	blt.n	8001be8 <_strtoul_l.constprop.0+0xa4>
 8001bb6:	2701      	movs	r7, #1
 8001bb8:	fb00 4003 	mla	r0, r0, r3, r4
 8001bbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001bc0:	e7e9      	b.n	8001b96 <_strtoul_l.constprop.0+0x52>
 8001bc2:	2c2b      	cmp	r4, #43	; 0x2b
 8001bc4:	bf04      	itt	eq
 8001bc6:	782c      	ldrbeq	r4, [r5, #0]
 8001bc8:	1c85      	addeq	r5, r0, #2
 8001bca:	e7cc      	b.n	8001b66 <_strtoul_l.constprop.0+0x22>
 8001bcc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8001bd0:	f1bc 0f19 	cmp.w	ip, #25
 8001bd4:	d801      	bhi.n	8001bda <_strtoul_l.constprop.0+0x96>
 8001bd6:	3c37      	subs	r4, #55	; 0x37
 8001bd8:	e7e3      	b.n	8001ba2 <_strtoul_l.constprop.0+0x5e>
 8001bda:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8001bde:	f1bc 0f19 	cmp.w	ip, #25
 8001be2:	d804      	bhi.n	8001bee <_strtoul_l.constprop.0+0xaa>
 8001be4:	3c57      	subs	r4, #87	; 0x57
 8001be6:	e7dc      	b.n	8001ba2 <_strtoul_l.constprop.0+0x5e>
 8001be8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001bec:	e7e6      	b.n	8001bbc <_strtoul_l.constprop.0+0x78>
 8001bee:	1c7b      	adds	r3, r7, #1
 8001bf0:	d106      	bne.n	8001c00 <_strtoul_l.constprop.0+0xbc>
 8001bf2:	2322      	movs	r3, #34	; 0x22
 8001bf4:	4638      	mov	r0, r7
 8001bf6:	f8ce 3000 	str.w	r3, [lr]
 8001bfa:	b932      	cbnz	r2, 8001c0a <_strtoul_l.constprop.0+0xc6>
 8001bfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c00:	b106      	cbz	r6, 8001c04 <_strtoul_l.constprop.0+0xc0>
 8001c02:	4240      	negs	r0, r0
 8001c04:	2a00      	cmp	r2, #0
 8001c06:	d0f9      	beq.n	8001bfc <_strtoul_l.constprop.0+0xb8>
 8001c08:	b107      	cbz	r7, 8001c0c <_strtoul_l.constprop.0+0xc8>
 8001c0a:	1e69      	subs	r1, r5, #1
 8001c0c:	6011      	str	r1, [r2, #0]
 8001c0e:	e7f5      	b.n	8001bfc <_strtoul_l.constprop.0+0xb8>
 8001c10:	2430      	movs	r4, #48	; 0x30
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1b5      	bne.n	8001b82 <_strtoul_l.constprop.0+0x3e>
 8001c16:	2308      	movs	r3, #8
 8001c18:	e7b3      	b.n	8001b82 <_strtoul_l.constprop.0+0x3e>
 8001c1a:	2c30      	cmp	r4, #48	; 0x30
 8001c1c:	d0a9      	beq.n	8001b72 <_strtoul_l.constprop.0+0x2e>
 8001c1e:	230a      	movs	r3, #10
 8001c20:	e7af      	b.n	8001b82 <_strtoul_l.constprop.0+0x3e>
 8001c22:	bf00      	nop
 8001c24:	08001d9b 	.word	0x08001d9b

08001c28 <_strtoul_r>:
 8001c28:	f7ff bf8c 	b.w	8001b44 <_strtoul_l.constprop.0>

08001c2c <memmove>:
 8001c2c:	4288      	cmp	r0, r1
 8001c2e:	b510      	push	{r4, lr}
 8001c30:	eb01 0402 	add.w	r4, r1, r2
 8001c34:	d902      	bls.n	8001c3c <memmove+0x10>
 8001c36:	4284      	cmp	r4, r0
 8001c38:	4623      	mov	r3, r4
 8001c3a:	d807      	bhi.n	8001c4c <memmove+0x20>
 8001c3c:	1e43      	subs	r3, r0, #1
 8001c3e:	42a1      	cmp	r1, r4
 8001c40:	d008      	beq.n	8001c54 <memmove+0x28>
 8001c42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001c46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001c4a:	e7f8      	b.n	8001c3e <memmove+0x12>
 8001c4c:	4601      	mov	r1, r0
 8001c4e:	4402      	add	r2, r0
 8001c50:	428a      	cmp	r2, r1
 8001c52:	d100      	bne.n	8001c56 <memmove+0x2a>
 8001c54:	bd10      	pop	{r4, pc}
 8001c56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001c5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001c5e:	e7f7      	b.n	8001c50 <memmove+0x24>

08001c60 <_sbrk_r>:
 8001c60:	b538      	push	{r3, r4, r5, lr}
 8001c62:	2300      	movs	r3, #0
 8001c64:	4d05      	ldr	r5, [pc, #20]	; (8001c7c <_sbrk_r+0x1c>)
 8001c66:	4604      	mov	r4, r0
 8001c68:	4608      	mov	r0, r1
 8001c6a:	602b      	str	r3, [r5, #0]
 8001c6c:	f7fe fe58 	bl	8000920 <_sbrk>
 8001c70:	1c43      	adds	r3, r0, #1
 8001c72:	d102      	bne.n	8001c7a <_sbrk_r+0x1a>
 8001c74:	682b      	ldr	r3, [r5, #0]
 8001c76:	b103      	cbz	r3, 8001c7a <_sbrk_r+0x1a>
 8001c78:	6023      	str	r3, [r4, #0]
 8001c7a:	bd38      	pop	{r3, r4, r5, pc}
 8001c7c:	200003ac 	.word	0x200003ac

08001c80 <memchr>:
 8001c80:	4603      	mov	r3, r0
 8001c82:	b510      	push	{r4, lr}
 8001c84:	b2c9      	uxtb	r1, r1
 8001c86:	4402      	add	r2, r0
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	d101      	bne.n	8001c92 <memchr+0x12>
 8001c8e:	2000      	movs	r0, #0
 8001c90:	e003      	b.n	8001c9a <memchr+0x1a>
 8001c92:	7804      	ldrb	r4, [r0, #0]
 8001c94:	3301      	adds	r3, #1
 8001c96:	428c      	cmp	r4, r1
 8001c98:	d1f6      	bne.n	8001c88 <memchr+0x8>
 8001c9a:	bd10      	pop	{r4, pc}

08001c9c <memcpy>:
 8001c9c:	440a      	add	r2, r1
 8001c9e:	4291      	cmp	r1, r2
 8001ca0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001ca4:	d100      	bne.n	8001ca8 <memcpy+0xc>
 8001ca6:	4770      	bx	lr
 8001ca8:	b510      	push	{r4, lr}
 8001caa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001cae:	4291      	cmp	r1, r2
 8001cb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001cb4:	d1f9      	bne.n	8001caa <memcpy+0xe>
 8001cb6:	bd10      	pop	{r4, pc}

08001cb8 <_malloc_usable_size_r>:
 8001cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001cbc:	1f18      	subs	r0, r3, #4
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	bfbc      	itt	lt
 8001cc2:	580b      	ldrlt	r3, [r1, r0]
 8001cc4:	18c0      	addlt	r0, r0, r3
 8001cc6:	4770      	bx	lr

08001cc8 <_init>:
 8001cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cca:	bf00      	nop
 8001ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cce:	bc08      	pop	{r3}
 8001cd0:	469e      	mov	lr, r3
 8001cd2:	4770      	bx	lr

08001cd4 <_fini>:
 8001cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cd6:	bf00      	nop
 8001cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cda:	bc08      	pop	{r3}
 8001cdc:	469e      	mov	lr, r3
 8001cde:	4770      	bx	lr

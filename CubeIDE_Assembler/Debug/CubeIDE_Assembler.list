
CubeIDE_Assembler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000294  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c4  080003cc  000103cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c4  080003c4  000103cc  2**0
                  CONTENTS
  4 .ARM          00000000  080003c4  080003c4  000103cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c4  080003cc  000103cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c4  080003c4  000103c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003c8  080003c8  000103c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003cc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003cc  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000103cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000103f5  2**0
                  CONTENTS, READONLY
 13 .debug_line   00000120  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000006b  00000000  00000000  00010558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000023  00000000  00000000  000105c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000012  00000000  00000000  000105e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000028  00000000  00000000  000105f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000077  00000000  00000000  00010620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000001a  00000000  00000000  00010697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080003ac 	.word	0x080003ac

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080003ac 	.word	0x080003ac

08000170 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
 	ldr		r0, =_estack
 8000170:	4886      	ldr	r0, [pc, #536]	; (800038c <delay_loop+0xa>)
 	mov		sp, r0          			/* set stack pointer */
 8000172:	4685      	mov	sp, r0

	ldr 	r0, =RCC_APB2ENR			@ адрес шины, где находится тактирование
 8000174:	4886      	ldr	r0, [pc, #536]	; (8000390 <delay_loop+0xe>)
	ldr		r1, =0x14					@ включаем тактирование порта A,C (во 2-й и 4 бит RCC_APB2ENR пишем '1`)
 8000176:	f04f 0114 	mov.w	r1, #20
	str 	r1, [r0]					@ загрузка результата в регистр
 800017a:	6001      	str	r1, [r0, #0]


	ldr		r0, =GPIOA_CRL				@ адрес порта
 800017c:	4885      	ldr	r0, [pc, #532]	; (8000394 <delay_loop+0x12>)
	ldr 	r1, =0x33334433			@ битная маска настроек для Output mode 50MHz, Push-Pull ("0011")
 800017e:	4986      	ldr	r1, [pc, #536]	; (8000398 <delay_loop+0x16>)
	ldr		r2, [r0]					@ считать порт
 8000180:	6802      	ldr	r2, [r0, #0]
    bfi		r2, r1, #0, #31    			@ скопировать биты маски в позицию
 8000182:	f361 021e 	bfi	r2, r1, #0, #31
    str		r2, [r0]					@ загрузить результат в регистр настройки порта
 8000186:	6002      	str	r2, [r0, #0]

	ldr		r0, =GPIOA_CRH				@ адрес порта
 8000188:	4884      	ldr	r0, [pc, #528]	; (800039c <delay_loop+0x1a>)
	ldr 	r1, =0x03		    		@ битная маска настроек для Output mode 50MHz, Push-Pull ("0011")
 800018a:	f04f 0103 	mov.w	r1, #3
	ldr		r2, [r0]					@ считать порт
 800018e:	6802      	ldr	r2, [r0, #0]
    bfi		r2, r1, #0, #4    			@ скопировать биты маски в позицию
 8000190:	f361 0203 	bfi	r2, r1, #0, #4
    str		r2, [r0]					@ загрузить результат в регистр настройки порта
 8000194:	6002      	str	r2, [r0, #0]

	ldr		r4, =GPIOC_IDR 				@ регистр чтения порта, каждый бит - состояние порта
 8000196:	4c82      	ldr	r4, [pc, #520]	; (80003a0 <delay_loop+0x1e>)

08000198 <reset_button>:

reset_button:
	mov	r6, #0						@ будем считать инкримент нажатий кнопок
 8000198:	f04f 0600 	mov.w	r6, #0
	b switch_case					@ для выставления 0 на семисегмент.
 800019c:	e00a      	b.n	80001b4 <switch_case>

0800019e <readbutton>:

readbutton:
	ldr		r1, [r4]					@обращение по адресу и считываем, что у нас в r4
 800019e:	6821      	ldr	r1, [r4, #0]
	lsr		r1, r1, #13					@ лог сдвиг вправо на 13
 80001a0:	ea4f 3151 	mov.w	r1, r1, lsr #13
	ands	r1, #1					@ лог. "И" для сохранения 1 в 13 бите, а все остальное 0
 80001a4:	f011 0101 	ands.w	r1, r1, #1
	beq		delay
 80001a8:	f000 80e9 	beq.w	800037e <delay>
	//cmp 	r1, #0						@compare with 0 из за схемоты кнопки, которая по дефолту притянута к Vdd
	bne		readbutton					@ если !=
 80001ac:	d1f7      	bne.n	800019e <readbutton>

080001ae <increment>:
	//beq 	delay						@ если ==

increment:
	add	r6,r6,#1						@ r6+=1
 80001ae:	f106 0601 	add.w	r6, r6, #1
	b switch_case						@ go to switch
 80001b2:	e7ff      	b.n	80001b4 <switch_case>

080001b4 <switch_case>:

switch_case:

	CMP R6, #0							@ compare r6 with 1-9
 80001b4:	2e00      	cmp	r6, #0
    BEQ case_0
 80001b6:	d02c      	beq.n	8000212 <case_0>

    CMP R6, #1
 80001b8:	2e01      	cmp	r6, #1
    BEQ case_1
 80001ba:	d03f      	beq.n	800023c <case_1>

    CMP R6, #2
 80001bc:	2e02      	cmp	r6, #2
    BEQ case_2
 80001be:	d046      	beq.n	800024e <case_2>

    CMP R6, #3
 80001c0:	2e03      	cmp	r6, #3
    BEQ case_3
 80001c2:	d056      	beq.n	8000272 <case_3>

    CMP R6, #4
 80001c4:	2e04      	cmp	r6, #4
    BEQ case_4
 80001c6:	d066      	beq.n	8000296 <case_4>

    CMP R6, #5
 80001c8:	2e05      	cmp	r6, #5
    BEQ case_5
 80001ca:	d073      	beq.n	80002b4 <case_5>

    CMP R6, #6
 80001cc:	2e06      	cmp	r6, #6
    BEQ case_6
 80001ce:	f000 8083 	beq.w	80002d8 <case_6>

    CMP R6, #7
 80001d2:	2e07      	cmp	r6, #7
    BEQ case_7
 80001d4:	f000 8095 	beq.w	8000302 <case_7>

    CMP R6, #8
 80001d8:	2e08      	cmp	r6, #8
    BEQ case_8
 80001da:	f000 809e 	beq.w	800031a <case_8>

    CMP R6, #9
 80001de:	2e09      	cmp	r6, #9
    BEQ case_9
 80001e0:	f000 80b3 	beq.w	800034a <case_9>

    /* Default case */
    B default_case						@ if r6 > 9 go to default
 80001e4:	e0c6      	b.n	8000374 <default_case>

080001e6 <reset_all>:

reset_all:
	ldr		r1, =GPIO_BSRR_BR0			@ сбрасываем в '0'
 80001e6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	str 	r1, [r0]					@ загрузка в порт
 80001ea:	6001      	str	r1, [r0, #0]

	ldr		r1, =GPIO_BSRR_BR1			@ сбрасываем в '0'
 80001ec:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	str 	r1, [r0]					@ загрузка в порт
 80001f0:	6001      	str	r1, [r0, #0]

	ldr		r1, =GPIO_BSRR_BR4			@ сбрасываем в '0'
 80001f2:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
	str 	r1, [r0]					@ загрузка в порт
 80001f6:	6001      	str	r1, [r0, #0]

	ldr		r1, =GPIO_BSRR_BR5			@ сбрасываем в '0'
 80001f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
	str 	r1, [r0]					@ загрузка в порт
 80001fc:	6001      	str	r1, [r0, #0]

	ldr		r1, =GPIO_BSRR_BR6			@ сбрасываем в '0'
 80001fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
	str 	r1, [r0]					@ загрузка в порт
 8000202:	6001      	str	r1, [r0, #0]

	ldr		r1, =GPIO_BSRR_BR7			@ сбрасываем в '0'
 8000204:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
	str 	r1, [r0]					@ загрузка в порт
 8000208:	6001      	str	r1, [r0, #0]

	ldr		r1, =GPIO_BSRR_BR8			@ сбрасываем в '0'
 800020a:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
	str 	r1, [r0]					@ загрузка в порт
 800020e:	6001      	str	r1, [r0, #0]

	bx		lr	@возврат из продпрограммы lr
 8000210:	4770      	bx	lr

08000212 <case_0>:

case_0:
 	/* Code for case 1 */
	bl reset_all	@выполнение подпрограммы
 8000212:	f7ff ffe8 	bl	80001e6 <reset_all>

	ldr 	r1, =GPIO_BSRR_BS0			@ устанавливаем вывод в '1'
 8000216:	f04f 0101 	mov.w	r1, #1
	str 	r1, [r0]					@ загружаем в порт
 800021a:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS1			@ устанавливаем вывод в '1'
 800021c:	f04f 0102 	mov.w	r1, #2
	str 	r1, [r0]					@ загружаем в порт
 8000220:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS4			@ устанавливаем вывод в '1'
 8000222:	f04f 0110 	mov.w	r1, #16
	str 	r1, [r0]					@ загружаем в порт
 8000226:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS5			@ устанавливаем вывод в '1'
 8000228:	f04f 0120 	mov.w	r1, #32
	str 	r1, [r0]					@ загружаем в порт
 800022c:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS6			@ устанавливаем вывод в '1'
 800022e:	f04f 0140 	mov.w	r1, #64	; 0x40
	str 	r1, [r0]					@ загружаем в порт
 8000232:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS7			@ устанавливаем вывод в '1'
 8000234:	f04f 0180 	mov.w	r1, #128	; 0x80
	str 	r1, [r0]					@ загружаем в порт
 8000238:	6001      	str	r1, [r0, #0]

 	B end_switch			@выполнение подпрограммы
 800023a:	e09f      	b.n	800037c <end_switch>

0800023c <case_1>:


case_1:
    /* Code for case 1 */
	bl reset_all	@выполнение подпрограммы
 800023c:	f7ff ffd3 	bl	80001e6 <reset_all>

	ldr 	r1, =GPIO_BSRR_BS1			@ устанавливаем вывод в '1'
 8000240:	f04f 0102 	mov.w	r1, #2
	str 	r1, [r0]					@ загружаем в порт
 8000244:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS4			@ устанавливаем вывод в '1'
 8000246:	f04f 0110 	mov.w	r1, #16
	str 	r1, [r0]					@ загружаем в порт
 800024a:	6001      	str	r1, [r0, #0]

    B end_switch					@выполнение подпрограммы
 800024c:	e096      	b.n	800037c <end_switch>

0800024e <case_2>:

case_2:
    /* Code for case 2 */
    bl reset_all						@выполнение подпрограммы
 800024e:	f7ff ffca 	bl	80001e6 <reset_all>

	ldr 	r1, =GPIO_BSRR_BS0			@ устанавливаем вывод в '1'
 8000252:	f04f 0101 	mov.w	r1, #1
	str 	r1, [r0]					@ загружаем в порт
 8000256:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS1			@ устанавливаем вывод в '1'
 8000258:	f04f 0102 	mov.w	r1, #2
	str 	r1, [r0]					@ загружаем в порт
 800025c:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS8			@ устанавливаем вывод в '1'
 800025e:	f44f 7180 	mov.w	r1, #256	; 0x100
	str 	r1, [r0]					@ загружаем в порт
 8000262:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS6			@ устанавливаем вывод в '1'
 8000264:	f04f 0140 	mov.w	r1, #64	; 0x40
	str 	r1, [r0]					@ загружаем в порт
 8000268:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS5			@ устанавливаем вывод в '1'
 800026a:	f04f 0120 	mov.w	r1, #32
	str 	r1, [r0]					@ загружаем в порт
 800026e:	6001      	str	r1, [r0, #0]

    B end_switch					@ идем в конец свича
 8000270:	e084      	b.n	800037c <end_switch>

08000272 <case_3>:

case_3:
    /* Code for case 3 */
    bl reset_all			@ выполнение подпрограммы
 8000272:	f7ff ffb8 	bl	80001e6 <reset_all>

	ldr 	r1, =GPIO_BSRR_BS0			@ устанавливаем вывод в '1'
 8000276:	f04f 0101 	mov.w	r1, #1
	str 	r1, [r0]					@ загружаем в порт
 800027a:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS1			@ устанавливаем вывод в '1'
 800027c:	f04f 0102 	mov.w	r1, #2
	str 	r1, [r0]					@ загружаем в порт
 8000280:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS8			@ устанавливаем вывод в '1'
 8000282:	f44f 7180 	mov.w	r1, #256	; 0x100
	str 	r1, [r0]					@ загружаем в порт
 8000286:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS4			@ устанавливаем вывод в '1'
 8000288:	f04f 0110 	mov.w	r1, #16
	str 	r1, [r0]					@ загружаем в порт
 800028c:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS5			@ устанавливаем вывод в '1'
 800028e:	f04f 0120 	mov.w	r1, #32
	str 	r1, [r0]					@ загружаем в порт
 8000292:	6001      	str	r1, [r0, #0]

    B end_switch					@ идем в конец свича
 8000294:	e072      	b.n	800037c <end_switch>

08000296 <case_4>:

    case_4:
    /* Code for case 4 */
    bl reset_all				@выполнение подпрограммы
 8000296:	f7ff ffa6 	bl	80001e6 <reset_all>

	ldr 	r1, =GPIO_BSRR_BS7			@ устанавливаем вывод в '1'
 800029a:	f04f 0180 	mov.w	r1, #128	; 0x80
	str 	r1, [r0]					@ загружаем в порт
 800029e:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS8			@ устанавливаем вывод в '1'
 80002a0:	f44f 7180 	mov.w	r1, #256	; 0x100
	str 	r1, [r0]					@ загружаем в порт
 80002a4:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS1			@ устанавливаем вывод в '1'
 80002a6:	f04f 0102 	mov.w	r1, #2
	str 	r1, [r0]					@ загружаем в порт
 80002aa:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS4			@ устанавливаем вывод в '1'
 80002ac:	f04f 0110 	mov.w	r1, #16
	str 	r1, [r0]					@ загружаем в порт
 80002b0:	6001      	str	r1, [r0, #0]
    B end_switch					@ идем в конец свича
 80002b2:	e063      	b.n	800037c <end_switch>

080002b4 <case_5>:

    case_5:
    /* Code for case 5 */
    bl reset_all			@выполнение подпрограммы
 80002b4:	f7ff ff97 	bl	80001e6 <reset_all>

	ldr 	r1, =GPIO_BSRR_BS0			@ устанавливаем вывод в '1'
 80002b8:	f04f 0101 	mov.w	r1, #1
	str 	r1, [r0]					@ загружаем в порт
 80002bc:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS7			@ устанавливаем вывод в '1'
 80002be:	f04f 0180 	mov.w	r1, #128	; 0x80
	str 	r1, [r0]					@ загружаем в порт
 80002c2:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS8			@ устанавливаем вывод в '1'
 80002c4:	f44f 7180 	mov.w	r1, #256	; 0x100
	str 	r1, [r0]					@ загружаем в порт
 80002c8:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS4			@ устанавливаем вывод в '1'
 80002ca:	f04f 0110 	mov.w	r1, #16
	str 	r1, [r0]					@ загружаем в порт
 80002ce:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS5			@ устанавливаем вывод в '1'
 80002d0:	f04f 0120 	mov.w	r1, #32
	str 	r1, [r0]					@ загружаем в порт
 80002d4:	6001      	str	r1, [r0, #0]

    B end_switch				@ идем в конец свича
 80002d6:	e051      	b.n	800037c <end_switch>

080002d8 <case_6>:

    case_6:
    /* Code for case 6 */
    bl reset_all				@выполнение подпрограммы
 80002d8:	f7ff ff85 	bl	80001e6 <reset_all>

	ldr 	r1, =GPIO_BSRR_BS0			@ устанавливаем вывод в '1'
 80002dc:	f04f 0101 	mov.w	r1, #1
	str 	r1, [r0]					@ загружаем в порт
 80002e0:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS7			@ устанавливаем вывод в '1'
 80002e2:	f04f 0180 	mov.w	r1, #128	; 0x80
	str 	r1, [r0]					@ загружаем в порт
 80002e6:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS8			@ устанавливаем вывод в '1'
 80002e8:	f44f 7180 	mov.w	r1, #256	; 0x100
	str 	r1, [r0]					@ загружаем в порт
 80002ec:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS4			@ устанавливаем вывод в '1'
 80002ee:	f04f 0110 	mov.w	r1, #16
	str 	r1, [r0]					@ загружаем в порт
 80002f2:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS5			@ устанавливаем вывод в '1'
 80002f4:	f04f 0120 	mov.w	r1, #32
	str 	r1, [r0]					@ загружаем в порт
 80002f8:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS6			@ устанавливаем вывод в '1'
 80002fa:	f04f 0140 	mov.w	r1, #64	; 0x40
	str 	r1, [r0]					@ загружаем в порт
 80002fe:	6001      	str	r1, [r0, #0]

    B end_switch				@ идем в конец свича
 8000300:	e03c      	b.n	800037c <end_switch>

08000302 <case_7>:

    case_7:
    /* Code for case 7 */
    bl reset_all					@выполнение подпрограммы
 8000302:	f7ff ff70 	bl	80001e6 <reset_all>

	ldr 	r1, =GPIO_BSRR_BS0			@ устанавливаем вывод в '1'
 8000306:	f04f 0101 	mov.w	r1, #1
	str 	r1, [r0]					@ загружаем в порт
 800030a:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS1			@ устанавливаем вывод в '1'
 800030c:	f04f 0102 	mov.w	r1, #2
	str 	r1, [r0]					@ загружаем в порт
 8000310:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS4			@ устанавливаем вывод в '1'
 8000312:	f04f 0110 	mov.w	r1, #16
	str 	r1, [r0]					@ загружаем в порт
 8000316:	6001      	str	r1, [r0, #0]

    B end_switch				@ идем в конец свича
 8000318:	e030      	b.n	800037c <end_switch>

0800031a <case_8>:

    case_8:
    /* Code for case 8 */
	bl reset_all					@выполнение подпрограммы
 800031a:	f7ff ff64 	bl	80001e6 <reset_all>

	ldr 	r1, =GPIO_BSRR_BS0			@ устанавливаем вывод в '1'
 800031e:	f04f 0101 	mov.w	r1, #1
	str 	r1, [r0]					@ загружаем в порт
 8000322:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS1			@ устанавливаем вывод в '1'
 8000324:	f04f 0102 	mov.w	r1, #2
	str 	r1, [r0]					@ загружаем в порт
 8000328:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS4			@ устанавливаем вывод в '1'
 800032a:	f04f 0110 	mov.w	r1, #16
	str 	r1, [r0]					@ загружаем в порт
 800032e:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS5			@ устанавливаем вывод в '1'
 8000330:	f04f 0120 	mov.w	r1, #32
	str 	r1, [r0]					@ загружаем в порт
 8000334:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS6			@ устанавливаем вывод в '1'
 8000336:	f04f 0140 	mov.w	r1, #64	; 0x40
	str 	r1, [r0]					@ загружаем в порт
 800033a:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS7			@ устанавливаем вывод в '1'
 800033c:	f04f 0180 	mov.w	r1, #128	; 0x80
	str 	r1, [r0]					@ загружаем в порт
 8000340:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS8			@ устанавливаем вывод в '1'
 8000342:	f44f 7180 	mov.w	r1, #256	; 0x100
	str 	r1, [r0]					@ загружаем в порт
 8000346:	6001      	str	r1, [r0, #0]

    B end_switch				@ идем в конец свича
 8000348:	e018      	b.n	800037c <end_switch>

0800034a <case_9>:

	case_9:
    /* Code for case 9 */
    bl reset_all					@выполнение подпрограммы
 800034a:	f7ff ff4c 	bl	80001e6 <reset_all>

	ldr 	r1, =GPIO_BSRR_BS0			@ устанавливаем вывод в '1'
 800034e:	f04f 0101 	mov.w	r1, #1
	str 	r1, [r0]					@ загружаем в порт
 8000352:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS1			@ устанавливаем вывод в '1'
 8000354:	f04f 0102 	mov.w	r1, #2
	str 	r1, [r0]					@ загружаем в порт
 8000358:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS4			@ устанавливаем вывод в '1'
 800035a:	f04f 0110 	mov.w	r1, #16
	str 	r1, [r0]					@ загружаем в порт
 800035e:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS5			@ устанавливаем вывод в '1'
 8000360:	f04f 0120 	mov.w	r1, #32
	str 	r1, [r0]					@ загружаем в порт
 8000364:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS7			@ устанавливаем вывод в '1'
 8000366:	f04f 0180 	mov.w	r1, #128	; 0x80
	str 	r1, [r0]					@ загружаем в порт
 800036a:	6001      	str	r1, [r0, #0]

	ldr 	r1, =GPIO_BSRR_BS8			@ устанавливаем вывод в '1'
 800036c:	f44f 7180 	mov.w	r1, #256	; 0x100
	str 	r1, [r0]					@ загружаем в порт
 8000370:	6001      	str	r1, [r0, #0]

    b end_switch				@ идем в конец свича
 8000372:	e003      	b.n	800037c <end_switch>

08000374 <default_case>:

default_case:							@ нужно для случая, когда r6>9
    /* Code for the default case */
    bl reset_all						@ надо для сброса всего
 8000374:	f7ff ff37 	bl	80001e6 <reset_all>
    bl reset_button						@ надо для сброса коунта кнопки (0->9)
 8000378:	f7ff ff0e 	bl	8000198 <reset_button>

0800037c <end_switch>:

end_switch:
	b	readbutton						@ возвращаемся к прослушиванию кнопки
 800037c:	e70f      	b.n	800019e <readbutton>

0800037e <delay>:

delay:									@ Подпрограмма задержки
	ldr		r8, =0xFFFFF				@ псевдоинструкция Thumb (загрузить константу в регистр)
 800037e:	f8df 8024 	ldr.w	r8, [pc, #36]	; 80003a4 <delay_loop+0x22>

08000382 <delay_loop>:
delay_loop:
	subs	r8, #1						@ SUB с установкой флагов результата
 8000382:	f1b8 0801 	subs.w	r8, r8, #1
	it 		NE
 8000386:	bf18      	it	ne
	bne		delay_loop					@ переход, если Z==0 (результат вычитания не равен нулю)
 8000388:	e7fb      	bne.n	8000382 <delay_loop>
	b		increment					@ переходим в инкремент
 800038a:	e710      	b.n	80001ae <increment>
 	ldr		r0, =_estack
 800038c:	20005000 	.word	0x20005000
	ldr 	r0, =RCC_APB2ENR			@ адрес шины, где находится тактирование
 8000390:	40021018 	.word	0x40021018
	ldr		r0, =GPIOA_CRL				@ адрес порта
 8000394:	40010800 	.word	0x40010800
	ldr 	r1, =0x33334433			@ битная маска настроек для Output mode 50MHz, Push-Pull ("0011")
 8000398:	33334433 	.word	0x33334433
	ldr		r0, =GPIOA_CRH				@ адрес порта
 800039c:	40010804 	.word	0x40010804
	ldr		r4, =GPIOC_IDR 				@ регистр чтения порта, каждый бит - состояние порта
 80003a0:	40011008 	.word	0x40011008
	ldr		r8, =0xFFFFF				@ псевдоинструкция Thumb (загрузить константу в регистр)
 80003a4:	000fffff 	.word	0x000fffff

080003a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a8:	e7fe      	b.n	80003a8 <ADC1_2_IRQHandler>
	...

080003ac <_init>:
 80003ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ae:	bf00      	nop
 80003b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b2:	bc08      	pop	{r3}
 80003b4:	469e      	mov	lr, r3
 80003b6:	4770      	bx	lr

080003b8 <_fini>:
 80003b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ba:	bf00      	nop
 80003bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003be:	bc08      	pop	{r3}
 80003c0:	469e      	mov	lr, r3
 80003c2:	4770      	bx	lr

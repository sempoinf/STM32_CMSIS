
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000110  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000240  08000248  00010248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000240  08000240  00010248  2**0
                  CONTENTS
  4 .ARM          00000000  08000240  08000240  00010248  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000240  08000248  00010248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000240  08000240  00010240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000244  08000244  00010244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000248  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000248  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010248  2**0
                  CONTENTS, READONLY
 12 .debug_line   000000a5  00000000  00000000  00010271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00000022  00000000  00000000  00010316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000012  00000000  00000000  00010338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000028  00000000  00000000  00010350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0000008c  00000000  00000000  00010378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000020  00000000  00000000  00010408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000228 	.word	0x08000228

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000228 	.word	0x08000228

08000170 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
 	ldr		r0, =_estack
 8000170:	4826      	ldr	r0, [pc, #152]	; (800020c <nine+0x8>)
 	mov		sp, r0          			/* set stack pointer */
 8000172:	4685      	mov	sp, r0

	ldr		r0, =RCC_APB2ENR            // В r0 загрузили адресс RCC_APB2ENR
 8000174:	4826      	ldr	r0, [pc, #152]	; (8000210 <nine+0xc>)

	mov		r1, #16						// Тактирование C
 8000176:	f04f 0110 	mov.w	r1, #16
	str 	r1, [r0]					// Загрузка настроек в регистр RCC_APB2ENR
 800017a:	6001      	str	r1, [r0, #0]

	ldr		r0, =GPIOC_CRL				// Адрес порта
 800017c:	4825      	ldr	r0, [pc, #148]	; (8000214 <nine+0x10>)
	ldr		r1, =0x3333333				// Значение PC0-PC6 для Output mode 50mHz, Push-Pull ("0011")
 800017e:	4926      	ldr	r1, [pc, #152]	; (8000218 <nine+0x14>)
    str		r1, [r0]					// Загрузка настроек в регистр GPIOC_CRL
 8000180:	6001      	str	r1, [r0, #0]

    ldr		r0, =GPIOC_ODR				// Адрес порта выходных сигналов
 8000182:	4826      	ldr	r0, [pc, #152]	; (800021c <nine+0x18>)

    ldr     r1, =PERIPH_BB_BASE+ \
 8000184:	4926      	ldr	r1, [pc, #152]	; (8000220 <nine+0x1c>)

08000186 <reset>:
    			(GPIOC_IDR-PERIPH_BASE)*32 + \
    			13*4					// Bitbanding 13-го бита регистра GPIOC_IDR для считывания кнопки

reset:									// Обновление счетчика и семисегментника
	ldr     r2, =#0						// Выставили счетчик в 0
 8000186:	f04f 0200 	mov.w	r2, #0
    b zero
 800018a:	e017      	b.n	80001bc <zero>

0800018c <loop>:

loop:									// Бесконечный цикл

	ldr		r3, [r1]					// Считали кнопку
 800018c:	680b      	ldr	r3, [r1, #0]
	cmp		r3, #0						// Проверяем нажата ли кнопка (0 - нажата, 1 - не нажата)
 800018e:	2b00      	cmp	r3, #0
	bne 	loop						// Если не нажата идем в loop, иначе идем дальше
 8000190:	d1fc      	bne.n	800018c <loop>

08000192 <check_button>:

check_button:

	ldr		r3, [r1]
 8000192:	680b      	ldr	r3, [r1, #0]
	cmp		r3, #1
 8000194:	2b01      	cmp	r3, #1
	bne		check_button
 8000196:	d1fc      	bne.n	8000192 <check_button>

	cmp		r2, #9						// Проверяем, что счетчик достиг 9
 8000198:	2a09      	cmp	r2, #9
	beq		reset						// Если достиг, то идем в reset, иначе идем дальше
 800019a:	d0f4      	beq.n	8000186 <reset>

	add		r2, r2, #1					// Инкрементируем счетчик
 800019c:	f102 0201 	add.w	r2, r2, #1

	TBB.W [PC, r2]						// Табличный переход
 80001a0:	e8df f002 	tbb	[pc, r2]

080001a4 <branchtable>:
 80001a4:	1814100c 	.word	0x1814100c
 80001a8:	2824201c 	.word	0x2824201c
 80001ac:	302c      	.short	0x302c

080001ae <delay>:
    .byte ((eight - branchtable) / 2)
    .byte ((nine - branchtable) / 2)


delay:									// Подпрограмма задержки
	ldr		r3, =0xFFFF
 80001ae:	f64f 73ff 	movw	r3, #65535	; 0xffff

080001b2 <delay_loop>:
delay_loop:
	sub	r3, r3, #1
 80001b2:	f1a3 0301 	sub.w	r3, r3, #1
	cmp r3, #0
 80001b6:	2b00      	cmp	r3, #0
	bne delay_loop
 80001b8:	d1fb      	bne.n	80001b2 <delay_loop>
	b loop
 80001ba:	e7e7      	b.n	800018c <loop>

080001bc <zero>:

zero:									// Вывод 0
	ldr		r3, =0x3f
 80001bc:	f04f 033f 	mov.w	r3, #63	; 0x3f
	str		r3, [r0]
 80001c0:	6003      	str	r3, [r0, #0]

	b		delay
 80001c2:	e7f4      	b.n	80001ae <delay>

080001c4 <one>:

one:									// Вывод 1
	ldr		r3, =0x6
 80001c4:	f04f 0306 	mov.w	r3, #6
	str		r3, [r0]
 80001c8:	6003      	str	r3, [r0, #0]

	b		delay
 80001ca:	e7f0      	b.n	80001ae <delay>

080001cc <two>:

two:									// Вывод 2
	ldr		r3, =0x5b
 80001cc:	f04f 035b 	mov.w	r3, #91	; 0x5b
	str		r3, [r0]
 80001d0:	6003      	str	r3, [r0, #0]

	b		delay
 80001d2:	e7ec      	b.n	80001ae <delay>

080001d4 <three>:

three:									// Вывод 3
	ldr		r3, =0x4f
 80001d4:	f04f 034f 	mov.w	r3, #79	; 0x4f
	str		r3, [r0]
 80001d8:	6003      	str	r3, [r0, #0]

	b		delay
 80001da:	e7e8      	b.n	80001ae <delay>

080001dc <four>:

four:									// Вывод 4

	ldr		r3, =0x66
 80001dc:	f04f 0366 	mov.w	r3, #102	; 0x66
	str		r3, [r0]
 80001e0:	6003      	str	r3, [r0, #0]

	b		delay
 80001e2:	e7e4      	b.n	80001ae <delay>

080001e4 <five>:

five:									// Вывод 5
	ldr		r3, =0x6d
 80001e4:	f04f 036d 	mov.w	r3, #109	; 0x6d
	str		r3, [r0]
 80001e8:	6003      	str	r3, [r0, #0]

	b		delay
 80001ea:	e7e0      	b.n	80001ae <delay>

080001ec <six>:

six:									// Вывод 6
	ldr		r3, =0x7d
 80001ec:	f04f 037d 	mov.w	r3, #125	; 0x7d
	str		r3, [r0]
 80001f0:	6003      	str	r3, [r0, #0]

	b		delay
 80001f2:	e7dc      	b.n	80001ae <delay>

080001f4 <seven>:

seven:									// Вывод 7
	ldr		r3, =0x7
 80001f4:	f04f 0307 	mov.w	r3, #7
	str		r3, [r0]
 80001f8:	6003      	str	r3, [r0, #0]

	b		delay
 80001fa:	e7d8      	b.n	80001ae <delay>

080001fc <eight>:

eight:									// Вывод 8
	ldr		r3, =0x7f
 80001fc:	f04f 037f 	mov.w	r3, #127	; 0x7f
	str		r3, [r0]
 8000200:	6003      	str	r3, [r0, #0]

	b		delay
 8000202:	e7d4      	b.n	80001ae <delay>

08000204 <nine>:

nine:									// Вывод 9
	ldr		r3, =0x6f
 8000204:	f04f 036f 	mov.w	r3, #111	; 0x6f
	str		r3, [r0]
 8000208:	6003      	str	r3, [r0, #0]

	b		delay
 800020a:	e7d0      	b.n	80001ae <delay>
 	ldr		r0, =_estack
 800020c:	20005000 	.word	0x20005000
	ldr		r0, =RCC_APB2ENR            // В r0 загрузили адресс RCC_APB2ENR
 8000210:	40021018 	.word	0x40021018
	ldr		r0, =GPIOC_CRL				// Адрес порта
 8000214:	40011000 	.word	0x40011000
	ldr		r1, =0x3333333				// Значение PC0-PC6 для Output mode 50mHz, Push-Pull ("0011")
 8000218:	03333333 	.word	0x03333333
    ldr		r0, =GPIOC_ODR				// Адрес порта выходных сигналов
 800021c:	4001100c 	.word	0x4001100c
    ldr     r1, =PERIPH_BB_BASE+ \
 8000220:	42220134 	.word	0x42220134

08000224 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000224:	e7fe      	b.n	8000224 <ADC1_2_IRQHandler>
	...

08000228 <_init>:
 8000228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800022a:	bf00      	nop
 800022c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800022e:	bc08      	pop	{r3}
 8000230:	469e      	mov	lr, r3
 8000232:	4770      	bx	lr

08000234 <_fini>:
 8000234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000236:	bf00      	nop
 8000238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800023a:	bc08      	pop	{r3}
 800023c:	469e      	mov	lr, r3
 800023e:	4770      	bx	lr
